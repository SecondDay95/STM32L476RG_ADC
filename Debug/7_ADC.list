
7_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000816c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e8  08008300  08008300  00009300  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086e8  080086e8  0000a1d4  2**0
                  CONTENTS
  4 .ARM          00000008  080086e8  080086e8  000096e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080086f0  080086f0  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080086f0  080086f0  000096f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080086f4  080086f4  000096f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080086f8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  200001d4  080088cc  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000047c  080088cc  0000a47c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010147  00000000  00000000  0000a204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024b2  00000000  00000000  0001a34b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e70  00000000  00000000  0001c800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b12  00000000  00000000  0001d670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000287da  00000000  00000000  0001e182  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010a76  00000000  00000000  0004695c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fca79  00000000  00000000  000573d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00153e4b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c2c  00000000  00000000  00153e90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00158abc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080082e4 	.word	0x080082e4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	080082e4 	.word	0x080082e4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <__io_putchar>:
/* USER CODE BEGIN 0 */

//Wysylanie danych przez UART za pomoca printf:

int __io_putchar(int ch)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2b0a      	cmp	r3, #10
 8000ea4:	d102      	bne.n	8000eac <__io_putchar+0x14>
    __io_putchar('\r');
 8000ea6:	200d      	movs	r0, #13
 8000ea8:	f7ff fff6 	bl	8000e98 <__io_putchar>
  }

  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000eac:	1d39      	adds	r1, r7, #4
 8000eae:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	4803      	ldr	r0, [pc, #12]	@ (8000ec4 <__io_putchar+0x2c>)
 8000eb6:	f004 f82d 	bl	8004f14 <HAL_UART_Transmit>

  return 1;
 8000eba:	2301      	movs	r3, #1
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	2000029c 	.word	0x2000029c

08000ec8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ecc:	b086      	sub	sp, #24
 8000ece:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ed0:	f000 fc39 	bl	8001746 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ed4:	f000 f85e 	bl	8000f94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ed8:	f000 f99e 	bl	8001218 <MX_GPIO_Init>
  MX_DMA_Init();
 8000edc:	f000 f97e 	bl	80011dc <MX_DMA_Init>
  MX_ADC1_Init();
 8000ee0:	f000 f8ba 	bl	8001058 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000ee4:	f000 f94a 	bl	800117c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  //Kalibracja przetwornika ADC1 w trybie pracy ADC_SINGLE_ENDED (napięcie mierzone jest względem
  //napięcia referencyjnego - napiecie mierzone jest miedzy wyjsciem a
  //napieciem referencyjnym - 3.3V):
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000ee8:	217f      	movs	r1, #127	@ 0x7f
 8000eea:	4825      	ldr	r0, [pc, #148]	@ (8000f80 <main+0xb8>)
 8000eec:	f001 fea8 	bl	8002c40 <HAL_ADCEx_Calibration_Start>
  //pomiar):
  //HAL_ADC_Start(&hadc1);

  volatile static uint16_t joystick[2];
  //Uruchomienie pomiaru przetwornika ADC1 w trybie ciaglym z wykorzystaniem DMA:
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)joystick, 2);
 8000ef0:	2202      	movs	r2, #2
 8000ef2:	4924      	ldr	r1, [pc, #144]	@ (8000f84 <main+0xbc>)
 8000ef4:	4822      	ldr	r0, [pc, #136]	@ (8000f80 <main+0xb8>)
 8000ef6:	f001 f80b 	bl	8001f10 <HAL_ADC_Start_DMA>

	  //Obliczenie napięcia mierzonego przez przetwornik (przeliczenie wartosci cyfrowej
	  //na mierzona wartosc analogowa). Napiecie referencyjne wynosi 3.3V, a rozdzielczosc
	  //przetwornika 12 bitów, czyli 4096 (2^12):
	  //float voltage = 3.3f * value / 4096;
	  float voltage1 = 3.3f * joystick[0] / 4096;
 8000efa:	4b22      	ldr	r3, [pc, #136]	@ (8000f84 <main+0xbc>)
 8000efc:	881b      	ldrh	r3, [r3, #0]
 8000efe:	b29b      	uxth	r3, r3
 8000f00:	ee07 3a90 	vmov	s15, r3
 8000f04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f08:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8000f88 <main+0xc0>
 8000f0c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000f10:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8000f8c <main+0xc4>
 8000f14:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f18:	edc7 7a01 	vstr	s15, [r7, #4]
	  float voltage2 = 3.3f * joystick[1] / 4096;
 8000f1c:	4b19      	ldr	r3, [pc, #100]	@ (8000f84 <main+0xbc>)
 8000f1e:	885b      	ldrh	r3, [r3, #2]
 8000f20:	b29b      	uxth	r3, r3
 8000f22:	ee07 3a90 	vmov	s15, r3
 8000f26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f2a:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8000f88 <main+0xc0>
 8000f2e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000f32:	eddf 6a16 	vldr	s13, [pc, #88]	@ 8000f8c <main+0xc4>
 8000f36:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f3a:	edc7 7a00 	vstr	s15, [r7]
	  //Przeslanie pomiaru przez UART do komputera:
	  //printf("ADC = %lu (%.3f V)\n", value, voltage);
	  printf("ADC: VRx = %lu (%.3f), VRy = %lu (%.3f)\n", joystick[0], voltage1, joystick[1], voltage2);
 8000f3e:	4b11      	ldr	r3, [pc, #68]	@ (8000f84 <main+0xbc>)
 8000f40:	881b      	ldrh	r3, [r3, #0]
 8000f42:	b29b      	uxth	r3, r3
 8000f44:	4698      	mov	r8, r3
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f7ff fafe 	bl	8000548 <__aeabi_f2d>
 8000f4c:	4604      	mov	r4, r0
 8000f4e:	460d      	mov	r5, r1
 8000f50:	4b0c      	ldr	r3, [pc, #48]	@ (8000f84 <main+0xbc>)
 8000f52:	885b      	ldrh	r3, [r3, #2]
 8000f54:	b29b      	uxth	r3, r3
 8000f56:	461e      	mov	r6, r3
 8000f58:	6838      	ldr	r0, [r7, #0]
 8000f5a:	f7ff faf5 	bl	8000548 <__aeabi_f2d>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	460b      	mov	r3, r1
 8000f62:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000f66:	9600      	str	r6, [sp, #0]
 8000f68:	4622      	mov	r2, r4
 8000f6a:	462b      	mov	r3, r5
 8000f6c:	4641      	mov	r1, r8
 8000f6e:	4808      	ldr	r0, [pc, #32]	@ (8000f90 <main+0xc8>)
 8000f70:	f005 fa40 	bl	80063f4 <iprintf>
	  HAL_Delay(250);
 8000f74:	20fa      	movs	r0, #250	@ 0xfa
 8000f76:	f000 fc5b 	bl	8001830 <HAL_Delay>
  {
 8000f7a:	bf00      	nop
 8000f7c:	e7bd      	b.n	8000efa <main+0x32>
 8000f7e:	bf00      	nop
 8000f80:	200001f0 	.word	0x200001f0
 8000f84:	20000324 	.word	0x20000324
 8000f88:	40533333 	.word	0x40533333
 8000f8c:	45800000 	.word	0x45800000
 8000f90:	08008300 	.word	0x08008300

08000f94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b096      	sub	sp, #88	@ 0x58
 8000f98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f9a:	f107 0314 	add.w	r3, r7, #20
 8000f9e:	2244      	movs	r2, #68	@ 0x44
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f005 fa7b 	bl	800649e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fa8:	463b      	mov	r3, r7
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	605a      	str	r2, [r3, #4]
 8000fb0:	609a      	str	r2, [r3, #8]
 8000fb2:	60da      	str	r2, [r3, #12]
 8000fb4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000fb6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000fba:	f002 fc3b 	bl	8003834 <HAL_PWREx_ControlVoltageScaling>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000fc4:	f000 f966 	bl	8001294 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000fc8:	f002 fc16 	bl	80037f8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000fcc:	4b21      	ldr	r3, [pc, #132]	@ (8001054 <SystemClock_Config+0xc0>)
 8000fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000fd2:	4a20      	ldr	r2, [pc, #128]	@ (8001054 <SystemClock_Config+0xc0>)
 8000fd4:	f023 0318 	bic.w	r3, r3, #24
 8000fd8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000fdc:	2314      	movs	r3, #20
 8000fde:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000fec:	2360      	movs	r3, #96	@ 0x60
 8000fee:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000ffc:	2328      	movs	r3, #40	@ 0x28
 8000ffe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001000:	2307      	movs	r3, #7
 8001002:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001004:	2302      	movs	r3, #2
 8001006:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001008:	2302      	movs	r3, #2
 800100a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800100c:	f107 0314 	add.w	r3, r7, #20
 8001010:	4618      	mov	r0, r3
 8001012:	f002 fc65 	bl	80038e0 <HAL_RCC_OscConfig>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800101c:	f000 f93a 	bl	8001294 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001020:	230f      	movs	r3, #15
 8001022:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001024:	2303      	movs	r3, #3
 8001026:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001028:	2300      	movs	r3, #0
 800102a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800102c:	2300      	movs	r3, #0
 800102e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001030:	2300      	movs	r3, #0
 8001032:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001034:	463b      	mov	r3, r7
 8001036:	2104      	movs	r1, #4
 8001038:	4618      	mov	r0, r3
 800103a:	f003 f82d 	bl	8004098 <HAL_RCC_ClockConfig>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001044:	f000 f926 	bl	8001294 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001048:	f003 fd34 	bl	8004ab4 <HAL_RCCEx_EnableMSIPLLMode>
}
 800104c:	bf00      	nop
 800104e:	3758      	adds	r7, #88	@ 0x58
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	40021000 	.word	0x40021000

08001058 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b08a      	sub	sp, #40	@ 0x28
 800105c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800105e:	f107 031c 	add.w	r3, r7, #28
 8001062:	2200      	movs	r2, #0
 8001064:	601a      	str	r2, [r3, #0]
 8001066:	605a      	str	r2, [r3, #4]
 8001068:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800106a:	1d3b      	adds	r3, r7, #4
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]
 8001076:	611a      	str	r2, [r3, #16]
 8001078:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800107a:	4b3c      	ldr	r3, [pc, #240]	@ (800116c <MX_ADC1_Init+0x114>)
 800107c:	4a3c      	ldr	r2, [pc, #240]	@ (8001170 <MX_ADC1_Init+0x118>)
 800107e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001080:	4b3a      	ldr	r3, [pc, #232]	@ (800116c <MX_ADC1_Init+0x114>)
 8001082:	2200      	movs	r2, #0
 8001084:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001086:	4b39      	ldr	r3, [pc, #228]	@ (800116c <MX_ADC1_Init+0x114>)
 8001088:	2200      	movs	r2, #0
 800108a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800108c:	4b37      	ldr	r3, [pc, #220]	@ (800116c <MX_ADC1_Init+0x114>)
 800108e:	2200      	movs	r2, #0
 8001090:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001092:	4b36      	ldr	r3, [pc, #216]	@ (800116c <MX_ADC1_Init+0x114>)
 8001094:	2201      	movs	r2, #1
 8001096:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001098:	4b34      	ldr	r3, [pc, #208]	@ (800116c <MX_ADC1_Init+0x114>)
 800109a:	2204      	movs	r2, #4
 800109c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800109e:	4b33      	ldr	r3, [pc, #204]	@ (800116c <MX_ADC1_Init+0x114>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80010a4:	4b31      	ldr	r3, [pc, #196]	@ (800116c <MX_ADC1_Init+0x114>)
 80010a6:	2201      	movs	r2, #1
 80010a8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 80010aa:	4b30      	ldr	r3, [pc, #192]	@ (800116c <MX_ADC1_Init+0x114>)
 80010ac:	2202      	movs	r2, #2
 80010ae:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010b0:	4b2e      	ldr	r3, [pc, #184]	@ (800116c <MX_ADC1_Init+0x114>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010b8:	4b2c      	ldr	r3, [pc, #176]	@ (800116c <MX_ADC1_Init+0x114>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010be:	4b2b      	ldr	r3, [pc, #172]	@ (800116c <MX_ADC1_Init+0x114>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80010c4:	4b29      	ldr	r3, [pc, #164]	@ (800116c <MX_ADC1_Init+0x114>)
 80010c6:	2201      	movs	r2, #1
 80010c8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010cc:	4b27      	ldr	r3, [pc, #156]	@ (800116c <MX_ADC1_Init+0x114>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = ENABLE;
 80010d2:	4b26      	ldr	r3, [pc, #152]	@ (800116c <MX_ADC1_Init+0x114>)
 80010d4:	2201      	movs	r2, #1
 80010d6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 80010da:	4b24      	ldr	r3, [pc, #144]	@ (800116c <MX_ADC1_Init+0x114>)
 80010dc:	220c      	movs	r2, #12
 80010de:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 80010e0:	4b22      	ldr	r3, [pc, #136]	@ (800116c <MX_ADC1_Init+0x114>)
 80010e2:	2280      	movs	r2, #128	@ 0x80
 80010e4:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80010e6:	4b21      	ldr	r3, [pc, #132]	@ (800116c <MX_ADC1_Init+0x114>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 80010ec:	4b1f      	ldr	r3, [pc, #124]	@ (800116c <MX_ADC1_Init+0x114>)
 80010ee:	2201      	movs	r2, #1
 80010f0:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010f2:	481e      	ldr	r0, [pc, #120]	@ (800116c <MX_ADC1_Init+0x114>)
 80010f4:	f000 fdbc 	bl	8001c70 <HAL_ADC_Init>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80010fe:	f000 f8c9 	bl	8001294 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001102:	2300      	movs	r3, #0
 8001104:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001106:	f107 031c 	add.w	r3, r7, #28
 800110a:	4619      	mov	r1, r3
 800110c:	4817      	ldr	r0, [pc, #92]	@ (800116c <MX_ADC1_Init+0x114>)
 800110e:	f001 fdf7 	bl	8002d00 <HAL_ADCEx_MultiModeConfigChannel>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8001118:	f000 f8bc 	bl	8001294 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800111c:	4b15      	ldr	r3, [pc, #84]	@ (8001174 <MX_ADC1_Init+0x11c>)
 800111e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001120:	2306      	movs	r3, #6
 8001122:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001124:	2307      	movs	r3, #7
 8001126:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001128:	237f      	movs	r3, #127	@ 0x7f
 800112a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800112c:	2304      	movs	r3, #4
 800112e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001130:	2300      	movs	r3, #0
 8001132:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001134:	1d3b      	adds	r3, r7, #4
 8001136:	4619      	mov	r1, r3
 8001138:	480c      	ldr	r0, [pc, #48]	@ (800116c <MX_ADC1_Init+0x114>)
 800113a:	f000 ffc3 	bl	80020c4 <HAL_ADC_ConfigChannel>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 8001144:	f000 f8a6 	bl	8001294 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001148:	4b0b      	ldr	r3, [pc, #44]	@ (8001178 <MX_ADC1_Init+0x120>)
 800114a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800114c:	230c      	movs	r3, #12
 800114e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001150:	1d3b      	adds	r3, r7, #4
 8001152:	4619      	mov	r1, r3
 8001154:	4805      	ldr	r0, [pc, #20]	@ (800116c <MX_ADC1_Init+0x114>)
 8001156:	f000 ffb5 	bl	80020c4 <HAL_ADC_ConfigChannel>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_ADC1_Init+0x10c>
  {
    Error_Handler();
 8001160:	f000 f898 	bl	8001294 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001164:	bf00      	nop
 8001166:	3728      	adds	r7, #40	@ 0x28
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	200001f0 	.word	0x200001f0
 8001170:	50040000 	.word	0x50040000
 8001174:	04300002 	.word	0x04300002
 8001178:	08600004 	.word	0x08600004

0800117c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001180:	4b14      	ldr	r3, [pc, #80]	@ (80011d4 <MX_USART2_UART_Init+0x58>)
 8001182:	4a15      	ldr	r2, [pc, #84]	@ (80011d8 <MX_USART2_UART_Init+0x5c>)
 8001184:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001186:	4b13      	ldr	r3, [pc, #76]	@ (80011d4 <MX_USART2_UART_Init+0x58>)
 8001188:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800118c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800118e:	4b11      	ldr	r3, [pc, #68]	@ (80011d4 <MX_USART2_UART_Init+0x58>)
 8001190:	2200      	movs	r2, #0
 8001192:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001194:	4b0f      	ldr	r3, [pc, #60]	@ (80011d4 <MX_USART2_UART_Init+0x58>)
 8001196:	2200      	movs	r2, #0
 8001198:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800119a:	4b0e      	ldr	r3, [pc, #56]	@ (80011d4 <MX_USART2_UART_Init+0x58>)
 800119c:	2200      	movs	r2, #0
 800119e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011a0:	4b0c      	ldr	r3, [pc, #48]	@ (80011d4 <MX_USART2_UART_Init+0x58>)
 80011a2:	220c      	movs	r2, #12
 80011a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011a6:	4b0b      	ldr	r3, [pc, #44]	@ (80011d4 <MX_USART2_UART_Init+0x58>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011ac:	4b09      	ldr	r3, [pc, #36]	@ (80011d4 <MX_USART2_UART_Init+0x58>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011b2:	4b08      	ldr	r3, [pc, #32]	@ (80011d4 <MX_USART2_UART_Init+0x58>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011b8:	4b06      	ldr	r3, [pc, #24]	@ (80011d4 <MX_USART2_UART_Init+0x58>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011be:	4805      	ldr	r0, [pc, #20]	@ (80011d4 <MX_USART2_UART_Init+0x58>)
 80011c0:	f003 fe5a 	bl	8004e78 <HAL_UART_Init>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80011ca:	f000 f863 	bl	8001294 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	2000029c 	.word	0x2000029c
 80011d8:	40004400 	.word	0x40004400

080011dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001214 <MX_DMA_Init+0x38>)
 80011e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011e6:	4a0b      	ldr	r2, [pc, #44]	@ (8001214 <MX_DMA_Init+0x38>)
 80011e8:	f043 0301 	orr.w	r3, r3, #1
 80011ec:	6493      	str	r3, [r2, #72]	@ 0x48
 80011ee:	4b09      	ldr	r3, [pc, #36]	@ (8001214 <MX_DMA_Init+0x38>)
 80011f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011f2:	f003 0301 	and.w	r3, r3, #1
 80011f6:	607b      	str	r3, [r7, #4]
 80011f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 4, 0);
 80011fa:	2200      	movs	r2, #0
 80011fc:	2104      	movs	r1, #4
 80011fe:	200b      	movs	r0, #11
 8001200:	f001 ff09 	bl	8003016 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001204:	200b      	movs	r0, #11
 8001206:	f001 ff22 	bl	800304e <HAL_NVIC_EnableIRQ>

}
 800120a:	bf00      	nop
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40021000 	.word	0x40021000

08001218 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b088      	sub	sp, #32
 800121c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121e:	f107 030c 	add.w	r3, r7, #12
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	605a      	str	r2, [r3, #4]
 8001228:	609a      	str	r2, [r3, #8]
 800122a:	60da      	str	r2, [r3, #12]
 800122c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800122e:	4b18      	ldr	r3, [pc, #96]	@ (8001290 <MX_GPIO_Init+0x78>)
 8001230:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001232:	4a17      	ldr	r2, [pc, #92]	@ (8001290 <MX_GPIO_Init+0x78>)
 8001234:	f043 0304 	orr.w	r3, r3, #4
 8001238:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800123a:	4b15      	ldr	r3, [pc, #84]	@ (8001290 <MX_GPIO_Init+0x78>)
 800123c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800123e:	f003 0304 	and.w	r3, r3, #4
 8001242:	60bb      	str	r3, [r7, #8]
 8001244:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001246:	4b12      	ldr	r3, [pc, #72]	@ (8001290 <MX_GPIO_Init+0x78>)
 8001248:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800124a:	4a11      	ldr	r2, [pc, #68]	@ (8001290 <MX_GPIO_Init+0x78>)
 800124c:	f043 0301 	orr.w	r3, r3, #1
 8001250:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001252:	4b0f      	ldr	r3, [pc, #60]	@ (8001290 <MX_GPIO_Init+0x78>)
 8001254:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001256:	f003 0301 	and.w	r3, r3, #1
 800125a:	607b      	str	r3, [r7, #4]
 800125c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800125e:	2200      	movs	r2, #0
 8001260:	2120      	movs	r1, #32
 8001262:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001266:	f002 faaf 	bl	80037c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800126a:	2320      	movs	r3, #32
 800126c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800126e:	2301      	movs	r3, #1
 8001270:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001272:	2300      	movs	r3, #0
 8001274:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001276:	2300      	movs	r3, #0
 8001278:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800127a:	f107 030c 	add.w	r3, r7, #12
 800127e:	4619      	mov	r1, r3
 8001280:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001284:	f002 f8f6 	bl	8003474 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001288:	bf00      	nop
 800128a:	3720      	adds	r7, #32
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	40021000 	.word	0x40021000

08001294 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001298:	b672      	cpsid	i
}
 800129a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800129c:	bf00      	nop
 800129e:	e7fd      	b.n	800129c <Error_Handler+0x8>

080012a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012a6:	4b0f      	ldr	r3, [pc, #60]	@ (80012e4 <HAL_MspInit+0x44>)
 80012a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012aa:	4a0e      	ldr	r2, [pc, #56]	@ (80012e4 <HAL_MspInit+0x44>)
 80012ac:	f043 0301 	orr.w	r3, r3, #1
 80012b0:	6613      	str	r3, [r2, #96]	@ 0x60
 80012b2:	4b0c      	ldr	r3, [pc, #48]	@ (80012e4 <HAL_MspInit+0x44>)
 80012b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	607b      	str	r3, [r7, #4]
 80012bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012be:	4b09      	ldr	r3, [pc, #36]	@ (80012e4 <HAL_MspInit+0x44>)
 80012c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012c2:	4a08      	ldr	r2, [pc, #32]	@ (80012e4 <HAL_MspInit+0x44>)
 80012c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80012ca:	4b06      	ldr	r3, [pc, #24]	@ (80012e4 <HAL_MspInit+0x44>)
 80012cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012d2:	603b      	str	r3, [r7, #0]
 80012d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012d6:	bf00      	nop
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	40021000 	.word	0x40021000

080012e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b0ac      	sub	sp, #176	@ 0xb0
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]
 80012fc:	60da      	str	r2, [r3, #12]
 80012fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001300:	f107 0314 	add.w	r3, r7, #20
 8001304:	2288      	movs	r2, #136	@ 0x88
 8001306:	2100      	movs	r1, #0
 8001308:	4618      	mov	r0, r3
 800130a:	f005 f8c8 	bl	800649e <memset>
  if(hadc->Instance==ADC1)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a3c      	ldr	r2, [pc, #240]	@ (8001404 <HAL_ADC_MspInit+0x11c>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d171      	bne.n	80013fc <HAL_ADC_MspInit+0x114>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001318:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800131c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800131e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001322:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001326:	2301      	movs	r3, #1
 8001328:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800132a:	2301      	movs	r3, #1
 800132c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 800132e:	2310      	movs	r3, #16
 8001330:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001332:	2307      	movs	r3, #7
 8001334:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001336:	2302      	movs	r3, #2
 8001338:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800133a:	2302      	movs	r3, #2
 800133c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800133e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001342:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001344:	f107 0314 	add.w	r3, r7, #20
 8001348:	4618      	mov	r0, r3
 800134a:	f003 f8c9 	bl	80044e0 <HAL_RCCEx_PeriphCLKConfig>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001354:	f7ff ff9e 	bl	8001294 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001358:	4b2b      	ldr	r3, [pc, #172]	@ (8001408 <HAL_ADC_MspInit+0x120>)
 800135a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800135c:	4a2a      	ldr	r2, [pc, #168]	@ (8001408 <HAL_ADC_MspInit+0x120>)
 800135e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001362:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001364:	4b28      	ldr	r3, [pc, #160]	@ (8001408 <HAL_ADC_MspInit+0x120>)
 8001366:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001368:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800136c:	613b      	str	r3, [r7, #16]
 800136e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001370:	4b25      	ldr	r3, [pc, #148]	@ (8001408 <HAL_ADC_MspInit+0x120>)
 8001372:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001374:	4a24      	ldr	r2, [pc, #144]	@ (8001408 <HAL_ADC_MspInit+0x120>)
 8001376:	f043 0304 	orr.w	r3, r3, #4
 800137a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800137c:	4b22      	ldr	r3, [pc, #136]	@ (8001408 <HAL_ADC_MspInit+0x120>)
 800137e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001380:	f003 0304 	and.w	r3, r3, #4
 8001384:	60fb      	str	r3, [r7, #12]
 8001386:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001388:	2303      	movs	r3, #3
 800138a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800138e:	230b      	movs	r3, #11
 8001390:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800139a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800139e:	4619      	mov	r1, r3
 80013a0:	481a      	ldr	r0, [pc, #104]	@ (800140c <HAL_ADC_MspInit+0x124>)
 80013a2:	f002 f867 	bl	8003474 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80013a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001410 <HAL_ADC_MspInit+0x128>)
 80013a8:	4a1a      	ldr	r2, [pc, #104]	@ (8001414 <HAL_ADC_MspInit+0x12c>)
 80013aa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80013ac:	4b18      	ldr	r3, [pc, #96]	@ (8001410 <HAL_ADC_MspInit+0x128>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013b2:	4b17      	ldr	r3, [pc, #92]	@ (8001410 <HAL_ADC_MspInit+0x128>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80013b8:	4b15      	ldr	r3, [pc, #84]	@ (8001410 <HAL_ADC_MspInit+0x128>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80013be:	4b14      	ldr	r3, [pc, #80]	@ (8001410 <HAL_ADC_MspInit+0x128>)
 80013c0:	2280      	movs	r2, #128	@ 0x80
 80013c2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80013c4:	4b12      	ldr	r3, [pc, #72]	@ (8001410 <HAL_ADC_MspInit+0x128>)
 80013c6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80013ca:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80013cc:	4b10      	ldr	r3, [pc, #64]	@ (8001410 <HAL_ADC_MspInit+0x128>)
 80013ce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013d2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80013d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001410 <HAL_ADC_MspInit+0x128>)
 80013d6:	2220      	movs	r2, #32
 80013d8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80013da:	4b0d      	ldr	r3, [pc, #52]	@ (8001410 <HAL_ADC_MspInit+0x128>)
 80013dc:	2200      	movs	r2, #0
 80013de:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80013e0:	480b      	ldr	r0, [pc, #44]	@ (8001410 <HAL_ADC_MspInit+0x128>)
 80013e2:	f001 fe4f 	bl	8003084 <HAL_DMA_Init>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <HAL_ADC_MspInit+0x108>
    {
      Error_Handler();
 80013ec:	f7ff ff52 	bl	8001294 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	4a07      	ldr	r2, [pc, #28]	@ (8001410 <HAL_ADC_MspInit+0x128>)
 80013f4:	64da      	str	r2, [r3, #76]	@ 0x4c
 80013f6:	4a06      	ldr	r2, [pc, #24]	@ (8001410 <HAL_ADC_MspInit+0x128>)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80013fc:	bf00      	nop
 80013fe:	37b0      	adds	r7, #176	@ 0xb0
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	50040000 	.word	0x50040000
 8001408:	40021000 	.word	0x40021000
 800140c:	48000800 	.word	0x48000800
 8001410:	20000254 	.word	0x20000254
 8001414:	40020008 	.word	0x40020008

08001418 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b0ac      	sub	sp, #176	@ 0xb0
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001420:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	605a      	str	r2, [r3, #4]
 800142a:	609a      	str	r2, [r3, #8]
 800142c:	60da      	str	r2, [r3, #12]
 800142e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001430:	f107 0314 	add.w	r3, r7, #20
 8001434:	2288      	movs	r2, #136	@ 0x88
 8001436:	2100      	movs	r1, #0
 8001438:	4618      	mov	r0, r3
 800143a:	f005 f830 	bl	800649e <memset>
  if(huart->Instance==USART2)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a21      	ldr	r2, [pc, #132]	@ (80014c8 <HAL_UART_MspInit+0xb0>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d13b      	bne.n	80014c0 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001448:	2302      	movs	r3, #2
 800144a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800144c:	2300      	movs	r3, #0
 800144e:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001450:	f107 0314 	add.w	r3, r7, #20
 8001454:	4618      	mov	r0, r3
 8001456:	f003 f843 	bl	80044e0 <HAL_RCCEx_PeriphCLKConfig>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001460:	f7ff ff18 	bl	8001294 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001464:	4b19      	ldr	r3, [pc, #100]	@ (80014cc <HAL_UART_MspInit+0xb4>)
 8001466:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001468:	4a18      	ldr	r2, [pc, #96]	@ (80014cc <HAL_UART_MspInit+0xb4>)
 800146a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800146e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001470:	4b16      	ldr	r3, [pc, #88]	@ (80014cc <HAL_UART_MspInit+0xb4>)
 8001472:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001474:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001478:	613b      	str	r3, [r7, #16]
 800147a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800147c:	4b13      	ldr	r3, [pc, #76]	@ (80014cc <HAL_UART_MspInit+0xb4>)
 800147e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001480:	4a12      	ldr	r2, [pc, #72]	@ (80014cc <HAL_UART_MspInit+0xb4>)
 8001482:	f043 0301 	orr.w	r3, r3, #1
 8001486:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001488:	4b10      	ldr	r3, [pc, #64]	@ (80014cc <HAL_UART_MspInit+0xb4>)
 800148a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800148c:	f003 0301 	and.w	r3, r3, #1
 8001490:	60fb      	str	r3, [r7, #12]
 8001492:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001494:	230c      	movs	r3, #12
 8001496:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149a:	2302      	movs	r3, #2
 800149c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a0:	2300      	movs	r3, #0
 80014a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a6:	2303      	movs	r3, #3
 80014a8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014ac:	2307      	movs	r3, #7
 80014ae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80014b6:	4619      	mov	r1, r3
 80014b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014bc:	f001 ffda 	bl	8003474 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80014c0:	bf00      	nop
 80014c2:	37b0      	adds	r7, #176	@ 0xb0
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	40004400 	.word	0x40004400
 80014cc:	40021000 	.word	0x40021000

080014d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014d4:	bf00      	nop
 80014d6:	e7fd      	b.n	80014d4 <NMI_Handler+0x4>

080014d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014dc:	bf00      	nop
 80014de:	e7fd      	b.n	80014dc <HardFault_Handler+0x4>

080014e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014e4:	bf00      	nop
 80014e6:	e7fd      	b.n	80014e4 <MemManage_Handler+0x4>

080014e8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ec:	bf00      	nop
 80014ee:	e7fd      	b.n	80014ec <BusFault_Handler+0x4>

080014f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014f4:	bf00      	nop
 80014f6:	e7fd      	b.n	80014f4 <UsageFault_Handler+0x4>

080014f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014fc:	bf00      	nop
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr

08001506 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001506:	b480      	push	{r7}
 8001508:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800150a:	bf00      	nop
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001518:	bf00      	nop
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr

08001522 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001526:	f000 f963 	bl	80017f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
	...

08001530 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001534:	4802      	ldr	r0, [pc, #8]	@ (8001540 <DMA1_Channel1_IRQHandler+0x10>)
 8001536:	f001 febd 	bl	80032b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	20000254 	.word	0x20000254

08001544 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  return 1;
 8001548:	2301      	movs	r3, #1
}
 800154a:	4618      	mov	r0, r3
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <_kill>:

int _kill(int pid, int sig)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800155e:	f004 fff1 	bl	8006544 <__errno>
 8001562:	4603      	mov	r3, r0
 8001564:	2216      	movs	r2, #22
 8001566:	601a      	str	r2, [r3, #0]
  return -1;
 8001568:	f04f 33ff 	mov.w	r3, #4294967295
}
 800156c:	4618      	mov	r0, r3
 800156e:	3708      	adds	r7, #8
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}

08001574 <_exit>:

void _exit (int status)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800157c:	f04f 31ff 	mov.w	r1, #4294967295
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f7ff ffe7 	bl	8001554 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001586:	bf00      	nop
 8001588:	e7fd      	b.n	8001586 <_exit+0x12>

0800158a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b086      	sub	sp, #24
 800158e:	af00      	add	r7, sp, #0
 8001590:	60f8      	str	r0, [r7, #12]
 8001592:	60b9      	str	r1, [r7, #8]
 8001594:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001596:	2300      	movs	r3, #0
 8001598:	617b      	str	r3, [r7, #20]
 800159a:	e00a      	b.n	80015b2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800159c:	f3af 8000 	nop.w
 80015a0:	4601      	mov	r1, r0
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	1c5a      	adds	r2, r3, #1
 80015a6:	60ba      	str	r2, [r7, #8]
 80015a8:	b2ca      	uxtb	r2, r1
 80015aa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	3301      	adds	r3, #1
 80015b0:	617b      	str	r3, [r7, #20]
 80015b2:	697a      	ldr	r2, [r7, #20]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	429a      	cmp	r2, r3
 80015b8:	dbf0      	blt.n	800159c <_read+0x12>
  }

  return len;
 80015ba:	687b      	ldr	r3, [r7, #4]
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3718      	adds	r7, #24
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b086      	sub	sp, #24
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	60f8      	str	r0, [r7, #12]
 80015cc:	60b9      	str	r1, [r7, #8]
 80015ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015d0:	2300      	movs	r3, #0
 80015d2:	617b      	str	r3, [r7, #20]
 80015d4:	e009      	b.n	80015ea <_write+0x26>
  {
    __io_putchar(*ptr++);
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	1c5a      	adds	r2, r3, #1
 80015da:	60ba      	str	r2, [r7, #8]
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	4618      	mov	r0, r3
 80015e0:	f7ff fc5a 	bl	8000e98 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	3301      	adds	r3, #1
 80015e8:	617b      	str	r3, [r7, #20]
 80015ea:	697a      	ldr	r2, [r7, #20]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	429a      	cmp	r2, r3
 80015f0:	dbf1      	blt.n	80015d6 <_write+0x12>
  }
  return len;
 80015f2:	687b      	ldr	r3, [r7, #4]
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3718      	adds	r7, #24
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}

080015fc <_close>:

int _close(int file)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001604:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001608:	4618      	mov	r0, r3
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001624:	605a      	str	r2, [r3, #4]
  return 0;
 8001626:	2300      	movs	r3, #0
}
 8001628:	4618      	mov	r0, r3
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <_isatty>:

int _isatty(int file)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800163c:	2301      	movs	r3, #1
}
 800163e:	4618      	mov	r0, r3
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr

0800164a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800164a:	b480      	push	{r7}
 800164c:	b085      	sub	sp, #20
 800164e:	af00      	add	r7, sp, #0
 8001650:	60f8      	str	r0, [r7, #12]
 8001652:	60b9      	str	r1, [r7, #8]
 8001654:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001656:	2300      	movs	r3, #0
}
 8001658:	4618      	mov	r0, r3
 800165a:	3714      	adds	r7, #20
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b086      	sub	sp, #24
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800166c:	4a14      	ldr	r2, [pc, #80]	@ (80016c0 <_sbrk+0x5c>)
 800166e:	4b15      	ldr	r3, [pc, #84]	@ (80016c4 <_sbrk+0x60>)
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001678:	4b13      	ldr	r3, [pc, #76]	@ (80016c8 <_sbrk+0x64>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d102      	bne.n	8001686 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001680:	4b11      	ldr	r3, [pc, #68]	@ (80016c8 <_sbrk+0x64>)
 8001682:	4a12      	ldr	r2, [pc, #72]	@ (80016cc <_sbrk+0x68>)
 8001684:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001686:	4b10      	ldr	r3, [pc, #64]	@ (80016c8 <_sbrk+0x64>)
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4413      	add	r3, r2
 800168e:	693a      	ldr	r2, [r7, #16]
 8001690:	429a      	cmp	r2, r3
 8001692:	d207      	bcs.n	80016a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001694:	f004 ff56 	bl	8006544 <__errno>
 8001698:	4603      	mov	r3, r0
 800169a:	220c      	movs	r2, #12
 800169c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800169e:	f04f 33ff 	mov.w	r3, #4294967295
 80016a2:	e009      	b.n	80016b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016a4:	4b08      	ldr	r3, [pc, #32]	@ (80016c8 <_sbrk+0x64>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016aa:	4b07      	ldr	r3, [pc, #28]	@ (80016c8 <_sbrk+0x64>)
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4413      	add	r3, r2
 80016b2:	4a05      	ldr	r2, [pc, #20]	@ (80016c8 <_sbrk+0x64>)
 80016b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016b6:	68fb      	ldr	r3, [r7, #12]
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3718      	adds	r7, #24
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	20018000 	.word	0x20018000
 80016c4:	00000400 	.word	0x00000400
 80016c8:	20000328 	.word	0x20000328
 80016cc:	20000480 	.word	0x20000480

080016d0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80016d4:	4b06      	ldr	r3, [pc, #24]	@ (80016f0 <SystemInit+0x20>)
 80016d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016da:	4a05      	ldr	r2, [pc, #20]	@ (80016f0 <SystemInit+0x20>)
 80016dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80016e4:	bf00      	nop
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	e000ed00 	.word	0xe000ed00

080016f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80016f4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800172c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016f8:	f7ff ffea 	bl	80016d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016fc:	480c      	ldr	r0, [pc, #48]	@ (8001730 <LoopForever+0x6>)
  ldr r1, =_edata
 80016fe:	490d      	ldr	r1, [pc, #52]	@ (8001734 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001700:	4a0d      	ldr	r2, [pc, #52]	@ (8001738 <LoopForever+0xe>)
  movs r3, #0
 8001702:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001704:	e002      	b.n	800170c <LoopCopyDataInit>

08001706 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001706:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001708:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800170a:	3304      	adds	r3, #4

0800170c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800170c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800170e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001710:	d3f9      	bcc.n	8001706 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001712:	4a0a      	ldr	r2, [pc, #40]	@ (800173c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001714:	4c0a      	ldr	r4, [pc, #40]	@ (8001740 <LoopForever+0x16>)
  movs r3, #0
 8001716:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001718:	e001      	b.n	800171e <LoopFillZerobss>

0800171a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800171a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800171c:	3204      	adds	r2, #4

0800171e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800171e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001720:	d3fb      	bcc.n	800171a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001722:	f004 ff15 	bl	8006550 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001726:	f7ff fbcf 	bl	8000ec8 <main>

0800172a <LoopForever>:

LoopForever:
    b LoopForever
 800172a:	e7fe      	b.n	800172a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800172c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001730:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001734:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001738:	080086f8 	.word	0x080086f8
  ldr r2, =_sbss
 800173c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001740:	2000047c 	.word	0x2000047c

08001744 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001744:	e7fe      	b.n	8001744 <ADC1_2_IRQHandler>

08001746 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b082      	sub	sp, #8
 800174a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800174c:	2300      	movs	r3, #0
 800174e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001750:	2003      	movs	r0, #3
 8001752:	f001 fc55 	bl	8003000 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001756:	200f      	movs	r0, #15
 8001758:	f000 f80e 	bl	8001778 <HAL_InitTick>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d002      	beq.n	8001768 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	71fb      	strb	r3, [r7, #7]
 8001766:	e001      	b.n	800176c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001768:	f7ff fd9a 	bl	80012a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800176c:	79fb      	ldrb	r3, [r7, #7]
}
 800176e:	4618      	mov	r0, r3
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
	...

08001778 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001780:	2300      	movs	r3, #0
 8001782:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001784:	4b17      	ldr	r3, [pc, #92]	@ (80017e4 <HAL_InitTick+0x6c>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d023      	beq.n	80017d4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800178c:	4b16      	ldr	r3, [pc, #88]	@ (80017e8 <HAL_InitTick+0x70>)
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	4b14      	ldr	r3, [pc, #80]	@ (80017e4 <HAL_InitTick+0x6c>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	4619      	mov	r1, r3
 8001796:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800179a:	fbb3 f3f1 	udiv	r3, r3, r1
 800179e:	fbb2 f3f3 	udiv	r3, r2, r3
 80017a2:	4618      	mov	r0, r3
 80017a4:	f001 fc61 	bl	800306a <HAL_SYSTICK_Config>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d10f      	bne.n	80017ce <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2b0f      	cmp	r3, #15
 80017b2:	d809      	bhi.n	80017c8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017b4:	2200      	movs	r2, #0
 80017b6:	6879      	ldr	r1, [r7, #4]
 80017b8:	f04f 30ff 	mov.w	r0, #4294967295
 80017bc:	f001 fc2b 	bl	8003016 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017c0:	4a0a      	ldr	r2, [pc, #40]	@ (80017ec <HAL_InitTick+0x74>)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6013      	str	r3, [r2, #0]
 80017c6:	e007      	b.n	80017d8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	73fb      	strb	r3, [r7, #15]
 80017cc:	e004      	b.n	80017d8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	73fb      	strb	r3, [r7, #15]
 80017d2:	e001      	b.n	80017d8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80017d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3710      	adds	r7, #16
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	20000008 	.word	0x20000008
 80017e8:	20000000 	.word	0x20000000
 80017ec:	20000004 	.word	0x20000004

080017f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017f4:	4b06      	ldr	r3, [pc, #24]	@ (8001810 <HAL_IncTick+0x20>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	461a      	mov	r2, r3
 80017fa:	4b06      	ldr	r3, [pc, #24]	@ (8001814 <HAL_IncTick+0x24>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4413      	add	r3, r2
 8001800:	4a04      	ldr	r2, [pc, #16]	@ (8001814 <HAL_IncTick+0x24>)
 8001802:	6013      	str	r3, [r2, #0]
}
 8001804:	bf00      	nop
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	20000008 	.word	0x20000008
 8001814:	2000032c 	.word	0x2000032c

08001818 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  return uwTick;
 800181c:	4b03      	ldr	r3, [pc, #12]	@ (800182c <HAL_GetTick+0x14>)
 800181e:	681b      	ldr	r3, [r3, #0]
}
 8001820:	4618      	mov	r0, r3
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	2000032c 	.word	0x2000032c

08001830 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001838:	f7ff ffee 	bl	8001818 <HAL_GetTick>
 800183c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001848:	d005      	beq.n	8001856 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800184a:	4b0a      	ldr	r3, [pc, #40]	@ (8001874 <HAL_Delay+0x44>)
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	461a      	mov	r2, r3
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	4413      	add	r3, r2
 8001854:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001856:	bf00      	nop
 8001858:	f7ff ffde 	bl	8001818 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	68fa      	ldr	r2, [r7, #12]
 8001864:	429a      	cmp	r2, r3
 8001866:	d8f7      	bhi.n	8001858 <HAL_Delay+0x28>
  {
  }
}
 8001868:	bf00      	nop
 800186a:	bf00      	nop
 800186c:	3710      	adds	r7, #16
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	20000008 	.word	0x20000008

08001878 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	431a      	orrs	r2, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	609a      	str	r2, [r3, #8]
}
 8001892:	bf00      	nop
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr

0800189e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800189e:	b480      	push	{r7}
 80018a0:	b083      	sub	sp, #12
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
 80018a6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	431a      	orrs	r2, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	609a      	str	r2, [r3, #8]
}
 80018b8:	bf00      	nop
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b087      	sub	sp, #28
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	60b9      	str	r1, [r7, #8]
 80018ea:	607a      	str	r2, [r7, #4]
 80018ec:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	3360      	adds	r3, #96	@ 0x60
 80018f2:	461a      	mov	r2, r3
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	4413      	add	r3, r2
 80018fa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	4b08      	ldr	r3, [pc, #32]	@ (8001924 <LL_ADC_SetOffset+0x44>)
 8001902:	4013      	ands	r3, r2
 8001904:	687a      	ldr	r2, [r7, #4]
 8001906:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800190a:	683a      	ldr	r2, [r7, #0]
 800190c:	430a      	orrs	r2, r1
 800190e:	4313      	orrs	r3, r2
 8001910:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001918:	bf00      	nop
 800191a:	371c      	adds	r7, #28
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	03fff000 	.word	0x03fff000

08001928 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001928:	b480      	push	{r7}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	3360      	adds	r3, #96	@ 0x60
 8001936:	461a      	mov	r2, r3
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	4413      	add	r3, r2
 800193e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001948:	4618      	mov	r0, r3
 800194a:	3714      	adds	r7, #20
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001954:	b480      	push	{r7}
 8001956:	b087      	sub	sp, #28
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	3360      	adds	r3, #96	@ 0x60
 8001964:	461a      	mov	r2, r3
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	4413      	add	r3, r2
 800196c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	431a      	orrs	r2, r3
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800197e:	bf00      	nop
 8001980:	371c      	adds	r7, #28
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr

0800198a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800198a:	b480      	push	{r7}
 800198c:	b083      	sub	sp, #12
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800199a:	2b00      	cmp	r3, #0
 800199c:	d101      	bne.n	80019a2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800199e:	2301      	movs	r3, #1
 80019a0:	e000      	b.n	80019a4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80019a2:	2300      	movs	r3, #0
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b087      	sub	sp, #28
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	3330      	adds	r3, #48	@ 0x30
 80019c0:	461a      	mov	r2, r3
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	0a1b      	lsrs	r3, r3, #8
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	f003 030c 	and.w	r3, r3, #12
 80019cc:	4413      	add	r3, r2
 80019ce:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	f003 031f 	and.w	r3, r3, #31
 80019da:	211f      	movs	r1, #31
 80019dc:	fa01 f303 	lsl.w	r3, r1, r3
 80019e0:	43db      	mvns	r3, r3
 80019e2:	401a      	ands	r2, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	0e9b      	lsrs	r3, r3, #26
 80019e8:	f003 011f 	and.w	r1, r3, #31
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	f003 031f 	and.w	r3, r3, #31
 80019f2:	fa01 f303 	lsl.w	r3, r1, r3
 80019f6:	431a      	orrs	r2, r3
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80019fc:	bf00      	nop
 80019fe:	371c      	adds	r7, #28
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b087      	sub	sp, #28
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	60b9      	str	r1, [r7, #8]
 8001a12:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	3314      	adds	r3, #20
 8001a18:	461a      	mov	r2, r3
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	0e5b      	lsrs	r3, r3, #25
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	f003 0304 	and.w	r3, r3, #4
 8001a24:	4413      	add	r3, r2
 8001a26:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	0d1b      	lsrs	r3, r3, #20
 8001a30:	f003 031f 	and.w	r3, r3, #31
 8001a34:	2107      	movs	r1, #7
 8001a36:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3a:	43db      	mvns	r3, r3
 8001a3c:	401a      	ands	r2, r3
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	0d1b      	lsrs	r3, r3, #20
 8001a42:	f003 031f 	and.w	r3, r3, #31
 8001a46:	6879      	ldr	r1, [r7, #4]
 8001a48:	fa01 f303 	lsl.w	r3, r1, r3
 8001a4c:	431a      	orrs	r2, r3
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001a52:	bf00      	nop
 8001a54:	371c      	adds	r7, #28
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
	...

08001a60 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b085      	sub	sp, #20
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a78:	43db      	mvns	r3, r3
 8001a7a:	401a      	ands	r2, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	f003 0318 	and.w	r3, r3, #24
 8001a82:	4908      	ldr	r1, [pc, #32]	@ (8001aa4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001a84:	40d9      	lsrs	r1, r3
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	400b      	ands	r3, r1
 8001a8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a8e:	431a      	orrs	r2, r3
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001a96:	bf00      	nop
 8001a98:	3714      	adds	r7, #20
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	0007ffff 	.word	0x0007ffff

08001aa8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	f003 031f 	and.w	r3, r3, #31
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001ad4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	6093      	str	r3, [r2, #8]
}
 8001adc:	bf00      	nop
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001af8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001afc:	d101      	bne.n	8001b02 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001afe:	2301      	movs	r3, #1
 8001b00:	e000      	b.n	8001b04 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001b02:	2300      	movs	r3, #0
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001b20:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b24:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001b2c:	bf00      	nop
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr

08001b38 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b48:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001b4c:	d101      	bne.n	8001b52 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e000      	b.n	8001b54 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001b52:	2300      	movs	r3, #0
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001b70:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b74:	f043 0201 	orr.w	r2, r3, #1
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001b7c:	bf00      	nop
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001b98:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b9c:	f043 0202 	orr.w	r2, r3, #2
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001ba4:	bf00      	nop
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	f003 0301 	and.w	r3, r3, #1
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d101      	bne.n	8001bc8 <LL_ADC_IsEnabled+0x18>
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e000      	b.n	8001bca <LL_ADC_IsEnabled+0x1a>
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr

08001bd6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	b083      	sub	sp, #12
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d101      	bne.n	8001bee <LL_ADC_IsDisableOngoing+0x18>
 8001bea:	2301      	movs	r3, #1
 8001bec:	e000      	b.n	8001bf0 <LL_ADC_IsDisableOngoing+0x1a>
 8001bee:	2300      	movs	r3, #0
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr

08001bfc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001c0c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c10:	f043 0204 	orr.w	r2, r3, #4
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001c18:	bf00      	nop
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	f003 0304 	and.w	r3, r3, #4
 8001c34:	2b04      	cmp	r3, #4
 8001c36:	d101      	bne.n	8001c3c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e000      	b.n	8001c3e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr

08001c4a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	b083      	sub	sp, #12
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f003 0308 	and.w	r3, r3, #8
 8001c5a:	2b08      	cmp	r3, #8
 8001c5c:	d101      	bne.n	8001c62 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e000      	b.n	8001c64 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001c62:	2300      	movs	r3, #0
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c70:	b590      	push	{r4, r7, lr}
 8001c72:	b089      	sub	sp, #36	@ 0x24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d101      	bne.n	8001c8a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e130      	b.n	8001eec <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	691b      	ldr	r3, [r3, #16]
 8001c8e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d109      	bne.n	8001cac <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f7ff fb25 	bl	80012e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff ff19 	bl	8001ae8 <LL_ADC_IsDeepPowerDownEnabled>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d004      	beq.n	8001cc6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff feff 	bl	8001ac4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7ff ff34 	bl	8001b38 <LL_ADC_IsInternalRegulatorEnabled>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d115      	bne.n	8001d02 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7ff ff18 	bl	8001b10 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ce0:	4b84      	ldr	r3, [pc, #528]	@ (8001ef4 <HAL_ADC_Init+0x284>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	099b      	lsrs	r3, r3, #6
 8001ce6:	4a84      	ldr	r2, [pc, #528]	@ (8001ef8 <HAL_ADC_Init+0x288>)
 8001ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8001cec:	099b      	lsrs	r3, r3, #6
 8001cee:	3301      	adds	r3, #1
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001cf4:	e002      	b.n	8001cfc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	3b01      	subs	r3, #1
 8001cfa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d1f9      	bne.n	8001cf6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7ff ff16 	bl	8001b38 <LL_ADC_IsInternalRegulatorEnabled>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d10d      	bne.n	8001d2e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d16:	f043 0210 	orr.w	r2, r3, #16
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d22:	f043 0201 	orr.w	r2, r3, #1
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7ff ff76 	bl	8001c24 <LL_ADC_REG_IsConversionOngoing>
 8001d38:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d3e:	f003 0310 	and.w	r3, r3, #16
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	f040 80c9 	bne.w	8001eda <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	f040 80c5 	bne.w	8001eda <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d54:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001d58:	f043 0202 	orr.w	r2, r3, #2
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7ff ff23 	bl	8001bb0 <LL_ADC_IsEnabled>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d115      	bne.n	8001d9c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d70:	4862      	ldr	r0, [pc, #392]	@ (8001efc <HAL_ADC_Init+0x28c>)
 8001d72:	f7ff ff1d 	bl	8001bb0 <LL_ADC_IsEnabled>
 8001d76:	4604      	mov	r4, r0
 8001d78:	4861      	ldr	r0, [pc, #388]	@ (8001f00 <HAL_ADC_Init+0x290>)
 8001d7a:	f7ff ff19 	bl	8001bb0 <LL_ADC_IsEnabled>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	431c      	orrs	r4, r3
 8001d82:	4860      	ldr	r0, [pc, #384]	@ (8001f04 <HAL_ADC_Init+0x294>)
 8001d84:	f7ff ff14 	bl	8001bb0 <LL_ADC_IsEnabled>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	4323      	orrs	r3, r4
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d105      	bne.n	8001d9c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	4619      	mov	r1, r3
 8001d96:	485c      	ldr	r0, [pc, #368]	@ (8001f08 <HAL_ADC_Init+0x298>)
 8001d98:	f7ff fd6e 	bl	8001878 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	7e5b      	ldrb	r3, [r3, #25]
 8001da0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001da6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001dac:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001db2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dba:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d106      	bne.n	8001dd8 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	045b      	lsls	r3, r3, #17
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d009      	beq.n	8001df4 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001de4:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dec:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001dee:	69ba      	ldr	r2, [r7, #24]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	68da      	ldr	r2, [r3, #12]
 8001dfa:	4b44      	ldr	r3, [pc, #272]	@ (8001f0c <HAL_ADC_Init+0x29c>)
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	6812      	ldr	r2, [r2, #0]
 8001e02:	69b9      	ldr	r1, [r7, #24]
 8001e04:	430b      	orrs	r3, r1
 8001e06:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff ff1c 	bl	8001c4a <LL_ADC_INJ_IsConversionOngoing>
 8001e12:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d13d      	bne.n	8001e96 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d13a      	bne.n	8001e96 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e24:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001e2c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001e3c:	f023 0302 	bic.w	r3, r3, #2
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	6812      	ldr	r2, [r2, #0]
 8001e44:	69b9      	ldr	r1, [r7, #24]
 8001e46:	430b      	orrs	r3, r1
 8001e48:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d118      	bne.n	8001e86 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	691b      	ldr	r3, [r3, #16]
 8001e5a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001e5e:	f023 0304 	bic.w	r3, r3, #4
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001e6a:	4311      	orrs	r1, r2
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001e70:	4311      	orrs	r1, r2
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001e76:	430a      	orrs	r2, r1
 8001e78:	431a      	orrs	r2, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f042 0201 	orr.w	r2, r2, #1
 8001e82:	611a      	str	r2, [r3, #16]
 8001e84:	e007      	b.n	8001e96 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	691a      	ldr	r2, [r3, #16]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f022 0201 	bic.w	r2, r2, #1
 8001e94:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	691b      	ldr	r3, [r3, #16]
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d10c      	bne.n	8001eb8 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea4:	f023 010f 	bic.w	r1, r3, #15
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	69db      	ldr	r3, [r3, #28]
 8001eac:	1e5a      	subs	r2, r3, #1
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	430a      	orrs	r2, r1
 8001eb4:	631a      	str	r2, [r3, #48]	@ 0x30
 8001eb6:	e007      	b.n	8001ec8 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f022 020f 	bic.w	r2, r2, #15
 8001ec6:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ecc:	f023 0303 	bic.w	r3, r3, #3
 8001ed0:	f043 0201 	orr.w	r2, r3, #1
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	655a      	str	r2, [r3, #84]	@ 0x54
 8001ed8:	e007      	b.n	8001eea <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ede:	f043 0210 	orr.w	r2, r3, #16
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001eea:	7ffb      	ldrb	r3, [r7, #31]
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3724      	adds	r7, #36	@ 0x24
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd90      	pop	{r4, r7, pc}
 8001ef4:	20000000 	.word	0x20000000
 8001ef8:	053e2d63 	.word	0x053e2d63
 8001efc:	50040000 	.word	0x50040000
 8001f00:	50040100 	.word	0x50040100
 8001f04:	50040200 	.word	0x50040200
 8001f08:	50040300 	.word	0x50040300
 8001f0c:	fff0c007 	.word	0xfff0c007

08001f10 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b086      	sub	sp, #24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f1c:	4853      	ldr	r0, [pc, #332]	@ (800206c <HAL_ADC_Start_DMA+0x15c>)
 8001f1e:	f7ff fdc3 	bl	8001aa8 <LL_ADC_GetMultimode>
 8001f22:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7ff fe7b 	bl	8001c24 <LL_ADC_REG_IsConversionOngoing>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	f040 8093 	bne.w	800205c <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d101      	bne.n	8001f44 <HAL_ADC_Start_DMA+0x34>
 8001f40:	2302      	movs	r3, #2
 8001f42:	e08e      	b.n	8002062 <HAL_ADC_Start_DMA+0x152>
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2201      	movs	r2, #1
 8001f48:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a47      	ldr	r2, [pc, #284]	@ (8002070 <HAL_ADC_Start_DMA+0x160>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d008      	beq.n	8001f68 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d005      	beq.n	8001f68 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	2b05      	cmp	r3, #5
 8001f60:	d002      	beq.n	8001f68 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	2b09      	cmp	r3, #9
 8001f66:	d172      	bne.n	800204e <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001f68:	68f8      	ldr	r0, [r7, #12]
 8001f6a:	f000 fc9d 	bl	80028a8 <ADC_Enable>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001f72:	7dfb      	ldrb	r3, [r7, #23]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d165      	bne.n	8002044 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f7c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001f80:	f023 0301 	bic.w	r3, r3, #1
 8001f84:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a38      	ldr	r2, [pc, #224]	@ (8002074 <HAL_ADC_Start_DMA+0x164>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d002      	beq.n	8001f9c <HAL_ADC_Start_DMA+0x8c>
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	e000      	b.n	8001f9e <HAL_ADC_Start_DMA+0x8e>
 8001f9c:	4b36      	ldr	r3, [pc, #216]	@ (8002078 <HAL_ADC_Start_DMA+0x168>)
 8001f9e:	68fa      	ldr	r2, [r7, #12]
 8001fa0:	6812      	ldr	r2, [r2, #0]
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d002      	beq.n	8001fac <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d105      	bne.n	8001fb8 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fb0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	655a      	str	r2, [r3, #84]	@ 0x54
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fbc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d006      	beq.n	8001fd2 <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fc8:	f023 0206 	bic.w	r2, r3, #6
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	659a      	str	r2, [r3, #88]	@ 0x58
 8001fd0:	e002      	b.n	8001fd8 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fdc:	4a27      	ldr	r2, [pc, #156]	@ (800207c <HAL_ADC_Start_DMA+0x16c>)
 8001fde:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fe4:	4a26      	ldr	r2, [pc, #152]	@ (8002080 <HAL_ADC_Start_DMA+0x170>)
 8001fe6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fec:	4a25      	ldr	r2, [pc, #148]	@ (8002084 <HAL_ADC_Start_DMA+0x174>)
 8001fee:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	221c      	movs	r2, #28
 8001ff6:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	685a      	ldr	r2, [r3, #4]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f042 0210 	orr.w	r2, r2, #16
 800200e:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	68da      	ldr	r2, [r3, #12]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f042 0201 	orr.w	r2, r2, #1
 800201e:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	3340      	adds	r3, #64	@ 0x40
 800202a:	4619      	mov	r1, r3
 800202c:	68ba      	ldr	r2, [r7, #8]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	f001 f8e0 	bl	80031f4 <HAL_DMA_Start_IT>
 8002034:	4603      	mov	r3, r0
 8002036:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4618      	mov	r0, r3
 800203e:	f7ff fddd 	bl	8001bfc <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002042:	e00d      	b.n	8002060 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2200      	movs	r2, #0
 8002048:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 800204c:	e008      	b.n	8002060 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2200      	movs	r2, #0
 8002056:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800205a:	e001      	b.n	8002060 <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800205c:	2302      	movs	r3, #2
 800205e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002060:	7dfb      	ldrb	r3, [r7, #23]
}
 8002062:	4618      	mov	r0, r3
 8002064:	3718      	adds	r7, #24
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	50040300 	.word	0x50040300
 8002070:	50040200 	.word	0x50040200
 8002074:	50040100 	.word	0x50040100
 8002078:	50040000 	.word	0x50040000
 800207c:	08002a73 	.word	0x08002a73
 8002080:	08002b4b 	.word	0x08002b4b
 8002084:	08002b67 	.word	0x08002b67

08002088 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002090:	bf00      	nop
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80020a4:	bf00      	nop
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80020b8:	bf00      	nop
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b0b6      	sub	sp, #216	@ 0xd8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020ce:	2300      	movs	r3, #0
 80020d0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80020d4:	2300      	movs	r3, #0
 80020d6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d101      	bne.n	80020e6 <HAL_ADC_ConfigChannel+0x22>
 80020e2:	2302      	movs	r3, #2
 80020e4:	e3c9      	b.n	800287a <HAL_ADC_ConfigChannel+0x7b6>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2201      	movs	r2, #1
 80020ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7ff fd96 	bl	8001c24 <LL_ADC_REG_IsConversionOngoing>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	f040 83aa 	bne.w	8002854 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	2b05      	cmp	r3, #5
 800210e:	d824      	bhi.n	800215a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	3b02      	subs	r3, #2
 8002116:	2b03      	cmp	r3, #3
 8002118:	d81b      	bhi.n	8002152 <HAL_ADC_ConfigChannel+0x8e>
 800211a:	a201      	add	r2, pc, #4	@ (adr r2, 8002120 <HAL_ADC_ConfigChannel+0x5c>)
 800211c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002120:	08002131 	.word	0x08002131
 8002124:	08002139 	.word	0x08002139
 8002128:	08002141 	.word	0x08002141
 800212c:	08002149 	.word	0x08002149
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002130:	230c      	movs	r3, #12
 8002132:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002136:	e010      	b.n	800215a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002138:	2312      	movs	r3, #18
 800213a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800213e:	e00c      	b.n	800215a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002140:	2318      	movs	r3, #24
 8002142:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002146:	e008      	b.n	800215a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002148:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800214c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002150:	e003      	b.n	800215a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002152:	2306      	movs	r3, #6
 8002154:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002158:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6818      	ldr	r0, [r3, #0]
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	461a      	mov	r2, r3
 8002164:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002168:	f7ff fc22 	bl	80019b0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4618      	mov	r0, r3
 8002172:	f7ff fd57 	bl	8001c24 <LL_ADC_REG_IsConversionOngoing>
 8002176:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4618      	mov	r0, r3
 8002180:	f7ff fd63 	bl	8001c4a <LL_ADC_INJ_IsConversionOngoing>
 8002184:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002188:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800218c:	2b00      	cmp	r3, #0
 800218e:	f040 81a4 	bne.w	80024da <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002192:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002196:	2b00      	cmp	r3, #0
 8002198:	f040 819f 	bne.w	80024da <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6818      	ldr	r0, [r3, #0]
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	6819      	ldr	r1, [r3, #0]
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	461a      	mov	r2, r3
 80021aa:	f7ff fc2d 	bl	8001a08 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	695a      	ldr	r2, [r3, #20]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	08db      	lsrs	r3, r3, #3
 80021ba:	f003 0303 	and.w	r3, r3, #3
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	691b      	ldr	r3, [r3, #16]
 80021cc:	2b04      	cmp	r3, #4
 80021ce:	d00a      	beq.n	80021e6 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6818      	ldr	r0, [r3, #0]
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	6919      	ldr	r1, [r3, #16]
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80021e0:	f7ff fb7e 	bl	80018e0 <LL_ADC_SetOffset>
 80021e4:	e179      	b.n	80024da <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2100      	movs	r1, #0
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7ff fb9b 	bl	8001928 <LL_ADC_GetOffsetChannel>
 80021f2:	4603      	mov	r3, r0
 80021f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d10a      	bne.n	8002212 <HAL_ADC_ConfigChannel+0x14e>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2100      	movs	r1, #0
 8002202:	4618      	mov	r0, r3
 8002204:	f7ff fb90 	bl	8001928 <LL_ADC_GetOffsetChannel>
 8002208:	4603      	mov	r3, r0
 800220a:	0e9b      	lsrs	r3, r3, #26
 800220c:	f003 021f 	and.w	r2, r3, #31
 8002210:	e01e      	b.n	8002250 <HAL_ADC_ConfigChannel+0x18c>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2100      	movs	r1, #0
 8002218:	4618      	mov	r0, r3
 800221a:	f7ff fb85 	bl	8001928 <LL_ADC_GetOffsetChannel>
 800221e:	4603      	mov	r3, r0
 8002220:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002224:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002228:	fa93 f3a3 	rbit	r3, r3
 800222c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002230:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002234:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002238:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800223c:	2b00      	cmp	r3, #0
 800223e:	d101      	bne.n	8002244 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002240:	2320      	movs	r3, #32
 8002242:	e004      	b.n	800224e <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002244:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002248:	fab3 f383 	clz	r3, r3
 800224c:	b2db      	uxtb	r3, r3
 800224e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002258:	2b00      	cmp	r3, #0
 800225a:	d105      	bne.n	8002268 <HAL_ADC_ConfigChannel+0x1a4>
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	0e9b      	lsrs	r3, r3, #26
 8002262:	f003 031f 	and.w	r3, r3, #31
 8002266:	e018      	b.n	800229a <HAL_ADC_ConfigChannel+0x1d6>
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002270:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002274:	fa93 f3a3 	rbit	r3, r3
 8002278:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800227c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002280:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002284:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d101      	bne.n	8002290 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 800228c:	2320      	movs	r3, #32
 800228e:	e004      	b.n	800229a <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002290:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002294:	fab3 f383 	clz	r3, r3
 8002298:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800229a:	429a      	cmp	r2, r3
 800229c:	d106      	bne.n	80022ac <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	2200      	movs	r2, #0
 80022a4:	2100      	movs	r1, #0
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7ff fb54 	bl	8001954 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2101      	movs	r1, #1
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7ff fb38 	bl	8001928 <LL_ADC_GetOffsetChannel>
 80022b8:	4603      	mov	r3, r0
 80022ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d10a      	bne.n	80022d8 <HAL_ADC_ConfigChannel+0x214>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2101      	movs	r1, #1
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7ff fb2d 	bl	8001928 <LL_ADC_GetOffsetChannel>
 80022ce:	4603      	mov	r3, r0
 80022d0:	0e9b      	lsrs	r3, r3, #26
 80022d2:	f003 021f 	and.w	r2, r3, #31
 80022d6:	e01e      	b.n	8002316 <HAL_ADC_ConfigChannel+0x252>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2101      	movs	r1, #1
 80022de:	4618      	mov	r0, r3
 80022e0:	f7ff fb22 	bl	8001928 <LL_ADC_GetOffsetChannel>
 80022e4:	4603      	mov	r3, r0
 80022e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80022ee:	fa93 f3a3 	rbit	r3, r3
 80022f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80022f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80022fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80022fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002302:	2b00      	cmp	r3, #0
 8002304:	d101      	bne.n	800230a <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002306:	2320      	movs	r3, #32
 8002308:	e004      	b.n	8002314 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800230a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800230e:	fab3 f383 	clz	r3, r3
 8002312:	b2db      	uxtb	r3, r3
 8002314:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800231e:	2b00      	cmp	r3, #0
 8002320:	d105      	bne.n	800232e <HAL_ADC_ConfigChannel+0x26a>
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	0e9b      	lsrs	r3, r3, #26
 8002328:	f003 031f 	and.w	r3, r3, #31
 800232c:	e018      	b.n	8002360 <HAL_ADC_ConfigChannel+0x29c>
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002336:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800233a:	fa93 f3a3 	rbit	r3, r3
 800233e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002342:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002346:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800234a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800234e:	2b00      	cmp	r3, #0
 8002350:	d101      	bne.n	8002356 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002352:	2320      	movs	r3, #32
 8002354:	e004      	b.n	8002360 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002356:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800235a:	fab3 f383 	clz	r3, r3
 800235e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002360:	429a      	cmp	r2, r3
 8002362:	d106      	bne.n	8002372 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2200      	movs	r2, #0
 800236a:	2101      	movs	r1, #1
 800236c:	4618      	mov	r0, r3
 800236e:	f7ff faf1 	bl	8001954 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2102      	movs	r1, #2
 8002378:	4618      	mov	r0, r3
 800237a:	f7ff fad5 	bl	8001928 <LL_ADC_GetOffsetChannel>
 800237e:	4603      	mov	r3, r0
 8002380:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002384:	2b00      	cmp	r3, #0
 8002386:	d10a      	bne.n	800239e <HAL_ADC_ConfigChannel+0x2da>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2102      	movs	r1, #2
 800238e:	4618      	mov	r0, r3
 8002390:	f7ff faca 	bl	8001928 <LL_ADC_GetOffsetChannel>
 8002394:	4603      	mov	r3, r0
 8002396:	0e9b      	lsrs	r3, r3, #26
 8002398:	f003 021f 	and.w	r2, r3, #31
 800239c:	e01e      	b.n	80023dc <HAL_ADC_ConfigChannel+0x318>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2102      	movs	r1, #2
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7ff fabf 	bl	8001928 <LL_ADC_GetOffsetChannel>
 80023aa:	4603      	mov	r3, r0
 80023ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80023b4:	fa93 f3a3 	rbit	r3, r3
 80023b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80023bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80023c0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80023c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d101      	bne.n	80023d0 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80023cc:	2320      	movs	r3, #32
 80023ce:	e004      	b.n	80023da <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80023d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80023d4:	fab3 f383 	clz	r3, r3
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d105      	bne.n	80023f4 <HAL_ADC_ConfigChannel+0x330>
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	0e9b      	lsrs	r3, r3, #26
 80023ee:	f003 031f 	and.w	r3, r3, #31
 80023f2:	e014      	b.n	800241e <HAL_ADC_ConfigChannel+0x35a>
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023fa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80023fc:	fa93 f3a3 	rbit	r3, r3
 8002400:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002402:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002404:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002408:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800240c:	2b00      	cmp	r3, #0
 800240e:	d101      	bne.n	8002414 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002410:	2320      	movs	r3, #32
 8002412:	e004      	b.n	800241e <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002414:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002418:	fab3 f383 	clz	r3, r3
 800241c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800241e:	429a      	cmp	r2, r3
 8002420:	d106      	bne.n	8002430 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2200      	movs	r2, #0
 8002428:	2102      	movs	r1, #2
 800242a:	4618      	mov	r0, r3
 800242c:	f7ff fa92 	bl	8001954 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2103      	movs	r1, #3
 8002436:	4618      	mov	r0, r3
 8002438:	f7ff fa76 	bl	8001928 <LL_ADC_GetOffsetChannel>
 800243c:	4603      	mov	r3, r0
 800243e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002442:	2b00      	cmp	r3, #0
 8002444:	d10a      	bne.n	800245c <HAL_ADC_ConfigChannel+0x398>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	2103      	movs	r1, #3
 800244c:	4618      	mov	r0, r3
 800244e:	f7ff fa6b 	bl	8001928 <LL_ADC_GetOffsetChannel>
 8002452:	4603      	mov	r3, r0
 8002454:	0e9b      	lsrs	r3, r3, #26
 8002456:	f003 021f 	and.w	r2, r3, #31
 800245a:	e017      	b.n	800248c <HAL_ADC_ConfigChannel+0x3c8>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2103      	movs	r1, #3
 8002462:	4618      	mov	r0, r3
 8002464:	f7ff fa60 	bl	8001928 <LL_ADC_GetOffsetChannel>
 8002468:	4603      	mov	r3, r0
 800246a:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800246c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800246e:	fa93 f3a3 	rbit	r3, r3
 8002472:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002474:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002476:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002478:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800247a:	2b00      	cmp	r3, #0
 800247c:	d101      	bne.n	8002482 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800247e:	2320      	movs	r3, #32
 8002480:	e003      	b.n	800248a <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002482:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002484:	fab3 f383 	clz	r3, r3
 8002488:	b2db      	uxtb	r3, r3
 800248a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002494:	2b00      	cmp	r3, #0
 8002496:	d105      	bne.n	80024a4 <HAL_ADC_ConfigChannel+0x3e0>
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	0e9b      	lsrs	r3, r3, #26
 800249e:	f003 031f 	and.w	r3, r3, #31
 80024a2:	e011      	b.n	80024c8 <HAL_ADC_ConfigChannel+0x404>
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80024ac:	fa93 f3a3 	rbit	r3, r3
 80024b0:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80024b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80024b4:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80024b6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d101      	bne.n	80024c0 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80024bc:	2320      	movs	r3, #32
 80024be:	e003      	b.n	80024c8 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80024c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80024c2:	fab3 f383 	clz	r3, r3
 80024c6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d106      	bne.n	80024da <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2200      	movs	r2, #0
 80024d2:	2103      	movs	r1, #3
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7ff fa3d 	bl	8001954 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4618      	mov	r0, r3
 80024e0:	f7ff fb66 	bl	8001bb0 <LL_ADC_IsEnabled>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	f040 8140 	bne.w	800276c <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6818      	ldr	r0, [r3, #0]
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	6819      	ldr	r1, [r3, #0]
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	461a      	mov	r2, r3
 80024fa:	f7ff fab1 	bl	8001a60 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	4a8f      	ldr	r2, [pc, #572]	@ (8002740 <HAL_ADC_ConfigChannel+0x67c>)
 8002504:	4293      	cmp	r3, r2
 8002506:	f040 8131 	bne.w	800276c <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002516:	2b00      	cmp	r3, #0
 8002518:	d10b      	bne.n	8002532 <HAL_ADC_ConfigChannel+0x46e>
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	0e9b      	lsrs	r3, r3, #26
 8002520:	3301      	adds	r3, #1
 8002522:	f003 031f 	and.w	r3, r3, #31
 8002526:	2b09      	cmp	r3, #9
 8002528:	bf94      	ite	ls
 800252a:	2301      	movls	r3, #1
 800252c:	2300      	movhi	r3, #0
 800252e:	b2db      	uxtb	r3, r3
 8002530:	e019      	b.n	8002566 <HAL_ADC_ConfigChannel+0x4a2>
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002538:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800253a:	fa93 f3a3 	rbit	r3, r3
 800253e:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002540:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002542:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002544:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002546:	2b00      	cmp	r3, #0
 8002548:	d101      	bne.n	800254e <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800254a:	2320      	movs	r3, #32
 800254c:	e003      	b.n	8002556 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800254e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002550:	fab3 f383 	clz	r3, r3
 8002554:	b2db      	uxtb	r3, r3
 8002556:	3301      	adds	r3, #1
 8002558:	f003 031f 	and.w	r3, r3, #31
 800255c:	2b09      	cmp	r3, #9
 800255e:	bf94      	ite	ls
 8002560:	2301      	movls	r3, #1
 8002562:	2300      	movhi	r3, #0
 8002564:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002566:	2b00      	cmp	r3, #0
 8002568:	d079      	beq.n	800265e <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002572:	2b00      	cmp	r3, #0
 8002574:	d107      	bne.n	8002586 <HAL_ADC_ConfigChannel+0x4c2>
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	0e9b      	lsrs	r3, r3, #26
 800257c:	3301      	adds	r3, #1
 800257e:	069b      	lsls	r3, r3, #26
 8002580:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002584:	e015      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x4ee>
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800258c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800258e:	fa93 f3a3 	rbit	r3, r3
 8002592:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002594:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002596:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002598:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800259a:	2b00      	cmp	r3, #0
 800259c:	d101      	bne.n	80025a2 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800259e:	2320      	movs	r3, #32
 80025a0:	e003      	b.n	80025aa <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80025a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80025a4:	fab3 f383 	clz	r3, r3
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	3301      	adds	r3, #1
 80025ac:	069b      	lsls	r3, r3, #26
 80025ae:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d109      	bne.n	80025d2 <HAL_ADC_ConfigChannel+0x50e>
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	0e9b      	lsrs	r3, r3, #26
 80025c4:	3301      	adds	r3, #1
 80025c6:	f003 031f 	and.w	r3, r3, #31
 80025ca:	2101      	movs	r1, #1
 80025cc:	fa01 f303 	lsl.w	r3, r1, r3
 80025d0:	e017      	b.n	8002602 <HAL_ADC_ConfigChannel+0x53e>
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80025da:	fa93 f3a3 	rbit	r3, r3
 80025de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80025e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025e2:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80025e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d101      	bne.n	80025ee <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80025ea:	2320      	movs	r3, #32
 80025ec:	e003      	b.n	80025f6 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80025ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80025f0:	fab3 f383 	clz	r3, r3
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	3301      	adds	r3, #1
 80025f8:	f003 031f 	and.w	r3, r3, #31
 80025fc:	2101      	movs	r1, #1
 80025fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002602:	ea42 0103 	orr.w	r1, r2, r3
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800260e:	2b00      	cmp	r3, #0
 8002610:	d10a      	bne.n	8002628 <HAL_ADC_ConfigChannel+0x564>
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	0e9b      	lsrs	r3, r3, #26
 8002618:	3301      	adds	r3, #1
 800261a:	f003 021f 	and.w	r2, r3, #31
 800261e:	4613      	mov	r3, r2
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	4413      	add	r3, r2
 8002624:	051b      	lsls	r3, r3, #20
 8002626:	e018      	b.n	800265a <HAL_ADC_ConfigChannel+0x596>
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800262e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002630:	fa93 f3a3 	rbit	r3, r3
 8002634:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002638:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800263a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800263c:	2b00      	cmp	r3, #0
 800263e:	d101      	bne.n	8002644 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002640:	2320      	movs	r3, #32
 8002642:	e003      	b.n	800264c <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002646:	fab3 f383 	clz	r3, r3
 800264a:	b2db      	uxtb	r3, r3
 800264c:	3301      	adds	r3, #1
 800264e:	f003 021f 	and.w	r2, r3, #31
 8002652:	4613      	mov	r3, r2
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	4413      	add	r3, r2
 8002658:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800265a:	430b      	orrs	r3, r1
 800265c:	e081      	b.n	8002762 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002666:	2b00      	cmp	r3, #0
 8002668:	d107      	bne.n	800267a <HAL_ADC_ConfigChannel+0x5b6>
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	0e9b      	lsrs	r3, r3, #26
 8002670:	3301      	adds	r3, #1
 8002672:	069b      	lsls	r3, r3, #26
 8002674:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002678:	e015      	b.n	80026a6 <HAL_ADC_ConfigChannel+0x5e2>
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002682:	fa93 f3a3 	rbit	r3, r3
 8002686:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800268a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800268c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800268e:	2b00      	cmp	r3, #0
 8002690:	d101      	bne.n	8002696 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002692:	2320      	movs	r3, #32
 8002694:	e003      	b.n	800269e <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002696:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002698:	fab3 f383 	clz	r3, r3
 800269c:	b2db      	uxtb	r3, r3
 800269e:	3301      	adds	r3, #1
 80026a0:	069b      	lsls	r3, r3, #26
 80026a2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d109      	bne.n	80026c6 <HAL_ADC_ConfigChannel+0x602>
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	0e9b      	lsrs	r3, r3, #26
 80026b8:	3301      	adds	r3, #1
 80026ba:	f003 031f 	and.w	r3, r3, #31
 80026be:	2101      	movs	r1, #1
 80026c0:	fa01 f303 	lsl.w	r3, r1, r3
 80026c4:	e017      	b.n	80026f6 <HAL_ADC_ConfigChannel+0x632>
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	fa93 f3a3 	rbit	r3, r3
 80026d2:	61bb      	str	r3, [r7, #24]
  return result;
 80026d4:	69bb      	ldr	r3, [r7, #24]
 80026d6:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80026d8:	6a3b      	ldr	r3, [r7, #32]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d101      	bne.n	80026e2 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80026de:	2320      	movs	r3, #32
 80026e0:	e003      	b.n	80026ea <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80026e2:	6a3b      	ldr	r3, [r7, #32]
 80026e4:	fab3 f383 	clz	r3, r3
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	3301      	adds	r3, #1
 80026ec:	f003 031f 	and.w	r3, r3, #31
 80026f0:	2101      	movs	r1, #1
 80026f2:	fa01 f303 	lsl.w	r3, r1, r3
 80026f6:	ea42 0103 	orr.w	r1, r2, r3
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002702:	2b00      	cmp	r3, #0
 8002704:	d10d      	bne.n	8002722 <HAL_ADC_ConfigChannel+0x65e>
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	0e9b      	lsrs	r3, r3, #26
 800270c:	3301      	adds	r3, #1
 800270e:	f003 021f 	and.w	r2, r3, #31
 8002712:	4613      	mov	r3, r2
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	4413      	add	r3, r2
 8002718:	3b1e      	subs	r3, #30
 800271a:	051b      	lsls	r3, r3, #20
 800271c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002720:	e01e      	b.n	8002760 <HAL_ADC_ConfigChannel+0x69c>
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	fa93 f3a3 	rbit	r3, r3
 800272e:	60fb      	str	r3, [r7, #12]
  return result;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d104      	bne.n	8002744 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800273a:	2320      	movs	r3, #32
 800273c:	e006      	b.n	800274c <HAL_ADC_ConfigChannel+0x688>
 800273e:	bf00      	nop
 8002740:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	fab3 f383 	clz	r3, r3
 800274a:	b2db      	uxtb	r3, r3
 800274c:	3301      	adds	r3, #1
 800274e:	f003 021f 	and.w	r2, r3, #31
 8002752:	4613      	mov	r3, r2
 8002754:	005b      	lsls	r3, r3, #1
 8002756:	4413      	add	r3, r2
 8002758:	3b1e      	subs	r3, #30
 800275a:	051b      	lsls	r3, r3, #20
 800275c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002760:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002762:	683a      	ldr	r2, [r7, #0]
 8002764:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002766:	4619      	mov	r1, r3
 8002768:	f7ff f94e 	bl	8001a08 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	4b44      	ldr	r3, [pc, #272]	@ (8002884 <HAL_ADC_ConfigChannel+0x7c0>)
 8002772:	4013      	ands	r3, r2
 8002774:	2b00      	cmp	r3, #0
 8002776:	d07a      	beq.n	800286e <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002778:	4843      	ldr	r0, [pc, #268]	@ (8002888 <HAL_ADC_ConfigChannel+0x7c4>)
 800277a:	f7ff f8a3 	bl	80018c4 <LL_ADC_GetCommonPathInternalCh>
 800277e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a41      	ldr	r2, [pc, #260]	@ (800288c <HAL_ADC_ConfigChannel+0x7c8>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d12c      	bne.n	80027e6 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800278c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002790:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d126      	bne.n	80027e6 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a3c      	ldr	r2, [pc, #240]	@ (8002890 <HAL_ADC_ConfigChannel+0x7cc>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d004      	beq.n	80027ac <HAL_ADC_ConfigChannel+0x6e8>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a3b      	ldr	r2, [pc, #236]	@ (8002894 <HAL_ADC_ConfigChannel+0x7d0>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d15d      	bne.n	8002868 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80027b0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80027b4:	4619      	mov	r1, r3
 80027b6:	4834      	ldr	r0, [pc, #208]	@ (8002888 <HAL_ADC_ConfigChannel+0x7c4>)
 80027b8:	f7ff f871 	bl	800189e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027bc:	4b36      	ldr	r3, [pc, #216]	@ (8002898 <HAL_ADC_ConfigChannel+0x7d4>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	099b      	lsrs	r3, r3, #6
 80027c2:	4a36      	ldr	r2, [pc, #216]	@ (800289c <HAL_ADC_ConfigChannel+0x7d8>)
 80027c4:	fba2 2303 	umull	r2, r3, r2, r3
 80027c8:	099b      	lsrs	r3, r3, #6
 80027ca:	1c5a      	adds	r2, r3, #1
 80027cc:	4613      	mov	r3, r2
 80027ce:	005b      	lsls	r3, r3, #1
 80027d0:	4413      	add	r3, r2
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80027d6:	e002      	b.n	80027de <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	3b01      	subs	r3, #1
 80027dc:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d1f9      	bne.n	80027d8 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027e4:	e040      	b.n	8002868 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a2d      	ldr	r2, [pc, #180]	@ (80028a0 <HAL_ADC_ConfigChannel+0x7dc>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d118      	bne.n	8002822 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80027f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80027f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d112      	bne.n	8002822 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a23      	ldr	r2, [pc, #140]	@ (8002890 <HAL_ADC_ConfigChannel+0x7cc>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d004      	beq.n	8002810 <HAL_ADC_ConfigChannel+0x74c>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a22      	ldr	r2, [pc, #136]	@ (8002894 <HAL_ADC_ConfigChannel+0x7d0>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d12d      	bne.n	800286c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002810:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002814:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002818:	4619      	mov	r1, r3
 800281a:	481b      	ldr	r0, [pc, #108]	@ (8002888 <HAL_ADC_ConfigChannel+0x7c4>)
 800281c:	f7ff f83f 	bl	800189e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002820:	e024      	b.n	800286c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a1f      	ldr	r2, [pc, #124]	@ (80028a4 <HAL_ADC_ConfigChannel+0x7e0>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d120      	bne.n	800286e <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800282c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002830:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d11a      	bne.n	800286e <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a14      	ldr	r2, [pc, #80]	@ (8002890 <HAL_ADC_ConfigChannel+0x7cc>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d115      	bne.n	800286e <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002842:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002846:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800284a:	4619      	mov	r1, r3
 800284c:	480e      	ldr	r0, [pc, #56]	@ (8002888 <HAL_ADC_ConfigChannel+0x7c4>)
 800284e:	f7ff f826 	bl	800189e <LL_ADC_SetCommonPathInternalCh>
 8002852:	e00c      	b.n	800286e <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002858:	f043 0220 	orr.w	r2, r3, #32
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002866:	e002      	b.n	800286e <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002868:	bf00      	nop
 800286a:	e000      	b.n	800286e <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800286c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002876:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800287a:	4618      	mov	r0, r3
 800287c:	37d8      	adds	r7, #216	@ 0xd8
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	80080000 	.word	0x80080000
 8002888:	50040300 	.word	0x50040300
 800288c:	c7520000 	.word	0xc7520000
 8002890:	50040000 	.word	0x50040000
 8002894:	50040200 	.word	0x50040200
 8002898:	20000000 	.word	0x20000000
 800289c:	053e2d63 	.word	0x053e2d63
 80028a0:	cb840000 	.word	0xcb840000
 80028a4:	80000001 	.word	0x80000001

080028a8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80028b0:	2300      	movs	r3, #0
 80028b2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7ff f979 	bl	8001bb0 <LL_ADC_IsEnabled>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d169      	bne.n	8002998 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	689a      	ldr	r2, [r3, #8]
 80028ca:	4b36      	ldr	r3, [pc, #216]	@ (80029a4 <ADC_Enable+0xfc>)
 80028cc:	4013      	ands	r3, r2
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d00d      	beq.n	80028ee <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028d6:	f043 0210 	orr.w	r2, r3, #16
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028e2:	f043 0201 	orr.w	r2, r3, #1
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e055      	b.n	800299a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7ff f934 	bl	8001b60 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80028f8:	482b      	ldr	r0, [pc, #172]	@ (80029a8 <ADC_Enable+0x100>)
 80028fa:	f7fe ffe3 	bl	80018c4 <LL_ADC_GetCommonPathInternalCh>
 80028fe:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002900:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002904:	2b00      	cmp	r3, #0
 8002906:	d013      	beq.n	8002930 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002908:	4b28      	ldr	r3, [pc, #160]	@ (80029ac <ADC_Enable+0x104>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	099b      	lsrs	r3, r3, #6
 800290e:	4a28      	ldr	r2, [pc, #160]	@ (80029b0 <ADC_Enable+0x108>)
 8002910:	fba2 2303 	umull	r2, r3, r2, r3
 8002914:	099b      	lsrs	r3, r3, #6
 8002916:	1c5a      	adds	r2, r3, #1
 8002918:	4613      	mov	r3, r2
 800291a:	005b      	lsls	r3, r3, #1
 800291c:	4413      	add	r3, r2
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002922:	e002      	b.n	800292a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	3b01      	subs	r3, #1
 8002928:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d1f9      	bne.n	8002924 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002930:	f7fe ff72 	bl	8001818 <HAL_GetTick>
 8002934:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002936:	e028      	b.n	800298a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4618      	mov	r0, r3
 800293e:	f7ff f937 	bl	8001bb0 <LL_ADC_IsEnabled>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d104      	bne.n	8002952 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4618      	mov	r0, r3
 800294e:	f7ff f907 	bl	8001b60 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002952:	f7fe ff61 	bl	8001818 <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	2b02      	cmp	r3, #2
 800295e:	d914      	bls.n	800298a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0301 	and.w	r3, r3, #1
 800296a:	2b01      	cmp	r3, #1
 800296c:	d00d      	beq.n	800298a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002972:	f043 0210 	orr.w	r2, r3, #16
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800297e:	f043 0201 	orr.w	r2, r3, #1
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e007      	b.n	800299a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0301 	and.w	r3, r3, #1
 8002994:	2b01      	cmp	r3, #1
 8002996:	d1cf      	bne.n	8002938 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	3710      	adds	r7, #16
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	8000003f 	.word	0x8000003f
 80029a8:	50040300 	.word	0x50040300
 80029ac:	20000000 	.word	0x20000000
 80029b0:	053e2d63 	.word	0x053e2d63

080029b4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7ff f908 	bl	8001bd6 <LL_ADC_IsDisableOngoing>
 80029c6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7ff f8ef 	bl	8001bb0 <LL_ADC_IsEnabled>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d047      	beq.n	8002a68 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d144      	bne.n	8002a68 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	f003 030d 	and.w	r3, r3, #13
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d10c      	bne.n	8002a06 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7ff f8c9 	bl	8001b88 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	2203      	movs	r2, #3
 80029fc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80029fe:	f7fe ff0b 	bl	8001818 <HAL_GetTick>
 8002a02:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002a04:	e029      	b.n	8002a5a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a0a:	f043 0210 	orr.w	r2, r3, #16
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a16:	f043 0201 	orr.w	r2, r3, #1
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e023      	b.n	8002a6a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002a22:	f7fe fef9 	bl	8001818 <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d914      	bls.n	8002a5a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	f003 0301 	and.w	r3, r3, #1
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d00d      	beq.n	8002a5a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a42:	f043 0210 	orr.w	r2, r3, #16
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a4e:	f043 0201 	orr.w	r2, r3, #1
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e007      	b.n	8002a6a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	f003 0301 	and.w	r3, r3, #1
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d1dc      	bne.n	8002a22 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3710      	adds	r7, #16
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}

08002a72 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002a72:	b580      	push	{r7, lr}
 8002a74:	b084      	sub	sp, #16
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a7e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a84:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d14b      	bne.n	8002b24 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a90:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0308 	and.w	r3, r3, #8
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d021      	beq.n	8002aea <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7fe ff6d 	bl	800198a <LL_ADC_REG_IsTriggerSourceSWStart>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d032      	beq.n	8002b1c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d12b      	bne.n	8002b1c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ac8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ad4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d11f      	bne.n	8002b1c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ae0:	f043 0201 	orr.w	r2, r3, #1
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	655a      	str	r2, [r3, #84]	@ 0x54
 8002ae8:	e018      	b.n	8002b1c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	f003 0302 	and.w	r3, r3, #2
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d111      	bne.n	8002b1c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002afc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b08:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d105      	bne.n	8002b1c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b14:	f043 0201 	orr.w	r2, r3, #1
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002b1c:	68f8      	ldr	r0, [r7, #12]
 8002b1e:	f7ff fab3 	bl	8002088 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002b22:	e00e      	b.n	8002b42 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b28:	f003 0310 	and.w	r3, r3, #16
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d003      	beq.n	8002b38 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002b30:	68f8      	ldr	r0, [r7, #12]
 8002b32:	f7ff fabd 	bl	80020b0 <HAL_ADC_ErrorCallback>
}
 8002b36:	e004      	b.n	8002b42 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	4798      	blx	r3
}
 8002b42:	bf00      	nop
 8002b44:	3710      	adds	r7, #16
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}

08002b4a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002b4a:	b580      	push	{r7, lr}
 8002b4c:	b084      	sub	sp, #16
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b56:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002b58:	68f8      	ldr	r0, [r7, #12]
 8002b5a:	f7ff fa9f 	bl	800209c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b5e:	bf00      	nop
 8002b60:	3710      	adds	r7, #16
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002b66:	b580      	push	{r7, lr}
 8002b68:	b084      	sub	sp, #16
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b72:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b78:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b84:	f043 0204 	orr.w	r2, r3, #4
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002b8c:	68f8      	ldr	r0, [r7, #12]
 8002b8e:	f7ff fa8f 	bl	80020b0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b92:	bf00      	nop
 8002b94:	3710      	adds	r7, #16
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}

08002b9a <LL_ADC_IsEnabled>:
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	b083      	sub	sp, #12
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f003 0301 	and.w	r3, r3, #1
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d101      	bne.n	8002bb2 <LL_ADC_IsEnabled+0x18>
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e000      	b.n	8002bb4 <LL_ADC_IsEnabled+0x1a>
 8002bb2:	2300      	movs	r3, #0
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr

08002bc0 <LL_ADC_StartCalibration>:
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8002bd2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002bd6:	683a      	ldr	r2, [r7, #0]
 8002bd8:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	609a      	str	r2, [r3, #8]
}
 8002be6:	bf00      	nop
 8002be8:	370c      	adds	r7, #12
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr

08002bf2 <LL_ADC_IsCalibrationOnGoing>:
{
 8002bf2:	b480      	push	{r7}
 8002bf4:	b083      	sub	sp, #12
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002c02:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002c06:	d101      	bne.n	8002c0c <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e000      	b.n	8002c0e <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	370c      	adds	r7, #12
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr

08002c1a <LL_ADC_REG_IsConversionOngoing>:
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	b083      	sub	sp, #12
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f003 0304 	and.w	r3, r3, #4
 8002c2a:	2b04      	cmp	r3, #4
 8002c2c:	d101      	bne.n	8002c32 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e000      	b.n	8002c34 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c32:	2300      	movs	r3, #0
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	370c      	adds	r7, #12
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr

08002c40 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d101      	bne.n	8002c5c <HAL_ADCEx_Calibration_Start+0x1c>
 8002c58:	2302      	movs	r3, #2
 8002c5a:	e04d      	b.n	8002cf8 <HAL_ADCEx_Calibration_Start+0xb8>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f7ff fea5 	bl	80029b4 <ADC_Disable>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002c6e:	7bfb      	ldrb	r3, [r7, #15]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d136      	bne.n	8002ce2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c78:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002c7c:	f023 0302 	bic.w	r3, r3, #2
 8002c80:	f043 0202 	orr.w	r2, r3, #2
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	6839      	ldr	r1, [r7, #0]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7ff ff96 	bl	8002bc0 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002c94:	e014      	b.n	8002cc0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	3301      	adds	r3, #1
 8002c9a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 8002ca2:	d30d      	bcc.n	8002cc0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ca8:	f023 0312 	bic.w	r3, r3, #18
 8002cac:	f043 0210 	orr.w	r2, r3, #16
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e01b      	b.n	8002cf8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7ff ff94 	bl	8002bf2 <LL_ADC_IsCalibrationOnGoing>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d1e2      	bne.n	8002c96 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cd4:	f023 0303 	bic.w	r3, r3, #3
 8002cd8:	f043 0201 	orr.w	r2, r3, #1
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	655a      	str	r2, [r3, #84]	@ 0x54
 8002ce0:	e005      	b.n	8002cee <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ce6:	f043 0210 	orr.w	r2, r3, #16
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3710      	adds	r7, #16
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002d00:	b590      	push	{r4, r7, lr}
 8002d02:	b09f      	sub	sp, #124	@ 0x7c
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d101      	bne.n	8002d1e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	e093      	b.n	8002e46 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2201      	movs	r2, #1
 8002d22:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002d26:	2300      	movs	r3, #0
 8002d28:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a47      	ldr	r2, [pc, #284]	@ (8002e50 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d102      	bne.n	8002d3e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002d38:	4b46      	ldr	r3, [pc, #280]	@ (8002e54 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002d3a:	60bb      	str	r3, [r7, #8]
 8002d3c:	e001      	b.n	8002d42 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002d3e:	2300      	movs	r3, #0
 8002d40:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d10b      	bne.n	8002d60 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d4c:	f043 0220 	orr.w	r2, r3, #32
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e072      	b.n	8002e46 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7ff ff59 	bl	8002c1a <LL_ADC_REG_IsConversionOngoing>
 8002d68:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7ff ff53 	bl	8002c1a <LL_ADC_REG_IsConversionOngoing>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d154      	bne.n	8002e24 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002d7a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d151      	bne.n	8002e24 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002d80:	4b35      	ldr	r3, [pc, #212]	@ (8002e58 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002d82:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d02c      	beq.n	8002de6 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002d8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	6859      	ldr	r1, [r3, #4]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002d9e:	035b      	lsls	r3, r3, #13
 8002da0:	430b      	orrs	r3, r1
 8002da2:	431a      	orrs	r2, r3
 8002da4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002da6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002da8:	4829      	ldr	r0, [pc, #164]	@ (8002e50 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002daa:	f7ff fef6 	bl	8002b9a <LL_ADC_IsEnabled>
 8002dae:	4604      	mov	r4, r0
 8002db0:	4828      	ldr	r0, [pc, #160]	@ (8002e54 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002db2:	f7ff fef2 	bl	8002b9a <LL_ADC_IsEnabled>
 8002db6:	4603      	mov	r3, r0
 8002db8:	431c      	orrs	r4, r3
 8002dba:	4828      	ldr	r0, [pc, #160]	@ (8002e5c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002dbc:	f7ff feed 	bl	8002b9a <LL_ADC_IsEnabled>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	4323      	orrs	r3, r4
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d137      	bne.n	8002e38 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002dc8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002dd0:	f023 030f 	bic.w	r3, r3, #15
 8002dd4:	683a      	ldr	r2, [r7, #0]
 8002dd6:	6811      	ldr	r1, [r2, #0]
 8002dd8:	683a      	ldr	r2, [r7, #0]
 8002dda:	6892      	ldr	r2, [r2, #8]
 8002ddc:	430a      	orrs	r2, r1
 8002dde:	431a      	orrs	r2, r3
 8002de0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002de2:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002de4:	e028      	b.n	8002e38 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002de6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002dee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002df0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002df2:	4817      	ldr	r0, [pc, #92]	@ (8002e50 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002df4:	f7ff fed1 	bl	8002b9a <LL_ADC_IsEnabled>
 8002df8:	4604      	mov	r4, r0
 8002dfa:	4816      	ldr	r0, [pc, #88]	@ (8002e54 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002dfc:	f7ff fecd 	bl	8002b9a <LL_ADC_IsEnabled>
 8002e00:	4603      	mov	r3, r0
 8002e02:	431c      	orrs	r4, r3
 8002e04:	4815      	ldr	r0, [pc, #84]	@ (8002e5c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002e06:	f7ff fec8 	bl	8002b9a <LL_ADC_IsEnabled>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	4323      	orrs	r3, r4
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d112      	bne.n	8002e38 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002e12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002e1a:	f023 030f 	bic.w	r3, r3, #15
 8002e1e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002e20:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002e22:	e009      	b.n	8002e38 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e28:	f043 0220 	orr.w	r2, r3, #32
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002e36:	e000      	b.n	8002e3a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002e38:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002e42:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	377c      	adds	r7, #124	@ 0x7c
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd90      	pop	{r4, r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	50040000 	.word	0x50040000
 8002e54:	50040100 	.word	0x50040100
 8002e58:	50040300 	.word	0x50040300
 8002e5c:	50040200 	.word	0x50040200

08002e60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b085      	sub	sp, #20
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f003 0307 	and.w	r3, r3, #7
 8002e6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e70:	4b0c      	ldr	r3, [pc, #48]	@ (8002ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e76:	68ba      	ldr	r2, [r7, #8]
 8002e78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e92:	4a04      	ldr	r2, [pc, #16]	@ (8002ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	60d3      	str	r3, [r2, #12]
}
 8002e98:	bf00      	nop
 8002e9a:	3714      	adds	r7, #20
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr
 8002ea4:	e000ed00 	.word	0xe000ed00

08002ea8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002eac:	4b04      	ldr	r3, [pc, #16]	@ (8002ec0 <__NVIC_GetPriorityGrouping+0x18>)
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	0a1b      	lsrs	r3, r3, #8
 8002eb2:	f003 0307 	and.w	r3, r3, #7
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr
 8002ec0:	e000ed00 	.word	0xe000ed00

08002ec4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	4603      	mov	r3, r0
 8002ecc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	db0b      	blt.n	8002eee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ed6:	79fb      	ldrb	r3, [r7, #7]
 8002ed8:	f003 021f 	and.w	r2, r3, #31
 8002edc:	4907      	ldr	r1, [pc, #28]	@ (8002efc <__NVIC_EnableIRQ+0x38>)
 8002ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ee2:	095b      	lsrs	r3, r3, #5
 8002ee4:	2001      	movs	r0, #1
 8002ee6:	fa00 f202 	lsl.w	r2, r0, r2
 8002eea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002eee:	bf00      	nop
 8002ef0:	370c      	adds	r7, #12
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop
 8002efc:	e000e100 	.word	0xe000e100

08002f00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	4603      	mov	r3, r0
 8002f08:	6039      	str	r1, [r7, #0]
 8002f0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	db0a      	blt.n	8002f2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	b2da      	uxtb	r2, r3
 8002f18:	490c      	ldr	r1, [pc, #48]	@ (8002f4c <__NVIC_SetPriority+0x4c>)
 8002f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f1e:	0112      	lsls	r2, r2, #4
 8002f20:	b2d2      	uxtb	r2, r2
 8002f22:	440b      	add	r3, r1
 8002f24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f28:	e00a      	b.n	8002f40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	b2da      	uxtb	r2, r3
 8002f2e:	4908      	ldr	r1, [pc, #32]	@ (8002f50 <__NVIC_SetPriority+0x50>)
 8002f30:	79fb      	ldrb	r3, [r7, #7]
 8002f32:	f003 030f 	and.w	r3, r3, #15
 8002f36:	3b04      	subs	r3, #4
 8002f38:	0112      	lsls	r2, r2, #4
 8002f3a:	b2d2      	uxtb	r2, r2
 8002f3c:	440b      	add	r3, r1
 8002f3e:	761a      	strb	r2, [r3, #24]
}
 8002f40:	bf00      	nop
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr
 8002f4c:	e000e100 	.word	0xe000e100
 8002f50:	e000ed00 	.word	0xe000ed00

08002f54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b089      	sub	sp, #36	@ 0x24
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	60b9      	str	r1, [r7, #8]
 8002f5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f003 0307 	and.w	r3, r3, #7
 8002f66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	f1c3 0307 	rsb	r3, r3, #7
 8002f6e:	2b04      	cmp	r3, #4
 8002f70:	bf28      	it	cs
 8002f72:	2304      	movcs	r3, #4
 8002f74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	3304      	adds	r3, #4
 8002f7a:	2b06      	cmp	r3, #6
 8002f7c:	d902      	bls.n	8002f84 <NVIC_EncodePriority+0x30>
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	3b03      	subs	r3, #3
 8002f82:	e000      	b.n	8002f86 <NVIC_EncodePriority+0x32>
 8002f84:	2300      	movs	r3, #0
 8002f86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f88:	f04f 32ff 	mov.w	r2, #4294967295
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f92:	43da      	mvns	r2, r3
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	401a      	ands	r2, r3
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f9c:	f04f 31ff 	mov.w	r1, #4294967295
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa6:	43d9      	mvns	r1, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fac:	4313      	orrs	r3, r2
         );
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3724      	adds	r7, #36	@ 0x24
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
	...

08002fbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002fcc:	d301      	bcc.n	8002fd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e00f      	b.n	8002ff2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fd2:	4a0a      	ldr	r2, [pc, #40]	@ (8002ffc <SysTick_Config+0x40>)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fda:	210f      	movs	r1, #15
 8002fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8002fe0:	f7ff ff8e 	bl	8002f00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fe4:	4b05      	ldr	r3, [pc, #20]	@ (8002ffc <SysTick_Config+0x40>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fea:	4b04      	ldr	r3, [pc, #16]	@ (8002ffc <SysTick_Config+0x40>)
 8002fec:	2207      	movs	r2, #7
 8002fee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3708      	adds	r7, #8
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	e000e010 	.word	0xe000e010

08003000 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f7ff ff29 	bl	8002e60 <__NVIC_SetPriorityGrouping>
}
 800300e:	bf00      	nop
 8003010:	3708      	adds	r7, #8
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}

08003016 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003016:	b580      	push	{r7, lr}
 8003018:	b086      	sub	sp, #24
 800301a:	af00      	add	r7, sp, #0
 800301c:	4603      	mov	r3, r0
 800301e:	60b9      	str	r1, [r7, #8]
 8003020:	607a      	str	r2, [r7, #4]
 8003022:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003024:	2300      	movs	r3, #0
 8003026:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003028:	f7ff ff3e 	bl	8002ea8 <__NVIC_GetPriorityGrouping>
 800302c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	68b9      	ldr	r1, [r7, #8]
 8003032:	6978      	ldr	r0, [r7, #20]
 8003034:	f7ff ff8e 	bl	8002f54 <NVIC_EncodePriority>
 8003038:	4602      	mov	r2, r0
 800303a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800303e:	4611      	mov	r1, r2
 8003040:	4618      	mov	r0, r3
 8003042:	f7ff ff5d 	bl	8002f00 <__NVIC_SetPriority>
}
 8003046:	bf00      	nop
 8003048:	3718      	adds	r7, #24
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}

0800304e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800304e:	b580      	push	{r7, lr}
 8003050:	b082      	sub	sp, #8
 8003052:	af00      	add	r7, sp, #0
 8003054:	4603      	mov	r3, r0
 8003056:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003058:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800305c:	4618      	mov	r0, r3
 800305e:	f7ff ff31 	bl	8002ec4 <__NVIC_EnableIRQ>
}
 8003062:	bf00      	nop
 8003064:	3708      	adds	r7, #8
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}

0800306a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800306a:	b580      	push	{r7, lr}
 800306c:	b082      	sub	sp, #8
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f7ff ffa2 	bl	8002fbc <SysTick_Config>
 8003078:	4603      	mov	r3, r0
}
 800307a:	4618      	mov	r0, r3
 800307c:	3708      	adds	r7, #8
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
	...

08003084 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003084:	b480      	push	{r7}
 8003086:	b085      	sub	sp, #20
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d101      	bne.n	8003096 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e098      	b.n	80031c8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	461a      	mov	r2, r3
 800309c:	4b4d      	ldr	r3, [pc, #308]	@ (80031d4 <HAL_DMA_Init+0x150>)
 800309e:	429a      	cmp	r2, r3
 80030a0:	d80f      	bhi.n	80030c2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	461a      	mov	r2, r3
 80030a8:	4b4b      	ldr	r3, [pc, #300]	@ (80031d8 <HAL_DMA_Init+0x154>)
 80030aa:	4413      	add	r3, r2
 80030ac:	4a4b      	ldr	r2, [pc, #300]	@ (80031dc <HAL_DMA_Init+0x158>)
 80030ae:	fba2 2303 	umull	r2, r3, r2, r3
 80030b2:	091b      	lsrs	r3, r3, #4
 80030b4:	009a      	lsls	r2, r3, #2
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a48      	ldr	r2, [pc, #288]	@ (80031e0 <HAL_DMA_Init+0x15c>)
 80030be:	641a      	str	r2, [r3, #64]	@ 0x40
 80030c0:	e00e      	b.n	80030e0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	461a      	mov	r2, r3
 80030c8:	4b46      	ldr	r3, [pc, #280]	@ (80031e4 <HAL_DMA_Init+0x160>)
 80030ca:	4413      	add	r3, r2
 80030cc:	4a43      	ldr	r2, [pc, #268]	@ (80031dc <HAL_DMA_Init+0x158>)
 80030ce:	fba2 2303 	umull	r2, r3, r2, r3
 80030d2:	091b      	lsrs	r3, r3, #4
 80030d4:	009a      	lsls	r2, r3, #2
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a42      	ldr	r2, [pc, #264]	@ (80031e8 <HAL_DMA_Init+0x164>)
 80030de:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2202      	movs	r2, #2
 80030e4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80030f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030fa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003104:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	691b      	ldr	r3, [r3, #16]
 800310a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003110:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	699b      	ldr	r3, [r3, #24]
 8003116:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800311c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a1b      	ldr	r3, [r3, #32]
 8003122:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003124:	68fa      	ldr	r2, [r7, #12]
 8003126:	4313      	orrs	r3, r2
 8003128:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	68fa      	ldr	r2, [r7, #12]
 8003130:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800313a:	d039      	beq.n	80031b0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003140:	4a27      	ldr	r2, [pc, #156]	@ (80031e0 <HAL_DMA_Init+0x15c>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d11a      	bne.n	800317c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003146:	4b29      	ldr	r3, [pc, #164]	@ (80031ec <HAL_DMA_Init+0x168>)
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800314e:	f003 031c 	and.w	r3, r3, #28
 8003152:	210f      	movs	r1, #15
 8003154:	fa01 f303 	lsl.w	r3, r1, r3
 8003158:	43db      	mvns	r3, r3
 800315a:	4924      	ldr	r1, [pc, #144]	@ (80031ec <HAL_DMA_Init+0x168>)
 800315c:	4013      	ands	r3, r2
 800315e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003160:	4b22      	ldr	r3, [pc, #136]	@ (80031ec <HAL_DMA_Init+0x168>)
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6859      	ldr	r1, [r3, #4]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800316c:	f003 031c 	and.w	r3, r3, #28
 8003170:	fa01 f303 	lsl.w	r3, r1, r3
 8003174:	491d      	ldr	r1, [pc, #116]	@ (80031ec <HAL_DMA_Init+0x168>)
 8003176:	4313      	orrs	r3, r2
 8003178:	600b      	str	r3, [r1, #0]
 800317a:	e019      	b.n	80031b0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800317c:	4b1c      	ldr	r3, [pc, #112]	@ (80031f0 <HAL_DMA_Init+0x16c>)
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003184:	f003 031c 	and.w	r3, r3, #28
 8003188:	210f      	movs	r1, #15
 800318a:	fa01 f303 	lsl.w	r3, r1, r3
 800318e:	43db      	mvns	r3, r3
 8003190:	4917      	ldr	r1, [pc, #92]	@ (80031f0 <HAL_DMA_Init+0x16c>)
 8003192:	4013      	ands	r3, r2
 8003194:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003196:	4b16      	ldr	r3, [pc, #88]	@ (80031f0 <HAL_DMA_Init+0x16c>)
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6859      	ldr	r1, [r3, #4]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031a2:	f003 031c 	and.w	r3, r3, #28
 80031a6:	fa01 f303 	lsl.w	r3, r1, r3
 80031aa:	4911      	ldr	r1, [pc, #68]	@ (80031f0 <HAL_DMA_Init+0x16c>)
 80031ac:	4313      	orrs	r3, r2
 80031ae:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2201      	movs	r2, #1
 80031ba:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3714      	adds	r7, #20
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr
 80031d4:	40020407 	.word	0x40020407
 80031d8:	bffdfff8 	.word	0xbffdfff8
 80031dc:	cccccccd 	.word	0xcccccccd
 80031e0:	40020000 	.word	0x40020000
 80031e4:	bffdfbf8 	.word	0xbffdfbf8
 80031e8:	40020400 	.word	0x40020400
 80031ec:	400200a8 	.word	0x400200a8
 80031f0:	400204a8 	.word	0x400204a8

080031f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b086      	sub	sp, #24
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	607a      	str	r2, [r7, #4]
 8003200:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003202:	2300      	movs	r3, #0
 8003204:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800320c:	2b01      	cmp	r3, #1
 800320e:	d101      	bne.n	8003214 <HAL_DMA_Start_IT+0x20>
 8003210:	2302      	movs	r3, #2
 8003212:	e04b      	b.n	80032ac <HAL_DMA_Start_IT+0xb8>
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003222:	b2db      	uxtb	r3, r3
 8003224:	2b01      	cmp	r3, #1
 8003226:	d13a      	bne.n	800329e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2202      	movs	r2, #2
 800322c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2200      	movs	r2, #0
 8003234:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f022 0201 	bic.w	r2, r2, #1
 8003244:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	68b9      	ldr	r1, [r7, #8]
 800324c:	68f8      	ldr	r0, [r7, #12]
 800324e:	f000 f8e0 	bl	8003412 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003256:	2b00      	cmp	r3, #0
 8003258:	d008      	beq.n	800326c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f042 020e 	orr.w	r2, r2, #14
 8003268:	601a      	str	r2, [r3, #0]
 800326a:	e00f      	b.n	800328c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f022 0204 	bic.w	r2, r2, #4
 800327a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f042 020a 	orr.w	r2, r2, #10
 800328a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f042 0201 	orr.w	r2, r2, #1
 800329a:	601a      	str	r2, [r3, #0]
 800329c:	e005      	b.n	80032aa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80032a6:	2302      	movs	r3, #2
 80032a8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80032aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3718      	adds	r7, #24
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032d0:	f003 031c 	and.w	r3, r3, #28
 80032d4:	2204      	movs	r2, #4
 80032d6:	409a      	lsls	r2, r3
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	4013      	ands	r3, r2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d026      	beq.n	800332e <HAL_DMA_IRQHandler+0x7a>
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	f003 0304 	and.w	r3, r3, #4
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d021      	beq.n	800332e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0320 	and.w	r3, r3, #32
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d107      	bne.n	8003308 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f022 0204 	bic.w	r2, r2, #4
 8003306:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800330c:	f003 021c 	and.w	r2, r3, #28
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003314:	2104      	movs	r1, #4
 8003316:	fa01 f202 	lsl.w	r2, r1, r2
 800331a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003320:	2b00      	cmp	r3, #0
 8003322:	d071      	beq.n	8003408 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800332c:	e06c      	b.n	8003408 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003332:	f003 031c 	and.w	r3, r3, #28
 8003336:	2202      	movs	r2, #2
 8003338:	409a      	lsls	r2, r3
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	4013      	ands	r3, r2
 800333e:	2b00      	cmp	r3, #0
 8003340:	d02e      	beq.n	80033a0 <HAL_DMA_IRQHandler+0xec>
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	f003 0302 	and.w	r3, r3, #2
 8003348:	2b00      	cmp	r3, #0
 800334a:	d029      	beq.n	80033a0 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0320 	and.w	r3, r3, #32
 8003356:	2b00      	cmp	r3, #0
 8003358:	d10b      	bne.n	8003372 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f022 020a 	bic.w	r2, r2, #10
 8003368:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2201      	movs	r2, #1
 800336e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003376:	f003 021c 	and.w	r2, r3, #28
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800337e:	2102      	movs	r1, #2
 8003380:	fa01 f202 	lsl.w	r2, r1, r2
 8003384:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003392:	2b00      	cmp	r3, #0
 8003394:	d038      	beq.n	8003408 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800339e:	e033      	b.n	8003408 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033a4:	f003 031c 	and.w	r3, r3, #28
 80033a8:	2208      	movs	r2, #8
 80033aa:	409a      	lsls	r2, r3
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	4013      	ands	r3, r2
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d02a      	beq.n	800340a <HAL_DMA_IRQHandler+0x156>
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	f003 0308 	and.w	r3, r3, #8
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d025      	beq.n	800340a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f022 020e 	bic.w	r2, r2, #14
 80033cc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033d2:	f003 021c 	and.w	r2, r3, #28
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033da:	2101      	movs	r1, #1
 80033dc:	fa01 f202 	lsl.w	r2, r1, r2
 80033e0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2201      	movs	r2, #1
 80033e6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d004      	beq.n	800340a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003408:	bf00      	nop
 800340a:	bf00      	nop
}
 800340c:	3710      	adds	r7, #16
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}

08003412 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003412:	b480      	push	{r7}
 8003414:	b085      	sub	sp, #20
 8003416:	af00      	add	r7, sp, #0
 8003418:	60f8      	str	r0, [r7, #12]
 800341a:	60b9      	str	r1, [r7, #8]
 800341c:	607a      	str	r2, [r7, #4]
 800341e:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003424:	f003 021c 	and.w	r2, r3, #28
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800342c:	2101      	movs	r1, #1
 800342e:	fa01 f202 	lsl.w	r2, r1, r2
 8003432:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	683a      	ldr	r2, [r7, #0]
 800343a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	2b10      	cmp	r3, #16
 8003442:	d108      	bne.n	8003456 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	68ba      	ldr	r2, [r7, #8]
 8003452:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003454:	e007      	b.n	8003466 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	68ba      	ldr	r2, [r7, #8]
 800345c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	60da      	str	r2, [r3, #12]
}
 8003466:	bf00      	nop
 8003468:	3714      	adds	r7, #20
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr
	...

08003474 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003474:	b480      	push	{r7}
 8003476:	b087      	sub	sp, #28
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800347e:	2300      	movs	r3, #0
 8003480:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003482:	e17f      	b.n	8003784 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	2101      	movs	r1, #1
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	fa01 f303 	lsl.w	r3, r1, r3
 8003490:	4013      	ands	r3, r2
 8003492:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2b00      	cmp	r3, #0
 8003498:	f000 8171 	beq.w	800377e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f003 0303 	and.w	r3, r3, #3
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d005      	beq.n	80034b4 <HAL_GPIO_Init+0x40>
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f003 0303 	and.w	r3, r3, #3
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	d130      	bne.n	8003516 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	005b      	lsls	r3, r3, #1
 80034be:	2203      	movs	r2, #3
 80034c0:	fa02 f303 	lsl.w	r3, r2, r3
 80034c4:	43db      	mvns	r3, r3
 80034c6:	693a      	ldr	r2, [r7, #16]
 80034c8:	4013      	ands	r3, r2
 80034ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	68da      	ldr	r2, [r3, #12]
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	005b      	lsls	r3, r3, #1
 80034d4:	fa02 f303 	lsl.w	r3, r2, r3
 80034d8:	693a      	ldr	r2, [r7, #16]
 80034da:	4313      	orrs	r3, r2
 80034dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	693a      	ldr	r2, [r7, #16]
 80034e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80034ea:	2201      	movs	r2, #1
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	fa02 f303 	lsl.w	r3, r2, r3
 80034f2:	43db      	mvns	r3, r3
 80034f4:	693a      	ldr	r2, [r7, #16]
 80034f6:	4013      	ands	r3, r2
 80034f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	091b      	lsrs	r3, r3, #4
 8003500:	f003 0201 	and.w	r2, r3, #1
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	fa02 f303 	lsl.w	r3, r2, r3
 800350a:	693a      	ldr	r2, [r7, #16]
 800350c:	4313      	orrs	r3, r2
 800350e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	693a      	ldr	r2, [r7, #16]
 8003514:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	f003 0303 	and.w	r3, r3, #3
 800351e:	2b03      	cmp	r3, #3
 8003520:	d118      	bne.n	8003554 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003526:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003528:	2201      	movs	r2, #1
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	fa02 f303 	lsl.w	r3, r2, r3
 8003530:	43db      	mvns	r3, r3
 8003532:	693a      	ldr	r2, [r7, #16]
 8003534:	4013      	ands	r3, r2
 8003536:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	08db      	lsrs	r3, r3, #3
 800353e:	f003 0201 	and.w	r2, r3, #1
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	fa02 f303 	lsl.w	r3, r2, r3
 8003548:	693a      	ldr	r2, [r7, #16]
 800354a:	4313      	orrs	r3, r2
 800354c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	693a      	ldr	r2, [r7, #16]
 8003552:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f003 0303 	and.w	r3, r3, #3
 800355c:	2b03      	cmp	r3, #3
 800355e:	d017      	beq.n	8003590 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	005b      	lsls	r3, r3, #1
 800356a:	2203      	movs	r2, #3
 800356c:	fa02 f303 	lsl.w	r3, r2, r3
 8003570:	43db      	mvns	r3, r3
 8003572:	693a      	ldr	r2, [r7, #16]
 8003574:	4013      	ands	r3, r2
 8003576:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	689a      	ldr	r2, [r3, #8]
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	005b      	lsls	r3, r3, #1
 8003580:	fa02 f303 	lsl.w	r3, r2, r3
 8003584:	693a      	ldr	r2, [r7, #16]
 8003586:	4313      	orrs	r3, r2
 8003588:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	693a      	ldr	r2, [r7, #16]
 800358e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f003 0303 	and.w	r3, r3, #3
 8003598:	2b02      	cmp	r3, #2
 800359a:	d123      	bne.n	80035e4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	08da      	lsrs	r2, r3, #3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	3208      	adds	r2, #8
 80035a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	f003 0307 	and.w	r3, r3, #7
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	220f      	movs	r2, #15
 80035b4:	fa02 f303 	lsl.w	r3, r2, r3
 80035b8:	43db      	mvns	r3, r3
 80035ba:	693a      	ldr	r2, [r7, #16]
 80035bc:	4013      	ands	r3, r2
 80035be:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	691a      	ldr	r2, [r3, #16]
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	f003 0307 	and.w	r3, r3, #7
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	fa02 f303 	lsl.w	r3, r2, r3
 80035d0:	693a      	ldr	r2, [r7, #16]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	08da      	lsrs	r2, r3, #3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	3208      	adds	r2, #8
 80035de:	6939      	ldr	r1, [r7, #16]
 80035e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	005b      	lsls	r3, r3, #1
 80035ee:	2203      	movs	r2, #3
 80035f0:	fa02 f303 	lsl.w	r3, r2, r3
 80035f4:	43db      	mvns	r3, r3
 80035f6:	693a      	ldr	r2, [r7, #16]
 80035f8:	4013      	ands	r3, r2
 80035fa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f003 0203 	and.w	r2, r3, #3
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	005b      	lsls	r3, r3, #1
 8003608:	fa02 f303 	lsl.w	r3, r2, r3
 800360c:	693a      	ldr	r2, [r7, #16]
 800360e:	4313      	orrs	r3, r2
 8003610:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	693a      	ldr	r2, [r7, #16]
 8003616:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003620:	2b00      	cmp	r3, #0
 8003622:	f000 80ac 	beq.w	800377e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003626:	4b5f      	ldr	r3, [pc, #380]	@ (80037a4 <HAL_GPIO_Init+0x330>)
 8003628:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800362a:	4a5e      	ldr	r2, [pc, #376]	@ (80037a4 <HAL_GPIO_Init+0x330>)
 800362c:	f043 0301 	orr.w	r3, r3, #1
 8003630:	6613      	str	r3, [r2, #96]	@ 0x60
 8003632:	4b5c      	ldr	r3, [pc, #368]	@ (80037a4 <HAL_GPIO_Init+0x330>)
 8003634:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003636:	f003 0301 	and.w	r3, r3, #1
 800363a:	60bb      	str	r3, [r7, #8]
 800363c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800363e:	4a5a      	ldr	r2, [pc, #360]	@ (80037a8 <HAL_GPIO_Init+0x334>)
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	089b      	lsrs	r3, r3, #2
 8003644:	3302      	adds	r3, #2
 8003646:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800364a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	f003 0303 	and.w	r3, r3, #3
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	220f      	movs	r2, #15
 8003656:	fa02 f303 	lsl.w	r3, r2, r3
 800365a:	43db      	mvns	r3, r3
 800365c:	693a      	ldr	r2, [r7, #16]
 800365e:	4013      	ands	r3, r2
 8003660:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003668:	d025      	beq.n	80036b6 <HAL_GPIO_Init+0x242>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a4f      	ldr	r2, [pc, #316]	@ (80037ac <HAL_GPIO_Init+0x338>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d01f      	beq.n	80036b2 <HAL_GPIO_Init+0x23e>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4a4e      	ldr	r2, [pc, #312]	@ (80037b0 <HAL_GPIO_Init+0x33c>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d019      	beq.n	80036ae <HAL_GPIO_Init+0x23a>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a4d      	ldr	r2, [pc, #308]	@ (80037b4 <HAL_GPIO_Init+0x340>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d013      	beq.n	80036aa <HAL_GPIO_Init+0x236>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4a4c      	ldr	r2, [pc, #304]	@ (80037b8 <HAL_GPIO_Init+0x344>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d00d      	beq.n	80036a6 <HAL_GPIO_Init+0x232>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a4b      	ldr	r2, [pc, #300]	@ (80037bc <HAL_GPIO_Init+0x348>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d007      	beq.n	80036a2 <HAL_GPIO_Init+0x22e>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4a4a      	ldr	r2, [pc, #296]	@ (80037c0 <HAL_GPIO_Init+0x34c>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d101      	bne.n	800369e <HAL_GPIO_Init+0x22a>
 800369a:	2306      	movs	r3, #6
 800369c:	e00c      	b.n	80036b8 <HAL_GPIO_Init+0x244>
 800369e:	2307      	movs	r3, #7
 80036a0:	e00a      	b.n	80036b8 <HAL_GPIO_Init+0x244>
 80036a2:	2305      	movs	r3, #5
 80036a4:	e008      	b.n	80036b8 <HAL_GPIO_Init+0x244>
 80036a6:	2304      	movs	r3, #4
 80036a8:	e006      	b.n	80036b8 <HAL_GPIO_Init+0x244>
 80036aa:	2303      	movs	r3, #3
 80036ac:	e004      	b.n	80036b8 <HAL_GPIO_Init+0x244>
 80036ae:	2302      	movs	r3, #2
 80036b0:	e002      	b.n	80036b8 <HAL_GPIO_Init+0x244>
 80036b2:	2301      	movs	r3, #1
 80036b4:	e000      	b.n	80036b8 <HAL_GPIO_Init+0x244>
 80036b6:	2300      	movs	r3, #0
 80036b8:	697a      	ldr	r2, [r7, #20]
 80036ba:	f002 0203 	and.w	r2, r2, #3
 80036be:	0092      	lsls	r2, r2, #2
 80036c0:	4093      	lsls	r3, r2
 80036c2:	693a      	ldr	r2, [r7, #16]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80036c8:	4937      	ldr	r1, [pc, #220]	@ (80037a8 <HAL_GPIO_Init+0x334>)
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	089b      	lsrs	r3, r3, #2
 80036ce:	3302      	adds	r3, #2
 80036d0:	693a      	ldr	r2, [r7, #16]
 80036d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80036d6:	4b3b      	ldr	r3, [pc, #236]	@ (80037c4 <HAL_GPIO_Init+0x350>)
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	43db      	mvns	r3, r3
 80036e0:	693a      	ldr	r2, [r7, #16]
 80036e2:	4013      	ands	r3, r2
 80036e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d003      	beq.n	80036fa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80036f2:	693a      	ldr	r2, [r7, #16]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80036fa:	4a32      	ldr	r2, [pc, #200]	@ (80037c4 <HAL_GPIO_Init+0x350>)
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003700:	4b30      	ldr	r3, [pc, #192]	@ (80037c4 <HAL_GPIO_Init+0x350>)
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	43db      	mvns	r3, r3
 800370a:	693a      	ldr	r2, [r7, #16]
 800370c:	4013      	ands	r3, r2
 800370e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d003      	beq.n	8003724 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800371c:	693a      	ldr	r2, [r7, #16]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	4313      	orrs	r3, r2
 8003722:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003724:	4a27      	ldr	r2, [pc, #156]	@ (80037c4 <HAL_GPIO_Init+0x350>)
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800372a:	4b26      	ldr	r3, [pc, #152]	@ (80037c4 <HAL_GPIO_Init+0x350>)
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	43db      	mvns	r3, r3
 8003734:	693a      	ldr	r2, [r7, #16]
 8003736:	4013      	ands	r3, r2
 8003738:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d003      	beq.n	800374e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003746:	693a      	ldr	r2, [r7, #16]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	4313      	orrs	r3, r2
 800374c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800374e:	4a1d      	ldr	r2, [pc, #116]	@ (80037c4 <HAL_GPIO_Init+0x350>)
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003754:	4b1b      	ldr	r3, [pc, #108]	@ (80037c4 <HAL_GPIO_Init+0x350>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	43db      	mvns	r3, r3
 800375e:	693a      	ldr	r2, [r7, #16]
 8003760:	4013      	ands	r3, r2
 8003762:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d003      	beq.n	8003778 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003770:	693a      	ldr	r2, [r7, #16]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	4313      	orrs	r3, r2
 8003776:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003778:	4a12      	ldr	r2, [pc, #72]	@ (80037c4 <HAL_GPIO_Init+0x350>)
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	3301      	adds	r3, #1
 8003782:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	fa22 f303 	lsr.w	r3, r2, r3
 800378e:	2b00      	cmp	r3, #0
 8003790:	f47f ae78 	bne.w	8003484 <HAL_GPIO_Init+0x10>
  }
}
 8003794:	bf00      	nop
 8003796:	bf00      	nop
 8003798:	371c      	adds	r7, #28
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	40021000 	.word	0x40021000
 80037a8:	40010000 	.word	0x40010000
 80037ac:	48000400 	.word	0x48000400
 80037b0:	48000800 	.word	0x48000800
 80037b4:	48000c00 	.word	0x48000c00
 80037b8:	48001000 	.word	0x48001000
 80037bc:	48001400 	.word	0x48001400
 80037c0:	48001800 	.word	0x48001800
 80037c4:	40010400 	.word	0x40010400

080037c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	460b      	mov	r3, r1
 80037d2:	807b      	strh	r3, [r7, #2]
 80037d4:	4613      	mov	r3, r2
 80037d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037d8:	787b      	ldrb	r3, [r7, #1]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d003      	beq.n	80037e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80037de:	887a      	ldrh	r2, [r7, #2]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80037e4:	e002      	b.n	80037ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80037e6:	887a      	ldrh	r2, [r7, #2]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80037ec:	bf00      	nop
 80037ee:	370c      	adds	r7, #12
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80037f8:	b480      	push	{r7}
 80037fa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037fc:	4b05      	ldr	r3, [pc, #20]	@ (8003814 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a04      	ldr	r2, [pc, #16]	@ (8003814 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003802:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003806:	6013      	str	r3, [r2, #0]
}
 8003808:	bf00      	nop
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr
 8003812:	bf00      	nop
 8003814:	40007000 	.word	0x40007000

08003818 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003818:	b480      	push	{r7}
 800381a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800381c:	4b04      	ldr	r3, [pc, #16]	@ (8003830 <HAL_PWREx_GetVoltageRange+0x18>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003824:	4618      	mov	r0, r3
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr
 800382e:	bf00      	nop
 8003830:	40007000 	.word	0x40007000

08003834 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003834:	b480      	push	{r7}
 8003836:	b085      	sub	sp, #20
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003842:	d130      	bne.n	80038a6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003844:	4b23      	ldr	r3, [pc, #140]	@ (80038d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800384c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003850:	d038      	beq.n	80038c4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003852:	4b20      	ldr	r3, [pc, #128]	@ (80038d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800385a:	4a1e      	ldr	r2, [pc, #120]	@ (80038d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800385c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003860:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003862:	4b1d      	ldr	r3, [pc, #116]	@ (80038d8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	2232      	movs	r2, #50	@ 0x32
 8003868:	fb02 f303 	mul.w	r3, r2, r3
 800386c:	4a1b      	ldr	r2, [pc, #108]	@ (80038dc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800386e:	fba2 2303 	umull	r2, r3, r2, r3
 8003872:	0c9b      	lsrs	r3, r3, #18
 8003874:	3301      	adds	r3, #1
 8003876:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003878:	e002      	b.n	8003880 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	3b01      	subs	r3, #1
 800387e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003880:	4b14      	ldr	r3, [pc, #80]	@ (80038d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003882:	695b      	ldr	r3, [r3, #20]
 8003884:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003888:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800388c:	d102      	bne.n	8003894 <HAL_PWREx_ControlVoltageScaling+0x60>
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d1f2      	bne.n	800387a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003894:	4b0f      	ldr	r3, [pc, #60]	@ (80038d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003896:	695b      	ldr	r3, [r3, #20]
 8003898:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800389c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038a0:	d110      	bne.n	80038c4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e00f      	b.n	80038c6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80038a6:	4b0b      	ldr	r3, [pc, #44]	@ (80038d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80038ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038b2:	d007      	beq.n	80038c4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80038b4:	4b07      	ldr	r3, [pc, #28]	@ (80038d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80038bc:	4a05      	ldr	r2, [pc, #20]	@ (80038d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038be:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80038c2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3714      	adds	r7, #20
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr
 80038d2:	bf00      	nop
 80038d4:	40007000 	.word	0x40007000
 80038d8:	20000000 	.word	0x20000000
 80038dc:	431bde83 	.word	0x431bde83

080038e0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b088      	sub	sp, #32
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d101      	bne.n	80038f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e3ca      	b.n	8004088 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038f2:	4b97      	ldr	r3, [pc, #604]	@ (8003b50 <HAL_RCC_OscConfig+0x270>)
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f003 030c 	and.w	r3, r3, #12
 80038fa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038fc:	4b94      	ldr	r3, [pc, #592]	@ (8003b50 <HAL_RCC_OscConfig+0x270>)
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	f003 0303 	and.w	r3, r3, #3
 8003904:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0310 	and.w	r3, r3, #16
 800390e:	2b00      	cmp	r3, #0
 8003910:	f000 80e4 	beq.w	8003adc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003914:	69bb      	ldr	r3, [r7, #24]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d007      	beq.n	800392a <HAL_RCC_OscConfig+0x4a>
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	2b0c      	cmp	r3, #12
 800391e:	f040 808b 	bne.w	8003a38 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	2b01      	cmp	r3, #1
 8003926:	f040 8087 	bne.w	8003a38 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800392a:	4b89      	ldr	r3, [pc, #548]	@ (8003b50 <HAL_RCC_OscConfig+0x270>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0302 	and.w	r3, r3, #2
 8003932:	2b00      	cmp	r3, #0
 8003934:	d005      	beq.n	8003942 <HAL_RCC_OscConfig+0x62>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	699b      	ldr	r3, [r3, #24]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d101      	bne.n	8003942 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e3a2      	b.n	8004088 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6a1a      	ldr	r2, [r3, #32]
 8003946:	4b82      	ldr	r3, [pc, #520]	@ (8003b50 <HAL_RCC_OscConfig+0x270>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0308 	and.w	r3, r3, #8
 800394e:	2b00      	cmp	r3, #0
 8003950:	d004      	beq.n	800395c <HAL_RCC_OscConfig+0x7c>
 8003952:	4b7f      	ldr	r3, [pc, #508]	@ (8003b50 <HAL_RCC_OscConfig+0x270>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800395a:	e005      	b.n	8003968 <HAL_RCC_OscConfig+0x88>
 800395c:	4b7c      	ldr	r3, [pc, #496]	@ (8003b50 <HAL_RCC_OscConfig+0x270>)
 800395e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003962:	091b      	lsrs	r3, r3, #4
 8003964:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003968:	4293      	cmp	r3, r2
 800396a:	d223      	bcs.n	80039b4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6a1b      	ldr	r3, [r3, #32]
 8003970:	4618      	mov	r0, r3
 8003972:	f000 fd55 	bl	8004420 <RCC_SetFlashLatencyFromMSIRange>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d001      	beq.n	8003980 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e383      	b.n	8004088 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003980:	4b73      	ldr	r3, [pc, #460]	@ (8003b50 <HAL_RCC_OscConfig+0x270>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a72      	ldr	r2, [pc, #456]	@ (8003b50 <HAL_RCC_OscConfig+0x270>)
 8003986:	f043 0308 	orr.w	r3, r3, #8
 800398a:	6013      	str	r3, [r2, #0]
 800398c:	4b70      	ldr	r3, [pc, #448]	@ (8003b50 <HAL_RCC_OscConfig+0x270>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6a1b      	ldr	r3, [r3, #32]
 8003998:	496d      	ldr	r1, [pc, #436]	@ (8003b50 <HAL_RCC_OscConfig+0x270>)
 800399a:	4313      	orrs	r3, r2
 800399c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800399e:	4b6c      	ldr	r3, [pc, #432]	@ (8003b50 <HAL_RCC_OscConfig+0x270>)
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	69db      	ldr	r3, [r3, #28]
 80039aa:	021b      	lsls	r3, r3, #8
 80039ac:	4968      	ldr	r1, [pc, #416]	@ (8003b50 <HAL_RCC_OscConfig+0x270>)
 80039ae:	4313      	orrs	r3, r2
 80039b0:	604b      	str	r3, [r1, #4]
 80039b2:	e025      	b.n	8003a00 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039b4:	4b66      	ldr	r3, [pc, #408]	@ (8003b50 <HAL_RCC_OscConfig+0x270>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a65      	ldr	r2, [pc, #404]	@ (8003b50 <HAL_RCC_OscConfig+0x270>)
 80039ba:	f043 0308 	orr.w	r3, r3, #8
 80039be:	6013      	str	r3, [r2, #0]
 80039c0:	4b63      	ldr	r3, [pc, #396]	@ (8003b50 <HAL_RCC_OscConfig+0x270>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a1b      	ldr	r3, [r3, #32]
 80039cc:	4960      	ldr	r1, [pc, #384]	@ (8003b50 <HAL_RCC_OscConfig+0x270>)
 80039ce:	4313      	orrs	r3, r2
 80039d0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039d2:	4b5f      	ldr	r3, [pc, #380]	@ (8003b50 <HAL_RCC_OscConfig+0x270>)
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	69db      	ldr	r3, [r3, #28]
 80039de:	021b      	lsls	r3, r3, #8
 80039e0:	495b      	ldr	r1, [pc, #364]	@ (8003b50 <HAL_RCC_OscConfig+0x270>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80039e6:	69bb      	ldr	r3, [r7, #24]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d109      	bne.n	8003a00 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6a1b      	ldr	r3, [r3, #32]
 80039f0:	4618      	mov	r0, r3
 80039f2:	f000 fd15 	bl	8004420 <RCC_SetFlashLatencyFromMSIRange>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d001      	beq.n	8003a00 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e343      	b.n	8004088 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a00:	f000 fc4a 	bl	8004298 <HAL_RCC_GetSysClockFreq>
 8003a04:	4602      	mov	r2, r0
 8003a06:	4b52      	ldr	r3, [pc, #328]	@ (8003b50 <HAL_RCC_OscConfig+0x270>)
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	091b      	lsrs	r3, r3, #4
 8003a0c:	f003 030f 	and.w	r3, r3, #15
 8003a10:	4950      	ldr	r1, [pc, #320]	@ (8003b54 <HAL_RCC_OscConfig+0x274>)
 8003a12:	5ccb      	ldrb	r3, [r1, r3]
 8003a14:	f003 031f 	and.w	r3, r3, #31
 8003a18:	fa22 f303 	lsr.w	r3, r2, r3
 8003a1c:	4a4e      	ldr	r2, [pc, #312]	@ (8003b58 <HAL_RCC_OscConfig+0x278>)
 8003a1e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003a20:	4b4e      	ldr	r3, [pc, #312]	@ (8003b5c <HAL_RCC_OscConfig+0x27c>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4618      	mov	r0, r3
 8003a26:	f7fd fea7 	bl	8001778 <HAL_InitTick>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003a2e:	7bfb      	ldrb	r3, [r7, #15]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d052      	beq.n	8003ada <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003a34:	7bfb      	ldrb	r3, [r7, #15]
 8003a36:	e327      	b.n	8004088 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	699b      	ldr	r3, [r3, #24]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d032      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003a40:	4b43      	ldr	r3, [pc, #268]	@ (8003b50 <HAL_RCC_OscConfig+0x270>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a42      	ldr	r2, [pc, #264]	@ (8003b50 <HAL_RCC_OscConfig+0x270>)
 8003a46:	f043 0301 	orr.w	r3, r3, #1
 8003a4a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a4c:	f7fd fee4 	bl	8001818 <HAL_GetTick>
 8003a50:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a52:	e008      	b.n	8003a66 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a54:	f7fd fee0 	bl	8001818 <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d901      	bls.n	8003a66 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e310      	b.n	8004088 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a66:	4b3a      	ldr	r3, [pc, #232]	@ (8003b50 <HAL_RCC_OscConfig+0x270>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0302 	and.w	r3, r3, #2
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d0f0      	beq.n	8003a54 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a72:	4b37      	ldr	r3, [pc, #220]	@ (8003b50 <HAL_RCC_OscConfig+0x270>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a36      	ldr	r2, [pc, #216]	@ (8003b50 <HAL_RCC_OscConfig+0x270>)
 8003a78:	f043 0308 	orr.w	r3, r3, #8
 8003a7c:	6013      	str	r3, [r2, #0]
 8003a7e:	4b34      	ldr	r3, [pc, #208]	@ (8003b50 <HAL_RCC_OscConfig+0x270>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a1b      	ldr	r3, [r3, #32]
 8003a8a:	4931      	ldr	r1, [pc, #196]	@ (8003b50 <HAL_RCC_OscConfig+0x270>)
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a90:	4b2f      	ldr	r3, [pc, #188]	@ (8003b50 <HAL_RCC_OscConfig+0x270>)
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	69db      	ldr	r3, [r3, #28]
 8003a9c:	021b      	lsls	r3, r3, #8
 8003a9e:	492c      	ldr	r1, [pc, #176]	@ (8003b50 <HAL_RCC_OscConfig+0x270>)
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	604b      	str	r3, [r1, #4]
 8003aa4:	e01a      	b.n	8003adc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003aa6:	4b2a      	ldr	r3, [pc, #168]	@ (8003b50 <HAL_RCC_OscConfig+0x270>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a29      	ldr	r2, [pc, #164]	@ (8003b50 <HAL_RCC_OscConfig+0x270>)
 8003aac:	f023 0301 	bic.w	r3, r3, #1
 8003ab0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003ab2:	f7fd feb1 	bl	8001818 <HAL_GetTick>
 8003ab6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ab8:	e008      	b.n	8003acc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003aba:	f7fd fead 	bl	8001818 <HAL_GetTick>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d901      	bls.n	8003acc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003ac8:	2303      	movs	r3, #3
 8003aca:	e2dd      	b.n	8004088 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003acc:	4b20      	ldr	r3, [pc, #128]	@ (8003b50 <HAL_RCC_OscConfig+0x270>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0302 	and.w	r3, r3, #2
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d1f0      	bne.n	8003aba <HAL_RCC_OscConfig+0x1da>
 8003ad8:	e000      	b.n	8003adc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003ada:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0301 	and.w	r3, r3, #1
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d074      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	2b08      	cmp	r3, #8
 8003aec:	d005      	beq.n	8003afa <HAL_RCC_OscConfig+0x21a>
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	2b0c      	cmp	r3, #12
 8003af2:	d10e      	bne.n	8003b12 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	2b03      	cmp	r3, #3
 8003af8:	d10b      	bne.n	8003b12 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003afa:	4b15      	ldr	r3, [pc, #84]	@ (8003b50 <HAL_RCC_OscConfig+0x270>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d064      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x2f0>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d160      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e2ba      	b.n	8004088 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b1a:	d106      	bne.n	8003b2a <HAL_RCC_OscConfig+0x24a>
 8003b1c:	4b0c      	ldr	r3, [pc, #48]	@ (8003b50 <HAL_RCC_OscConfig+0x270>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a0b      	ldr	r2, [pc, #44]	@ (8003b50 <HAL_RCC_OscConfig+0x270>)
 8003b22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b26:	6013      	str	r3, [r2, #0]
 8003b28:	e026      	b.n	8003b78 <HAL_RCC_OscConfig+0x298>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b32:	d115      	bne.n	8003b60 <HAL_RCC_OscConfig+0x280>
 8003b34:	4b06      	ldr	r3, [pc, #24]	@ (8003b50 <HAL_RCC_OscConfig+0x270>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a05      	ldr	r2, [pc, #20]	@ (8003b50 <HAL_RCC_OscConfig+0x270>)
 8003b3a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b3e:	6013      	str	r3, [r2, #0]
 8003b40:	4b03      	ldr	r3, [pc, #12]	@ (8003b50 <HAL_RCC_OscConfig+0x270>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a02      	ldr	r2, [pc, #8]	@ (8003b50 <HAL_RCC_OscConfig+0x270>)
 8003b46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b4a:	6013      	str	r3, [r2, #0]
 8003b4c:	e014      	b.n	8003b78 <HAL_RCC_OscConfig+0x298>
 8003b4e:	bf00      	nop
 8003b50:	40021000 	.word	0x40021000
 8003b54:	0800832c 	.word	0x0800832c
 8003b58:	20000000 	.word	0x20000000
 8003b5c:	20000004 	.word	0x20000004
 8003b60:	4ba0      	ldr	r3, [pc, #640]	@ (8003de4 <HAL_RCC_OscConfig+0x504>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a9f      	ldr	r2, [pc, #636]	@ (8003de4 <HAL_RCC_OscConfig+0x504>)
 8003b66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b6a:	6013      	str	r3, [r2, #0]
 8003b6c:	4b9d      	ldr	r3, [pc, #628]	@ (8003de4 <HAL_RCC_OscConfig+0x504>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a9c      	ldr	r2, [pc, #624]	@ (8003de4 <HAL_RCC_OscConfig+0x504>)
 8003b72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d013      	beq.n	8003ba8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b80:	f7fd fe4a 	bl	8001818 <HAL_GetTick>
 8003b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b86:	e008      	b.n	8003b9a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b88:	f7fd fe46 	bl	8001818 <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	2b64      	cmp	r3, #100	@ 0x64
 8003b94:	d901      	bls.n	8003b9a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e276      	b.n	8004088 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b9a:	4b92      	ldr	r3, [pc, #584]	@ (8003de4 <HAL_RCC_OscConfig+0x504>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d0f0      	beq.n	8003b88 <HAL_RCC_OscConfig+0x2a8>
 8003ba6:	e014      	b.n	8003bd2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ba8:	f7fd fe36 	bl	8001818 <HAL_GetTick>
 8003bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bae:	e008      	b.n	8003bc2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bb0:	f7fd fe32 	bl	8001818 <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	2b64      	cmp	r3, #100	@ 0x64
 8003bbc:	d901      	bls.n	8003bc2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e262      	b.n	8004088 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bc2:	4b88      	ldr	r3, [pc, #544]	@ (8003de4 <HAL_RCC_OscConfig+0x504>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d1f0      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x2d0>
 8003bce:	e000      	b.n	8003bd2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0302 	and.w	r3, r3, #2
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d060      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	2b04      	cmp	r3, #4
 8003be2:	d005      	beq.n	8003bf0 <HAL_RCC_OscConfig+0x310>
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	2b0c      	cmp	r3, #12
 8003be8:	d119      	bne.n	8003c1e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	d116      	bne.n	8003c1e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bf0:	4b7c      	ldr	r3, [pc, #496]	@ (8003de4 <HAL_RCC_OscConfig+0x504>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d005      	beq.n	8003c08 <HAL_RCC_OscConfig+0x328>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d101      	bne.n	8003c08 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e23f      	b.n	8004088 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c08:	4b76      	ldr	r3, [pc, #472]	@ (8003de4 <HAL_RCC_OscConfig+0x504>)
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	691b      	ldr	r3, [r3, #16]
 8003c14:	061b      	lsls	r3, r3, #24
 8003c16:	4973      	ldr	r1, [pc, #460]	@ (8003de4 <HAL_RCC_OscConfig+0x504>)
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c1c:	e040      	b.n	8003ca0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d023      	beq.n	8003c6e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c26:	4b6f      	ldr	r3, [pc, #444]	@ (8003de4 <HAL_RCC_OscConfig+0x504>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a6e      	ldr	r2, [pc, #440]	@ (8003de4 <HAL_RCC_OscConfig+0x504>)
 8003c2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c32:	f7fd fdf1 	bl	8001818 <HAL_GetTick>
 8003c36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c38:	e008      	b.n	8003c4c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c3a:	f7fd fded 	bl	8001818 <HAL_GetTick>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	d901      	bls.n	8003c4c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e21d      	b.n	8004088 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c4c:	4b65      	ldr	r3, [pc, #404]	@ (8003de4 <HAL_RCC_OscConfig+0x504>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d0f0      	beq.n	8003c3a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c58:	4b62      	ldr	r3, [pc, #392]	@ (8003de4 <HAL_RCC_OscConfig+0x504>)
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	061b      	lsls	r3, r3, #24
 8003c66:	495f      	ldr	r1, [pc, #380]	@ (8003de4 <HAL_RCC_OscConfig+0x504>)
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	604b      	str	r3, [r1, #4]
 8003c6c:	e018      	b.n	8003ca0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c6e:	4b5d      	ldr	r3, [pc, #372]	@ (8003de4 <HAL_RCC_OscConfig+0x504>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a5c      	ldr	r2, [pc, #368]	@ (8003de4 <HAL_RCC_OscConfig+0x504>)
 8003c74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c7a:	f7fd fdcd 	bl	8001818 <HAL_GetTick>
 8003c7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c80:	e008      	b.n	8003c94 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c82:	f7fd fdc9 	bl	8001818 <HAL_GetTick>
 8003c86:	4602      	mov	r2, r0
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	d901      	bls.n	8003c94 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003c90:	2303      	movs	r3, #3
 8003c92:	e1f9      	b.n	8004088 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c94:	4b53      	ldr	r3, [pc, #332]	@ (8003de4 <HAL_RCC_OscConfig+0x504>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d1f0      	bne.n	8003c82 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0308 	and.w	r3, r3, #8
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d03c      	beq.n	8003d26 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	695b      	ldr	r3, [r3, #20]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d01c      	beq.n	8003cee <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cb4:	4b4b      	ldr	r3, [pc, #300]	@ (8003de4 <HAL_RCC_OscConfig+0x504>)
 8003cb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cba:	4a4a      	ldr	r2, [pc, #296]	@ (8003de4 <HAL_RCC_OscConfig+0x504>)
 8003cbc:	f043 0301 	orr.w	r3, r3, #1
 8003cc0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cc4:	f7fd fda8 	bl	8001818 <HAL_GetTick>
 8003cc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003cca:	e008      	b.n	8003cde <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ccc:	f7fd fda4 	bl	8001818 <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d901      	bls.n	8003cde <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e1d4      	b.n	8004088 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003cde:	4b41      	ldr	r3, [pc, #260]	@ (8003de4 <HAL_RCC_OscConfig+0x504>)
 8003ce0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ce4:	f003 0302 	and.w	r3, r3, #2
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d0ef      	beq.n	8003ccc <HAL_RCC_OscConfig+0x3ec>
 8003cec:	e01b      	b.n	8003d26 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cee:	4b3d      	ldr	r3, [pc, #244]	@ (8003de4 <HAL_RCC_OscConfig+0x504>)
 8003cf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cf4:	4a3b      	ldr	r2, [pc, #236]	@ (8003de4 <HAL_RCC_OscConfig+0x504>)
 8003cf6:	f023 0301 	bic.w	r3, r3, #1
 8003cfa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cfe:	f7fd fd8b 	bl	8001818 <HAL_GetTick>
 8003d02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d04:	e008      	b.n	8003d18 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d06:	f7fd fd87 	bl	8001818 <HAL_GetTick>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d901      	bls.n	8003d18 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003d14:	2303      	movs	r3, #3
 8003d16:	e1b7      	b.n	8004088 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d18:	4b32      	ldr	r3, [pc, #200]	@ (8003de4 <HAL_RCC_OscConfig+0x504>)
 8003d1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d1e:	f003 0302 	and.w	r3, r3, #2
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d1ef      	bne.n	8003d06 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0304 	and.w	r3, r3, #4
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	f000 80a6 	beq.w	8003e80 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d34:	2300      	movs	r3, #0
 8003d36:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003d38:	4b2a      	ldr	r3, [pc, #168]	@ (8003de4 <HAL_RCC_OscConfig+0x504>)
 8003d3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d10d      	bne.n	8003d60 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d44:	4b27      	ldr	r3, [pc, #156]	@ (8003de4 <HAL_RCC_OscConfig+0x504>)
 8003d46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d48:	4a26      	ldr	r2, [pc, #152]	@ (8003de4 <HAL_RCC_OscConfig+0x504>)
 8003d4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d4e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d50:	4b24      	ldr	r3, [pc, #144]	@ (8003de4 <HAL_RCC_OscConfig+0x504>)
 8003d52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d58:	60bb      	str	r3, [r7, #8]
 8003d5a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d60:	4b21      	ldr	r3, [pc, #132]	@ (8003de8 <HAL_RCC_OscConfig+0x508>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d118      	bne.n	8003d9e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d6c:	4b1e      	ldr	r3, [pc, #120]	@ (8003de8 <HAL_RCC_OscConfig+0x508>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a1d      	ldr	r2, [pc, #116]	@ (8003de8 <HAL_RCC_OscConfig+0x508>)
 8003d72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d76:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d78:	f7fd fd4e 	bl	8001818 <HAL_GetTick>
 8003d7c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d7e:	e008      	b.n	8003d92 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d80:	f7fd fd4a 	bl	8001818 <HAL_GetTick>
 8003d84:	4602      	mov	r2, r0
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d901      	bls.n	8003d92 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e17a      	b.n	8004088 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d92:	4b15      	ldr	r3, [pc, #84]	@ (8003de8 <HAL_RCC_OscConfig+0x508>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d0f0      	beq.n	8003d80 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d108      	bne.n	8003db8 <HAL_RCC_OscConfig+0x4d8>
 8003da6:	4b0f      	ldr	r3, [pc, #60]	@ (8003de4 <HAL_RCC_OscConfig+0x504>)
 8003da8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dac:	4a0d      	ldr	r2, [pc, #52]	@ (8003de4 <HAL_RCC_OscConfig+0x504>)
 8003dae:	f043 0301 	orr.w	r3, r3, #1
 8003db2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003db6:	e029      	b.n	8003e0c <HAL_RCC_OscConfig+0x52c>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	2b05      	cmp	r3, #5
 8003dbe:	d115      	bne.n	8003dec <HAL_RCC_OscConfig+0x50c>
 8003dc0:	4b08      	ldr	r3, [pc, #32]	@ (8003de4 <HAL_RCC_OscConfig+0x504>)
 8003dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dc6:	4a07      	ldr	r2, [pc, #28]	@ (8003de4 <HAL_RCC_OscConfig+0x504>)
 8003dc8:	f043 0304 	orr.w	r3, r3, #4
 8003dcc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003dd0:	4b04      	ldr	r3, [pc, #16]	@ (8003de4 <HAL_RCC_OscConfig+0x504>)
 8003dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dd6:	4a03      	ldr	r2, [pc, #12]	@ (8003de4 <HAL_RCC_OscConfig+0x504>)
 8003dd8:	f043 0301 	orr.w	r3, r3, #1
 8003ddc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003de0:	e014      	b.n	8003e0c <HAL_RCC_OscConfig+0x52c>
 8003de2:	bf00      	nop
 8003de4:	40021000 	.word	0x40021000
 8003de8:	40007000 	.word	0x40007000
 8003dec:	4b9c      	ldr	r3, [pc, #624]	@ (8004060 <HAL_RCC_OscConfig+0x780>)
 8003dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003df2:	4a9b      	ldr	r2, [pc, #620]	@ (8004060 <HAL_RCC_OscConfig+0x780>)
 8003df4:	f023 0301 	bic.w	r3, r3, #1
 8003df8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003dfc:	4b98      	ldr	r3, [pc, #608]	@ (8004060 <HAL_RCC_OscConfig+0x780>)
 8003dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e02:	4a97      	ldr	r2, [pc, #604]	@ (8004060 <HAL_RCC_OscConfig+0x780>)
 8003e04:	f023 0304 	bic.w	r3, r3, #4
 8003e08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d016      	beq.n	8003e42 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e14:	f7fd fd00 	bl	8001818 <HAL_GetTick>
 8003e18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e1a:	e00a      	b.n	8003e32 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e1c:	f7fd fcfc 	bl	8001818 <HAL_GetTick>
 8003e20:	4602      	mov	r2, r0
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d901      	bls.n	8003e32 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e12a      	b.n	8004088 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e32:	4b8b      	ldr	r3, [pc, #556]	@ (8004060 <HAL_RCC_OscConfig+0x780>)
 8003e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e38:	f003 0302 	and.w	r3, r3, #2
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d0ed      	beq.n	8003e1c <HAL_RCC_OscConfig+0x53c>
 8003e40:	e015      	b.n	8003e6e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e42:	f7fd fce9 	bl	8001818 <HAL_GetTick>
 8003e46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e48:	e00a      	b.n	8003e60 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e4a:	f7fd fce5 	bl	8001818 <HAL_GetTick>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d901      	bls.n	8003e60 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	e113      	b.n	8004088 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e60:	4b7f      	ldr	r3, [pc, #508]	@ (8004060 <HAL_RCC_OscConfig+0x780>)
 8003e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e66:	f003 0302 	and.w	r3, r3, #2
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d1ed      	bne.n	8003e4a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e6e:	7ffb      	ldrb	r3, [r7, #31]
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d105      	bne.n	8003e80 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e74:	4b7a      	ldr	r3, [pc, #488]	@ (8004060 <HAL_RCC_OscConfig+0x780>)
 8003e76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e78:	4a79      	ldr	r2, [pc, #484]	@ (8004060 <HAL_RCC_OscConfig+0x780>)
 8003e7a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e7e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	f000 80fe 	beq.w	8004086 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	f040 80d0 	bne.w	8004034 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003e94:	4b72      	ldr	r3, [pc, #456]	@ (8004060 <HAL_RCC_OscConfig+0x780>)
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	f003 0203 	and.w	r2, r3, #3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d130      	bne.n	8003f0a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eb2:	3b01      	subs	r3, #1
 8003eb4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d127      	bne.n	8003f0a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ec4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d11f      	bne.n	8003f0a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003ed4:	2a07      	cmp	r2, #7
 8003ed6:	bf14      	ite	ne
 8003ed8:	2201      	movne	r2, #1
 8003eda:	2200      	moveq	r2, #0
 8003edc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d113      	bne.n	8003f0a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003eec:	085b      	lsrs	r3, r3, #1
 8003eee:	3b01      	subs	r3, #1
 8003ef0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d109      	bne.n	8003f0a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f00:	085b      	lsrs	r3, r3, #1
 8003f02:	3b01      	subs	r3, #1
 8003f04:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d06e      	beq.n	8003fe8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f0a:	69bb      	ldr	r3, [r7, #24]
 8003f0c:	2b0c      	cmp	r3, #12
 8003f0e:	d069      	beq.n	8003fe4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003f10:	4b53      	ldr	r3, [pc, #332]	@ (8004060 <HAL_RCC_OscConfig+0x780>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d105      	bne.n	8003f28 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003f1c:	4b50      	ldr	r3, [pc, #320]	@ (8004060 <HAL_RCC_OscConfig+0x780>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d001      	beq.n	8003f2c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e0ad      	b.n	8004088 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003f2c:	4b4c      	ldr	r3, [pc, #304]	@ (8004060 <HAL_RCC_OscConfig+0x780>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a4b      	ldr	r2, [pc, #300]	@ (8004060 <HAL_RCC_OscConfig+0x780>)
 8003f32:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f36:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f38:	f7fd fc6e 	bl	8001818 <HAL_GetTick>
 8003f3c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f3e:	e008      	b.n	8003f52 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f40:	f7fd fc6a 	bl	8001818 <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	2b02      	cmp	r3, #2
 8003f4c:	d901      	bls.n	8003f52 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e09a      	b.n	8004088 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f52:	4b43      	ldr	r3, [pc, #268]	@ (8004060 <HAL_RCC_OscConfig+0x780>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d1f0      	bne.n	8003f40 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f5e:	4b40      	ldr	r3, [pc, #256]	@ (8004060 <HAL_RCC_OscConfig+0x780>)
 8003f60:	68da      	ldr	r2, [r3, #12]
 8003f62:	4b40      	ldr	r3, [pc, #256]	@ (8004064 <HAL_RCC_OscConfig+0x784>)
 8003f64:	4013      	ands	r3, r2
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003f6e:	3a01      	subs	r2, #1
 8003f70:	0112      	lsls	r2, r2, #4
 8003f72:	4311      	orrs	r1, r2
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003f78:	0212      	lsls	r2, r2, #8
 8003f7a:	4311      	orrs	r1, r2
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003f80:	0852      	lsrs	r2, r2, #1
 8003f82:	3a01      	subs	r2, #1
 8003f84:	0552      	lsls	r2, r2, #21
 8003f86:	4311      	orrs	r1, r2
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003f8c:	0852      	lsrs	r2, r2, #1
 8003f8e:	3a01      	subs	r2, #1
 8003f90:	0652      	lsls	r2, r2, #25
 8003f92:	4311      	orrs	r1, r2
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003f98:	0912      	lsrs	r2, r2, #4
 8003f9a:	0452      	lsls	r2, r2, #17
 8003f9c:	430a      	orrs	r2, r1
 8003f9e:	4930      	ldr	r1, [pc, #192]	@ (8004060 <HAL_RCC_OscConfig+0x780>)
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003fa4:	4b2e      	ldr	r3, [pc, #184]	@ (8004060 <HAL_RCC_OscConfig+0x780>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a2d      	ldr	r2, [pc, #180]	@ (8004060 <HAL_RCC_OscConfig+0x780>)
 8003faa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003fae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003fb0:	4b2b      	ldr	r3, [pc, #172]	@ (8004060 <HAL_RCC_OscConfig+0x780>)
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	4a2a      	ldr	r2, [pc, #168]	@ (8004060 <HAL_RCC_OscConfig+0x780>)
 8003fb6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003fba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003fbc:	f7fd fc2c 	bl	8001818 <HAL_GetTick>
 8003fc0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fc2:	e008      	b.n	8003fd6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fc4:	f7fd fc28 	bl	8001818 <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	2b02      	cmp	r3, #2
 8003fd0:	d901      	bls.n	8003fd6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	e058      	b.n	8004088 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fd6:	4b22      	ldr	r3, [pc, #136]	@ (8004060 <HAL_RCC_OscConfig+0x780>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d0f0      	beq.n	8003fc4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003fe2:	e050      	b.n	8004086 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e04f      	b.n	8004088 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fe8:	4b1d      	ldr	r3, [pc, #116]	@ (8004060 <HAL_RCC_OscConfig+0x780>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d148      	bne.n	8004086 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003ff4:	4b1a      	ldr	r3, [pc, #104]	@ (8004060 <HAL_RCC_OscConfig+0x780>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a19      	ldr	r2, [pc, #100]	@ (8004060 <HAL_RCC_OscConfig+0x780>)
 8003ffa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ffe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004000:	4b17      	ldr	r3, [pc, #92]	@ (8004060 <HAL_RCC_OscConfig+0x780>)
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	4a16      	ldr	r2, [pc, #88]	@ (8004060 <HAL_RCC_OscConfig+0x780>)
 8004006:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800400a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800400c:	f7fd fc04 	bl	8001818 <HAL_GetTick>
 8004010:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004012:	e008      	b.n	8004026 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004014:	f7fd fc00 	bl	8001818 <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	2b02      	cmp	r3, #2
 8004020:	d901      	bls.n	8004026 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e030      	b.n	8004088 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004026:	4b0e      	ldr	r3, [pc, #56]	@ (8004060 <HAL_RCC_OscConfig+0x780>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d0f0      	beq.n	8004014 <HAL_RCC_OscConfig+0x734>
 8004032:	e028      	b.n	8004086 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	2b0c      	cmp	r3, #12
 8004038:	d023      	beq.n	8004082 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800403a:	4b09      	ldr	r3, [pc, #36]	@ (8004060 <HAL_RCC_OscConfig+0x780>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a08      	ldr	r2, [pc, #32]	@ (8004060 <HAL_RCC_OscConfig+0x780>)
 8004040:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004044:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004046:	f7fd fbe7 	bl	8001818 <HAL_GetTick>
 800404a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800404c:	e00c      	b.n	8004068 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800404e:	f7fd fbe3 	bl	8001818 <HAL_GetTick>
 8004052:	4602      	mov	r2, r0
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	1ad3      	subs	r3, r2, r3
 8004058:	2b02      	cmp	r3, #2
 800405a:	d905      	bls.n	8004068 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	e013      	b.n	8004088 <HAL_RCC_OscConfig+0x7a8>
 8004060:	40021000 	.word	0x40021000
 8004064:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004068:	4b09      	ldr	r3, [pc, #36]	@ (8004090 <HAL_RCC_OscConfig+0x7b0>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004070:	2b00      	cmp	r3, #0
 8004072:	d1ec      	bne.n	800404e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004074:	4b06      	ldr	r3, [pc, #24]	@ (8004090 <HAL_RCC_OscConfig+0x7b0>)
 8004076:	68da      	ldr	r2, [r3, #12]
 8004078:	4905      	ldr	r1, [pc, #20]	@ (8004090 <HAL_RCC_OscConfig+0x7b0>)
 800407a:	4b06      	ldr	r3, [pc, #24]	@ (8004094 <HAL_RCC_OscConfig+0x7b4>)
 800407c:	4013      	ands	r3, r2
 800407e:	60cb      	str	r3, [r1, #12]
 8004080:	e001      	b.n	8004086 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e000      	b.n	8004088 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004086:	2300      	movs	r3, #0
}
 8004088:	4618      	mov	r0, r3
 800408a:	3720      	adds	r7, #32
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}
 8004090:	40021000 	.word	0x40021000
 8004094:	feeefffc 	.word	0xfeeefffc

08004098 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d101      	bne.n	80040ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e0e7      	b.n	800427c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040ac:	4b75      	ldr	r3, [pc, #468]	@ (8004284 <HAL_RCC_ClockConfig+0x1ec>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0307 	and.w	r3, r3, #7
 80040b4:	683a      	ldr	r2, [r7, #0]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d910      	bls.n	80040dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ba:	4b72      	ldr	r3, [pc, #456]	@ (8004284 <HAL_RCC_ClockConfig+0x1ec>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f023 0207 	bic.w	r2, r3, #7
 80040c2:	4970      	ldr	r1, [pc, #448]	@ (8004284 <HAL_RCC_ClockConfig+0x1ec>)
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ca:	4b6e      	ldr	r3, [pc, #440]	@ (8004284 <HAL_RCC_ClockConfig+0x1ec>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 0307 	and.w	r3, r3, #7
 80040d2:	683a      	ldr	r2, [r7, #0]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d001      	beq.n	80040dc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e0cf      	b.n	800427c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0302 	and.w	r3, r3, #2
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d010      	beq.n	800410a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	689a      	ldr	r2, [r3, #8]
 80040ec:	4b66      	ldr	r3, [pc, #408]	@ (8004288 <HAL_RCC_ClockConfig+0x1f0>)
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d908      	bls.n	800410a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040f8:	4b63      	ldr	r3, [pc, #396]	@ (8004288 <HAL_RCC_ClockConfig+0x1f0>)
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	4960      	ldr	r1, [pc, #384]	@ (8004288 <HAL_RCC_ClockConfig+0x1f0>)
 8004106:	4313      	orrs	r3, r2
 8004108:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0301 	and.w	r3, r3, #1
 8004112:	2b00      	cmp	r3, #0
 8004114:	d04c      	beq.n	80041b0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	2b03      	cmp	r3, #3
 800411c:	d107      	bne.n	800412e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800411e:	4b5a      	ldr	r3, [pc, #360]	@ (8004288 <HAL_RCC_ClockConfig+0x1f0>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d121      	bne.n	800416e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e0a6      	b.n	800427c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	2b02      	cmp	r3, #2
 8004134:	d107      	bne.n	8004146 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004136:	4b54      	ldr	r3, [pc, #336]	@ (8004288 <HAL_RCC_ClockConfig+0x1f0>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d115      	bne.n	800416e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e09a      	b.n	800427c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d107      	bne.n	800415e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800414e:	4b4e      	ldr	r3, [pc, #312]	@ (8004288 <HAL_RCC_ClockConfig+0x1f0>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0302 	and.w	r3, r3, #2
 8004156:	2b00      	cmp	r3, #0
 8004158:	d109      	bne.n	800416e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e08e      	b.n	800427c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800415e:	4b4a      	ldr	r3, [pc, #296]	@ (8004288 <HAL_RCC_ClockConfig+0x1f0>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004166:	2b00      	cmp	r3, #0
 8004168:	d101      	bne.n	800416e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e086      	b.n	800427c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800416e:	4b46      	ldr	r3, [pc, #280]	@ (8004288 <HAL_RCC_ClockConfig+0x1f0>)
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	f023 0203 	bic.w	r2, r3, #3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	4943      	ldr	r1, [pc, #268]	@ (8004288 <HAL_RCC_ClockConfig+0x1f0>)
 800417c:	4313      	orrs	r3, r2
 800417e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004180:	f7fd fb4a 	bl	8001818 <HAL_GetTick>
 8004184:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004186:	e00a      	b.n	800419e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004188:	f7fd fb46 	bl	8001818 <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004196:	4293      	cmp	r3, r2
 8004198:	d901      	bls.n	800419e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e06e      	b.n	800427c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800419e:	4b3a      	ldr	r3, [pc, #232]	@ (8004288 <HAL_RCC_ClockConfig+0x1f0>)
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f003 020c 	and.w	r2, r3, #12
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d1eb      	bne.n	8004188 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 0302 	and.w	r3, r3, #2
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d010      	beq.n	80041de <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	689a      	ldr	r2, [r3, #8]
 80041c0:	4b31      	ldr	r3, [pc, #196]	@ (8004288 <HAL_RCC_ClockConfig+0x1f0>)
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d208      	bcs.n	80041de <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041cc:	4b2e      	ldr	r3, [pc, #184]	@ (8004288 <HAL_RCC_ClockConfig+0x1f0>)
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	492b      	ldr	r1, [pc, #172]	@ (8004288 <HAL_RCC_ClockConfig+0x1f0>)
 80041da:	4313      	orrs	r3, r2
 80041dc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041de:	4b29      	ldr	r3, [pc, #164]	@ (8004284 <HAL_RCC_ClockConfig+0x1ec>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0307 	and.w	r3, r3, #7
 80041e6:	683a      	ldr	r2, [r7, #0]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d210      	bcs.n	800420e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041ec:	4b25      	ldr	r3, [pc, #148]	@ (8004284 <HAL_RCC_ClockConfig+0x1ec>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f023 0207 	bic.w	r2, r3, #7
 80041f4:	4923      	ldr	r1, [pc, #140]	@ (8004284 <HAL_RCC_ClockConfig+0x1ec>)
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041fc:	4b21      	ldr	r3, [pc, #132]	@ (8004284 <HAL_RCC_ClockConfig+0x1ec>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0307 	and.w	r3, r3, #7
 8004204:	683a      	ldr	r2, [r7, #0]
 8004206:	429a      	cmp	r2, r3
 8004208:	d001      	beq.n	800420e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e036      	b.n	800427c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0304 	and.w	r3, r3, #4
 8004216:	2b00      	cmp	r3, #0
 8004218:	d008      	beq.n	800422c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800421a:	4b1b      	ldr	r3, [pc, #108]	@ (8004288 <HAL_RCC_ClockConfig+0x1f0>)
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	4918      	ldr	r1, [pc, #96]	@ (8004288 <HAL_RCC_ClockConfig+0x1f0>)
 8004228:	4313      	orrs	r3, r2
 800422a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0308 	and.w	r3, r3, #8
 8004234:	2b00      	cmp	r3, #0
 8004236:	d009      	beq.n	800424c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004238:	4b13      	ldr	r3, [pc, #76]	@ (8004288 <HAL_RCC_ClockConfig+0x1f0>)
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	691b      	ldr	r3, [r3, #16]
 8004244:	00db      	lsls	r3, r3, #3
 8004246:	4910      	ldr	r1, [pc, #64]	@ (8004288 <HAL_RCC_ClockConfig+0x1f0>)
 8004248:	4313      	orrs	r3, r2
 800424a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800424c:	f000 f824 	bl	8004298 <HAL_RCC_GetSysClockFreq>
 8004250:	4602      	mov	r2, r0
 8004252:	4b0d      	ldr	r3, [pc, #52]	@ (8004288 <HAL_RCC_ClockConfig+0x1f0>)
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	091b      	lsrs	r3, r3, #4
 8004258:	f003 030f 	and.w	r3, r3, #15
 800425c:	490b      	ldr	r1, [pc, #44]	@ (800428c <HAL_RCC_ClockConfig+0x1f4>)
 800425e:	5ccb      	ldrb	r3, [r1, r3]
 8004260:	f003 031f 	and.w	r3, r3, #31
 8004264:	fa22 f303 	lsr.w	r3, r2, r3
 8004268:	4a09      	ldr	r2, [pc, #36]	@ (8004290 <HAL_RCC_ClockConfig+0x1f8>)
 800426a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800426c:	4b09      	ldr	r3, [pc, #36]	@ (8004294 <HAL_RCC_ClockConfig+0x1fc>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4618      	mov	r0, r3
 8004272:	f7fd fa81 	bl	8001778 <HAL_InitTick>
 8004276:	4603      	mov	r3, r0
 8004278:	72fb      	strb	r3, [r7, #11]

  return status;
 800427a:	7afb      	ldrb	r3, [r7, #11]
}
 800427c:	4618      	mov	r0, r3
 800427e:	3710      	adds	r7, #16
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}
 8004284:	40022000 	.word	0x40022000
 8004288:	40021000 	.word	0x40021000
 800428c:	0800832c 	.word	0x0800832c
 8004290:	20000000 	.word	0x20000000
 8004294:	20000004 	.word	0x20000004

08004298 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004298:	b480      	push	{r7}
 800429a:	b089      	sub	sp, #36	@ 0x24
 800429c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800429e:	2300      	movs	r3, #0
 80042a0:	61fb      	str	r3, [r7, #28]
 80042a2:	2300      	movs	r3, #0
 80042a4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042a6:	4b3e      	ldr	r3, [pc, #248]	@ (80043a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	f003 030c 	and.w	r3, r3, #12
 80042ae:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042b0:	4b3b      	ldr	r3, [pc, #236]	@ (80043a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	f003 0303 	and.w	r3, r3, #3
 80042b8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d005      	beq.n	80042cc <HAL_RCC_GetSysClockFreq+0x34>
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	2b0c      	cmp	r3, #12
 80042c4:	d121      	bne.n	800430a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d11e      	bne.n	800430a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80042cc:	4b34      	ldr	r3, [pc, #208]	@ (80043a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0308 	and.w	r3, r3, #8
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d107      	bne.n	80042e8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80042d8:	4b31      	ldr	r3, [pc, #196]	@ (80043a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80042da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042de:	0a1b      	lsrs	r3, r3, #8
 80042e0:	f003 030f 	and.w	r3, r3, #15
 80042e4:	61fb      	str	r3, [r7, #28]
 80042e6:	e005      	b.n	80042f4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80042e8:	4b2d      	ldr	r3, [pc, #180]	@ (80043a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	091b      	lsrs	r3, r3, #4
 80042ee:	f003 030f 	and.w	r3, r3, #15
 80042f2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80042f4:	4a2b      	ldr	r2, [pc, #172]	@ (80043a4 <HAL_RCC_GetSysClockFreq+0x10c>)
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042fc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d10d      	bne.n	8004320 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004308:	e00a      	b.n	8004320 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	2b04      	cmp	r3, #4
 800430e:	d102      	bne.n	8004316 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004310:	4b25      	ldr	r3, [pc, #148]	@ (80043a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004312:	61bb      	str	r3, [r7, #24]
 8004314:	e004      	b.n	8004320 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	2b08      	cmp	r3, #8
 800431a:	d101      	bne.n	8004320 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800431c:	4b23      	ldr	r3, [pc, #140]	@ (80043ac <HAL_RCC_GetSysClockFreq+0x114>)
 800431e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	2b0c      	cmp	r3, #12
 8004324:	d134      	bne.n	8004390 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004326:	4b1e      	ldr	r3, [pc, #120]	@ (80043a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	f003 0303 	and.w	r3, r3, #3
 800432e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	2b02      	cmp	r3, #2
 8004334:	d003      	beq.n	800433e <HAL_RCC_GetSysClockFreq+0xa6>
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	2b03      	cmp	r3, #3
 800433a:	d003      	beq.n	8004344 <HAL_RCC_GetSysClockFreq+0xac>
 800433c:	e005      	b.n	800434a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800433e:	4b1a      	ldr	r3, [pc, #104]	@ (80043a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004340:	617b      	str	r3, [r7, #20]
      break;
 8004342:	e005      	b.n	8004350 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004344:	4b19      	ldr	r3, [pc, #100]	@ (80043ac <HAL_RCC_GetSysClockFreq+0x114>)
 8004346:	617b      	str	r3, [r7, #20]
      break;
 8004348:	e002      	b.n	8004350 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	617b      	str	r3, [r7, #20]
      break;
 800434e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004350:	4b13      	ldr	r3, [pc, #76]	@ (80043a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	091b      	lsrs	r3, r3, #4
 8004356:	f003 0307 	and.w	r3, r3, #7
 800435a:	3301      	adds	r3, #1
 800435c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800435e:	4b10      	ldr	r3, [pc, #64]	@ (80043a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	0a1b      	lsrs	r3, r3, #8
 8004364:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004368:	697a      	ldr	r2, [r7, #20]
 800436a:	fb03 f202 	mul.w	r2, r3, r2
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	fbb2 f3f3 	udiv	r3, r2, r3
 8004374:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004376:	4b0a      	ldr	r3, [pc, #40]	@ (80043a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	0e5b      	lsrs	r3, r3, #25
 800437c:	f003 0303 	and.w	r3, r3, #3
 8004380:	3301      	adds	r3, #1
 8004382:	005b      	lsls	r3, r3, #1
 8004384:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004386:	697a      	ldr	r2, [r7, #20]
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	fbb2 f3f3 	udiv	r3, r2, r3
 800438e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004390:	69bb      	ldr	r3, [r7, #24]
}
 8004392:	4618      	mov	r0, r3
 8004394:	3724      	adds	r7, #36	@ 0x24
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr
 800439e:	bf00      	nop
 80043a0:	40021000 	.word	0x40021000
 80043a4:	08008344 	.word	0x08008344
 80043a8:	00f42400 	.word	0x00f42400
 80043ac:	007a1200 	.word	0x007a1200

080043b0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043b0:	b480      	push	{r7}
 80043b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043b4:	4b03      	ldr	r3, [pc, #12]	@ (80043c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80043b6:	681b      	ldr	r3, [r3, #0]
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr
 80043c2:	bf00      	nop
 80043c4:	20000000 	.word	0x20000000

080043c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80043cc:	f7ff fff0 	bl	80043b0 <HAL_RCC_GetHCLKFreq>
 80043d0:	4602      	mov	r2, r0
 80043d2:	4b06      	ldr	r3, [pc, #24]	@ (80043ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	0a1b      	lsrs	r3, r3, #8
 80043d8:	f003 0307 	and.w	r3, r3, #7
 80043dc:	4904      	ldr	r1, [pc, #16]	@ (80043f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80043de:	5ccb      	ldrb	r3, [r1, r3]
 80043e0:	f003 031f 	and.w	r3, r3, #31
 80043e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	40021000 	.word	0x40021000
 80043f0:	0800833c 	.word	0x0800833c

080043f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80043f8:	f7ff ffda 	bl	80043b0 <HAL_RCC_GetHCLKFreq>
 80043fc:	4602      	mov	r2, r0
 80043fe:	4b06      	ldr	r3, [pc, #24]	@ (8004418 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	0adb      	lsrs	r3, r3, #11
 8004404:	f003 0307 	and.w	r3, r3, #7
 8004408:	4904      	ldr	r1, [pc, #16]	@ (800441c <HAL_RCC_GetPCLK2Freq+0x28>)
 800440a:	5ccb      	ldrb	r3, [r1, r3]
 800440c:	f003 031f 	and.w	r3, r3, #31
 8004410:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004414:	4618      	mov	r0, r3
 8004416:	bd80      	pop	{r7, pc}
 8004418:	40021000 	.word	0x40021000
 800441c:	0800833c 	.word	0x0800833c

08004420 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b086      	sub	sp, #24
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004428:	2300      	movs	r3, #0
 800442a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800442c:	4b2a      	ldr	r3, [pc, #168]	@ (80044d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800442e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004430:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004434:	2b00      	cmp	r3, #0
 8004436:	d003      	beq.n	8004440 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004438:	f7ff f9ee 	bl	8003818 <HAL_PWREx_GetVoltageRange>
 800443c:	6178      	str	r0, [r7, #20]
 800443e:	e014      	b.n	800446a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004440:	4b25      	ldr	r3, [pc, #148]	@ (80044d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004442:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004444:	4a24      	ldr	r2, [pc, #144]	@ (80044d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004446:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800444a:	6593      	str	r3, [r2, #88]	@ 0x58
 800444c:	4b22      	ldr	r3, [pc, #136]	@ (80044d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800444e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004450:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004454:	60fb      	str	r3, [r7, #12]
 8004456:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004458:	f7ff f9de 	bl	8003818 <HAL_PWREx_GetVoltageRange>
 800445c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800445e:	4b1e      	ldr	r3, [pc, #120]	@ (80044d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004460:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004462:	4a1d      	ldr	r2, [pc, #116]	@ (80044d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004464:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004468:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004470:	d10b      	bne.n	800448a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2b80      	cmp	r3, #128	@ 0x80
 8004476:	d919      	bls.n	80044ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2ba0      	cmp	r3, #160	@ 0xa0
 800447c:	d902      	bls.n	8004484 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800447e:	2302      	movs	r3, #2
 8004480:	613b      	str	r3, [r7, #16]
 8004482:	e013      	b.n	80044ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004484:	2301      	movs	r3, #1
 8004486:	613b      	str	r3, [r7, #16]
 8004488:	e010      	b.n	80044ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2b80      	cmp	r3, #128	@ 0x80
 800448e:	d902      	bls.n	8004496 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004490:	2303      	movs	r3, #3
 8004492:	613b      	str	r3, [r7, #16]
 8004494:	e00a      	b.n	80044ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2b80      	cmp	r3, #128	@ 0x80
 800449a:	d102      	bne.n	80044a2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800449c:	2302      	movs	r3, #2
 800449e:	613b      	str	r3, [r7, #16]
 80044a0:	e004      	b.n	80044ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2b70      	cmp	r3, #112	@ 0x70
 80044a6:	d101      	bne.n	80044ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80044a8:	2301      	movs	r3, #1
 80044aa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80044ac:	4b0b      	ldr	r3, [pc, #44]	@ (80044dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f023 0207 	bic.w	r2, r3, #7
 80044b4:	4909      	ldr	r1, [pc, #36]	@ (80044dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80044bc:	4b07      	ldr	r3, [pc, #28]	@ (80044dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0307 	and.w	r3, r3, #7
 80044c4:	693a      	ldr	r2, [r7, #16]
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d001      	beq.n	80044ce <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e000      	b.n	80044d0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80044ce:	2300      	movs	r3, #0
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3718      	adds	r7, #24
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	40021000 	.word	0x40021000
 80044dc:	40022000 	.word	0x40022000

080044e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b086      	sub	sp, #24
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80044e8:	2300      	movs	r3, #0
 80044ea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80044ec:	2300      	movs	r3, #0
 80044ee:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d041      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004500:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004504:	d02a      	beq.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004506:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800450a:	d824      	bhi.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800450c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004510:	d008      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004512:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004516:	d81e      	bhi.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004518:	2b00      	cmp	r3, #0
 800451a:	d00a      	beq.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800451c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004520:	d010      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004522:	e018      	b.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004524:	4b86      	ldr	r3, [pc, #536]	@ (8004740 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	4a85      	ldr	r2, [pc, #532]	@ (8004740 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800452a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800452e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004530:	e015      	b.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	3304      	adds	r3, #4
 8004536:	2100      	movs	r1, #0
 8004538:	4618      	mov	r0, r3
 800453a:	f000 facb 	bl	8004ad4 <RCCEx_PLLSAI1_Config>
 800453e:	4603      	mov	r3, r0
 8004540:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004542:	e00c      	b.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	3320      	adds	r3, #32
 8004548:	2100      	movs	r1, #0
 800454a:	4618      	mov	r0, r3
 800454c:	f000 fbb6 	bl	8004cbc <RCCEx_PLLSAI2_Config>
 8004550:	4603      	mov	r3, r0
 8004552:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004554:	e003      	b.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	74fb      	strb	r3, [r7, #19]
      break;
 800455a:	e000      	b.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800455c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800455e:	7cfb      	ldrb	r3, [r7, #19]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d10b      	bne.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004564:	4b76      	ldr	r3, [pc, #472]	@ (8004740 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004566:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800456a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004572:	4973      	ldr	r1, [pc, #460]	@ (8004740 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004574:	4313      	orrs	r3, r2
 8004576:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800457a:	e001      	b.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800457c:	7cfb      	ldrb	r3, [r7, #19]
 800457e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004588:	2b00      	cmp	r3, #0
 800458a:	d041      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004590:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004594:	d02a      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004596:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800459a:	d824      	bhi.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800459c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80045a0:	d008      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80045a2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80045a6:	d81e      	bhi.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d00a      	beq.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80045ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80045b0:	d010      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80045b2:	e018      	b.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80045b4:	4b62      	ldr	r3, [pc, #392]	@ (8004740 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	4a61      	ldr	r2, [pc, #388]	@ (8004740 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045be:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80045c0:	e015      	b.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	3304      	adds	r3, #4
 80045c6:	2100      	movs	r1, #0
 80045c8:	4618      	mov	r0, r3
 80045ca:	f000 fa83 	bl	8004ad4 <RCCEx_PLLSAI1_Config>
 80045ce:	4603      	mov	r3, r0
 80045d0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80045d2:	e00c      	b.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	3320      	adds	r3, #32
 80045d8:	2100      	movs	r1, #0
 80045da:	4618      	mov	r0, r3
 80045dc:	f000 fb6e 	bl	8004cbc <RCCEx_PLLSAI2_Config>
 80045e0:	4603      	mov	r3, r0
 80045e2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80045e4:	e003      	b.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	74fb      	strb	r3, [r7, #19]
      break;
 80045ea:	e000      	b.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80045ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045ee:	7cfb      	ldrb	r3, [r7, #19]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d10b      	bne.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80045f4:	4b52      	ldr	r3, [pc, #328]	@ (8004740 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045fa:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004602:	494f      	ldr	r1, [pc, #316]	@ (8004740 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004604:	4313      	orrs	r3, r2
 8004606:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800460a:	e001      	b.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800460c:	7cfb      	ldrb	r3, [r7, #19]
 800460e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004618:	2b00      	cmp	r3, #0
 800461a:	f000 80a0 	beq.w	800475e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800461e:	2300      	movs	r3, #0
 8004620:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004622:	4b47      	ldr	r3, [pc, #284]	@ (8004740 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004624:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004626:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d101      	bne.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800462e:	2301      	movs	r3, #1
 8004630:	e000      	b.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004632:	2300      	movs	r3, #0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d00d      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004638:	4b41      	ldr	r3, [pc, #260]	@ (8004740 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800463a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800463c:	4a40      	ldr	r2, [pc, #256]	@ (8004740 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800463e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004642:	6593      	str	r3, [r2, #88]	@ 0x58
 8004644:	4b3e      	ldr	r3, [pc, #248]	@ (8004740 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004646:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004648:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800464c:	60bb      	str	r3, [r7, #8]
 800464e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004650:	2301      	movs	r3, #1
 8004652:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004654:	4b3b      	ldr	r3, [pc, #236]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a3a      	ldr	r2, [pc, #232]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800465a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800465e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004660:	f7fd f8da 	bl	8001818 <HAL_GetTick>
 8004664:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004666:	e009      	b.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004668:	f7fd f8d6 	bl	8001818 <HAL_GetTick>
 800466c:	4602      	mov	r2, r0
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	2b02      	cmp	r3, #2
 8004674:	d902      	bls.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004676:	2303      	movs	r3, #3
 8004678:	74fb      	strb	r3, [r7, #19]
        break;
 800467a:	e005      	b.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800467c:	4b31      	ldr	r3, [pc, #196]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004684:	2b00      	cmp	r3, #0
 8004686:	d0ef      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004688:	7cfb      	ldrb	r3, [r7, #19]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d15c      	bne.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800468e:	4b2c      	ldr	r3, [pc, #176]	@ (8004740 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004690:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004694:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004698:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d01f      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80046a6:	697a      	ldr	r2, [r7, #20]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d019      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80046ac:	4b24      	ldr	r3, [pc, #144]	@ (8004740 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046b6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80046b8:	4b21      	ldr	r3, [pc, #132]	@ (8004740 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046be:	4a20      	ldr	r2, [pc, #128]	@ (8004740 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80046c8:	4b1d      	ldr	r3, [pc, #116]	@ (8004740 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046ce:	4a1c      	ldr	r2, [pc, #112]	@ (8004740 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80046d8:	4a19      	ldr	r2, [pc, #100]	@ (8004740 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	f003 0301 	and.w	r3, r3, #1
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d016      	beq.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ea:	f7fd f895 	bl	8001818 <HAL_GetTick>
 80046ee:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046f0:	e00b      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046f2:	f7fd f891 	bl	8001818 <HAL_GetTick>
 80046f6:	4602      	mov	r2, r0
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004700:	4293      	cmp	r3, r2
 8004702:	d902      	bls.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004704:	2303      	movs	r3, #3
 8004706:	74fb      	strb	r3, [r7, #19]
            break;
 8004708:	e006      	b.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800470a:	4b0d      	ldr	r3, [pc, #52]	@ (8004740 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800470c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004710:	f003 0302 	and.w	r3, r3, #2
 8004714:	2b00      	cmp	r3, #0
 8004716:	d0ec      	beq.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004718:	7cfb      	ldrb	r3, [r7, #19]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d10c      	bne.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800471e:	4b08      	ldr	r3, [pc, #32]	@ (8004740 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004720:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004724:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800472e:	4904      	ldr	r1, [pc, #16]	@ (8004740 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004730:	4313      	orrs	r3, r2
 8004732:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004736:	e009      	b.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004738:	7cfb      	ldrb	r3, [r7, #19]
 800473a:	74bb      	strb	r3, [r7, #18]
 800473c:	e006      	b.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800473e:	bf00      	nop
 8004740:	40021000 	.word	0x40021000
 8004744:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004748:	7cfb      	ldrb	r3, [r7, #19]
 800474a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800474c:	7c7b      	ldrb	r3, [r7, #17]
 800474e:	2b01      	cmp	r3, #1
 8004750:	d105      	bne.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004752:	4b9e      	ldr	r3, [pc, #632]	@ (80049cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004754:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004756:	4a9d      	ldr	r2, [pc, #628]	@ (80049cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004758:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800475c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0301 	and.w	r3, r3, #1
 8004766:	2b00      	cmp	r3, #0
 8004768:	d00a      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800476a:	4b98      	ldr	r3, [pc, #608]	@ (80049cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800476c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004770:	f023 0203 	bic.w	r2, r3, #3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004778:	4994      	ldr	r1, [pc, #592]	@ (80049cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800477a:	4313      	orrs	r3, r2
 800477c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0302 	and.w	r3, r3, #2
 8004788:	2b00      	cmp	r3, #0
 800478a:	d00a      	beq.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800478c:	4b8f      	ldr	r3, [pc, #572]	@ (80049cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800478e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004792:	f023 020c 	bic.w	r2, r3, #12
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800479a:	498c      	ldr	r1, [pc, #560]	@ (80049cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800479c:	4313      	orrs	r3, r2
 800479e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0304 	and.w	r3, r3, #4
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d00a      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80047ae:	4b87      	ldr	r3, [pc, #540]	@ (80049cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047b4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047bc:	4983      	ldr	r1, [pc, #524]	@ (80049cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047be:	4313      	orrs	r3, r2
 80047c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 0308 	and.w	r3, r3, #8
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d00a      	beq.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80047d0:	4b7e      	ldr	r3, [pc, #504]	@ (80049cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047d6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047de:	497b      	ldr	r1, [pc, #492]	@ (80049cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047e0:	4313      	orrs	r3, r2
 80047e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 0310 	and.w	r3, r3, #16
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d00a      	beq.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80047f2:	4b76      	ldr	r3, [pc, #472]	@ (80049cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047f8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004800:	4972      	ldr	r1, [pc, #456]	@ (80049cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004802:	4313      	orrs	r3, r2
 8004804:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 0320 	and.w	r3, r3, #32
 8004810:	2b00      	cmp	r3, #0
 8004812:	d00a      	beq.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004814:	4b6d      	ldr	r3, [pc, #436]	@ (80049cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004816:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800481a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004822:	496a      	ldr	r1, [pc, #424]	@ (80049cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004824:	4313      	orrs	r3, r2
 8004826:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004832:	2b00      	cmp	r3, #0
 8004834:	d00a      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004836:	4b65      	ldr	r3, [pc, #404]	@ (80049cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004838:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800483c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004844:	4961      	ldr	r1, [pc, #388]	@ (80049cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004846:	4313      	orrs	r3, r2
 8004848:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004854:	2b00      	cmp	r3, #0
 8004856:	d00a      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004858:	4b5c      	ldr	r3, [pc, #368]	@ (80049cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800485a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800485e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004866:	4959      	ldr	r1, [pc, #356]	@ (80049cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004868:	4313      	orrs	r3, r2
 800486a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004876:	2b00      	cmp	r3, #0
 8004878:	d00a      	beq.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800487a:	4b54      	ldr	r3, [pc, #336]	@ (80049cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800487c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004880:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004888:	4950      	ldr	r1, [pc, #320]	@ (80049cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800488a:	4313      	orrs	r3, r2
 800488c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004898:	2b00      	cmp	r3, #0
 800489a:	d00a      	beq.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800489c:	4b4b      	ldr	r3, [pc, #300]	@ (80049cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800489e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048a2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048aa:	4948      	ldr	r1, [pc, #288]	@ (80049cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048ac:	4313      	orrs	r3, r2
 80048ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d00a      	beq.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80048be:	4b43      	ldr	r3, [pc, #268]	@ (80049cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048c4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048cc:	493f      	ldr	r1, [pc, #252]	@ (80049cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048ce:	4313      	orrs	r3, r2
 80048d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d028      	beq.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80048e0:	4b3a      	ldr	r3, [pc, #232]	@ (80049cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048e6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048ee:	4937      	ldr	r1, [pc, #220]	@ (80049cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048f0:	4313      	orrs	r3, r2
 80048f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80048fe:	d106      	bne.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004900:	4b32      	ldr	r3, [pc, #200]	@ (80049cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	4a31      	ldr	r2, [pc, #196]	@ (80049cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004906:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800490a:	60d3      	str	r3, [r2, #12]
 800490c:	e011      	b.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004912:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004916:	d10c      	bne.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	3304      	adds	r3, #4
 800491c:	2101      	movs	r1, #1
 800491e:	4618      	mov	r0, r3
 8004920:	f000 f8d8 	bl	8004ad4 <RCCEx_PLLSAI1_Config>
 8004924:	4603      	mov	r3, r0
 8004926:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004928:	7cfb      	ldrb	r3, [r7, #19]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d001      	beq.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800492e:	7cfb      	ldrb	r3, [r7, #19]
 8004930:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d028      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800493e:	4b23      	ldr	r3, [pc, #140]	@ (80049cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004940:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004944:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800494c:	491f      	ldr	r1, [pc, #124]	@ (80049cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800494e:	4313      	orrs	r3, r2
 8004950:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004958:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800495c:	d106      	bne.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800495e:	4b1b      	ldr	r3, [pc, #108]	@ (80049cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	4a1a      	ldr	r2, [pc, #104]	@ (80049cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004964:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004968:	60d3      	str	r3, [r2, #12]
 800496a:	e011      	b.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004970:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004974:	d10c      	bne.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	3304      	adds	r3, #4
 800497a:	2101      	movs	r1, #1
 800497c:	4618      	mov	r0, r3
 800497e:	f000 f8a9 	bl	8004ad4 <RCCEx_PLLSAI1_Config>
 8004982:	4603      	mov	r3, r0
 8004984:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004986:	7cfb      	ldrb	r3, [r7, #19]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d001      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800498c:	7cfb      	ldrb	r3, [r7, #19]
 800498e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004998:	2b00      	cmp	r3, #0
 800499a:	d02b      	beq.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800499c:	4b0b      	ldr	r3, [pc, #44]	@ (80049cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800499e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049a2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049aa:	4908      	ldr	r1, [pc, #32]	@ (80049cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049ac:	4313      	orrs	r3, r2
 80049ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80049ba:	d109      	bne.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049bc:	4b03      	ldr	r3, [pc, #12]	@ (80049cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	4a02      	ldr	r2, [pc, #8]	@ (80049cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80049c6:	60d3      	str	r3, [r2, #12]
 80049c8:	e014      	b.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80049ca:	bf00      	nop
 80049cc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049d4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80049d8:	d10c      	bne.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	3304      	adds	r3, #4
 80049de:	2101      	movs	r1, #1
 80049e0:	4618      	mov	r0, r3
 80049e2:	f000 f877 	bl	8004ad4 <RCCEx_PLLSAI1_Config>
 80049e6:	4603      	mov	r3, r0
 80049e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80049ea:	7cfb      	ldrb	r3, [r7, #19]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d001      	beq.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80049f0:	7cfb      	ldrb	r3, [r7, #19]
 80049f2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d02f      	beq.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004a00:	4b2b      	ldr	r3, [pc, #172]	@ (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a06:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a0e:	4928      	ldr	r1, [pc, #160]	@ (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a10:	4313      	orrs	r3, r2
 8004a12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004a1e:	d10d      	bne.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	3304      	adds	r3, #4
 8004a24:	2102      	movs	r1, #2
 8004a26:	4618      	mov	r0, r3
 8004a28:	f000 f854 	bl	8004ad4 <RCCEx_PLLSAI1_Config>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a30:	7cfb      	ldrb	r3, [r7, #19]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d014      	beq.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004a36:	7cfb      	ldrb	r3, [r7, #19]
 8004a38:	74bb      	strb	r3, [r7, #18]
 8004a3a:	e011      	b.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004a44:	d10c      	bne.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	3320      	adds	r3, #32
 8004a4a:	2102      	movs	r1, #2
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f000 f935 	bl	8004cbc <RCCEx_PLLSAI2_Config>
 8004a52:	4603      	mov	r3, r0
 8004a54:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a56:	7cfb      	ldrb	r3, [r7, #19]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d001      	beq.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004a5c:	7cfb      	ldrb	r3, [r7, #19]
 8004a5e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d00a      	beq.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004a6c:	4b10      	ldr	r3, [pc, #64]	@ (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a72:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a7a:	490d      	ldr	r1, [pc, #52]	@ (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d00b      	beq.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004a8e:	4b08      	ldr	r3, [pc, #32]	@ (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a94:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a9e:	4904      	ldr	r1, [pc, #16]	@ (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004aa6:	7cbb      	ldrb	r3, [r7, #18]
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3718      	adds	r7, #24
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}
 8004ab0:	40021000 	.word	0x40021000

08004ab4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004ab8:	4b05      	ldr	r3, [pc, #20]	@ (8004ad0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a04      	ldr	r2, [pc, #16]	@ (8004ad0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004abe:	f043 0304 	orr.w	r3, r3, #4
 8004ac2:	6013      	str	r3, [r2, #0]
}
 8004ac4:	bf00      	nop
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr
 8004ace:	bf00      	nop
 8004ad0:	40021000 	.word	0x40021000

08004ad4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b084      	sub	sp, #16
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004ae2:	4b75      	ldr	r3, [pc, #468]	@ (8004cb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	f003 0303 	and.w	r3, r3, #3
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d018      	beq.n	8004b20 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004aee:	4b72      	ldr	r3, [pc, #456]	@ (8004cb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004af0:	68db      	ldr	r3, [r3, #12]
 8004af2:	f003 0203 	and.w	r2, r3, #3
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d10d      	bne.n	8004b1a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
       ||
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d009      	beq.n	8004b1a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004b06:	4b6c      	ldr	r3, [pc, #432]	@ (8004cb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	091b      	lsrs	r3, r3, #4
 8004b0c:	f003 0307 	and.w	r3, r3, #7
 8004b10:	1c5a      	adds	r2, r3, #1
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	685b      	ldr	r3, [r3, #4]
       ||
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d047      	beq.n	8004baa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	73fb      	strb	r3, [r7, #15]
 8004b1e:	e044      	b.n	8004baa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	2b03      	cmp	r3, #3
 8004b26:	d018      	beq.n	8004b5a <RCCEx_PLLSAI1_Config+0x86>
 8004b28:	2b03      	cmp	r3, #3
 8004b2a:	d825      	bhi.n	8004b78 <RCCEx_PLLSAI1_Config+0xa4>
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d002      	beq.n	8004b36 <RCCEx_PLLSAI1_Config+0x62>
 8004b30:	2b02      	cmp	r3, #2
 8004b32:	d009      	beq.n	8004b48 <RCCEx_PLLSAI1_Config+0x74>
 8004b34:	e020      	b.n	8004b78 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004b36:	4b60      	ldr	r3, [pc, #384]	@ (8004cb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 0302 	and.w	r3, r3, #2
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d11d      	bne.n	8004b7e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b46:	e01a      	b.n	8004b7e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004b48:	4b5b      	ldr	r3, [pc, #364]	@ (8004cb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d116      	bne.n	8004b82 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b58:	e013      	b.n	8004b82 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004b5a:	4b57      	ldr	r3, [pc, #348]	@ (8004cb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d10f      	bne.n	8004b86 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004b66:	4b54      	ldr	r3, [pc, #336]	@ (8004cb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d109      	bne.n	8004b86 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004b76:	e006      	b.n	8004b86 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	73fb      	strb	r3, [r7, #15]
      break;
 8004b7c:	e004      	b.n	8004b88 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b7e:	bf00      	nop
 8004b80:	e002      	b.n	8004b88 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b82:	bf00      	nop
 8004b84:	e000      	b.n	8004b88 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b86:	bf00      	nop
    }

    if(status == HAL_OK)
 8004b88:	7bfb      	ldrb	r3, [r7, #15]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d10d      	bne.n	8004baa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004b8e:	4b4a      	ldr	r3, [pc, #296]	@ (8004cb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6819      	ldr	r1, [r3, #0]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	3b01      	subs	r3, #1
 8004ba0:	011b      	lsls	r3, r3, #4
 8004ba2:	430b      	orrs	r3, r1
 8004ba4:	4944      	ldr	r1, [pc, #272]	@ (8004cb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004baa:	7bfb      	ldrb	r3, [r7, #15]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d17d      	bne.n	8004cac <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004bb0:	4b41      	ldr	r3, [pc, #260]	@ (8004cb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a40      	ldr	r2, [pc, #256]	@ (8004cb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bb6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004bba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bbc:	f7fc fe2c 	bl	8001818 <HAL_GetTick>
 8004bc0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004bc2:	e009      	b.n	8004bd8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004bc4:	f7fc fe28 	bl	8001818 <HAL_GetTick>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	2b02      	cmp	r3, #2
 8004bd0:	d902      	bls.n	8004bd8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004bd2:	2303      	movs	r3, #3
 8004bd4:	73fb      	strb	r3, [r7, #15]
        break;
 8004bd6:	e005      	b.n	8004be4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004bd8:	4b37      	ldr	r3, [pc, #220]	@ (8004cb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d1ef      	bne.n	8004bc4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004be4:	7bfb      	ldrb	r3, [r7, #15]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d160      	bne.n	8004cac <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d111      	bne.n	8004c14 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004bf0:	4b31      	ldr	r3, [pc, #196]	@ (8004cb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bf2:	691b      	ldr	r3, [r3, #16]
 8004bf4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004bf8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	6892      	ldr	r2, [r2, #8]
 8004c00:	0211      	lsls	r1, r2, #8
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	68d2      	ldr	r2, [r2, #12]
 8004c06:	0912      	lsrs	r2, r2, #4
 8004c08:	0452      	lsls	r2, r2, #17
 8004c0a:	430a      	orrs	r2, r1
 8004c0c:	492a      	ldr	r1, [pc, #168]	@ (8004cb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	610b      	str	r3, [r1, #16]
 8004c12:	e027      	b.n	8004c64 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d112      	bne.n	8004c40 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c1a:	4b27      	ldr	r3, [pc, #156]	@ (8004cb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c1c:	691b      	ldr	r3, [r3, #16]
 8004c1e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004c22:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	6892      	ldr	r2, [r2, #8]
 8004c2a:	0211      	lsls	r1, r2, #8
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	6912      	ldr	r2, [r2, #16]
 8004c30:	0852      	lsrs	r2, r2, #1
 8004c32:	3a01      	subs	r2, #1
 8004c34:	0552      	lsls	r2, r2, #21
 8004c36:	430a      	orrs	r2, r1
 8004c38:	491f      	ldr	r1, [pc, #124]	@ (8004cb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	610b      	str	r3, [r1, #16]
 8004c3e:	e011      	b.n	8004c64 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c40:	4b1d      	ldr	r3, [pc, #116]	@ (8004cb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c42:	691b      	ldr	r3, [r3, #16]
 8004c44:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004c48:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	6892      	ldr	r2, [r2, #8]
 8004c50:	0211      	lsls	r1, r2, #8
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	6952      	ldr	r2, [r2, #20]
 8004c56:	0852      	lsrs	r2, r2, #1
 8004c58:	3a01      	subs	r2, #1
 8004c5a:	0652      	lsls	r2, r2, #25
 8004c5c:	430a      	orrs	r2, r1
 8004c5e:	4916      	ldr	r1, [pc, #88]	@ (8004cb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c60:	4313      	orrs	r3, r2
 8004c62:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004c64:	4b14      	ldr	r3, [pc, #80]	@ (8004cb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a13      	ldr	r2, [pc, #76]	@ (8004cb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c6a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004c6e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c70:	f7fc fdd2 	bl	8001818 <HAL_GetTick>
 8004c74:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004c76:	e009      	b.n	8004c8c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004c78:	f7fc fdce 	bl	8001818 <HAL_GetTick>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	2b02      	cmp	r3, #2
 8004c84:	d902      	bls.n	8004c8c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004c86:	2303      	movs	r3, #3
 8004c88:	73fb      	strb	r3, [r7, #15]
          break;
 8004c8a:	e005      	b.n	8004c98 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004c8c:	4b0a      	ldr	r3, [pc, #40]	@ (8004cb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d0ef      	beq.n	8004c78 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004c98:	7bfb      	ldrb	r3, [r7, #15]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d106      	bne.n	8004cac <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004c9e:	4b06      	ldr	r3, [pc, #24]	@ (8004cb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ca0:	691a      	ldr	r2, [r3, #16]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	699b      	ldr	r3, [r3, #24]
 8004ca6:	4904      	ldr	r1, [pc, #16]	@ (8004cb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3710      	adds	r7, #16
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	40021000 	.word	0x40021000

08004cbc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b084      	sub	sp, #16
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004cca:	4b6a      	ldr	r3, [pc, #424]	@ (8004e74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	f003 0303 	and.w	r3, r3, #3
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d018      	beq.n	8004d08 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004cd6:	4b67      	ldr	r3, [pc, #412]	@ (8004e74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cd8:	68db      	ldr	r3, [r3, #12]
 8004cda:	f003 0203 	and.w	r2, r3, #3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d10d      	bne.n	8004d02 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
       ||
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d009      	beq.n	8004d02 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004cee:	4b61      	ldr	r3, [pc, #388]	@ (8004e74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	091b      	lsrs	r3, r3, #4
 8004cf4:	f003 0307 	and.w	r3, r3, #7
 8004cf8:	1c5a      	adds	r2, r3, #1
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	685b      	ldr	r3, [r3, #4]
       ||
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d047      	beq.n	8004d92 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	73fb      	strb	r3, [r7, #15]
 8004d06:	e044      	b.n	8004d92 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	2b03      	cmp	r3, #3
 8004d0e:	d018      	beq.n	8004d42 <RCCEx_PLLSAI2_Config+0x86>
 8004d10:	2b03      	cmp	r3, #3
 8004d12:	d825      	bhi.n	8004d60 <RCCEx_PLLSAI2_Config+0xa4>
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d002      	beq.n	8004d1e <RCCEx_PLLSAI2_Config+0x62>
 8004d18:	2b02      	cmp	r3, #2
 8004d1a:	d009      	beq.n	8004d30 <RCCEx_PLLSAI2_Config+0x74>
 8004d1c:	e020      	b.n	8004d60 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004d1e:	4b55      	ldr	r3, [pc, #340]	@ (8004e74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 0302 	and.w	r3, r3, #2
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d11d      	bne.n	8004d66 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d2e:	e01a      	b.n	8004d66 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004d30:	4b50      	ldr	r3, [pc, #320]	@ (8004e74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d116      	bne.n	8004d6a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d40:	e013      	b.n	8004d6a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004d42:	4b4c      	ldr	r3, [pc, #304]	@ (8004e74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d10f      	bne.n	8004d6e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004d4e:	4b49      	ldr	r3, [pc, #292]	@ (8004e74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d109      	bne.n	8004d6e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004d5e:	e006      	b.n	8004d6e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	73fb      	strb	r3, [r7, #15]
      break;
 8004d64:	e004      	b.n	8004d70 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004d66:	bf00      	nop
 8004d68:	e002      	b.n	8004d70 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004d6a:	bf00      	nop
 8004d6c:	e000      	b.n	8004d70 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004d6e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004d70:	7bfb      	ldrb	r3, [r7, #15]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d10d      	bne.n	8004d92 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004d76:	4b3f      	ldr	r3, [pc, #252]	@ (8004e74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6819      	ldr	r1, [r3, #0]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	3b01      	subs	r3, #1
 8004d88:	011b      	lsls	r3, r3, #4
 8004d8a:	430b      	orrs	r3, r1
 8004d8c:	4939      	ldr	r1, [pc, #228]	@ (8004e74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004d92:	7bfb      	ldrb	r3, [r7, #15]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d167      	bne.n	8004e68 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004d98:	4b36      	ldr	r3, [pc, #216]	@ (8004e74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a35      	ldr	r2, [pc, #212]	@ (8004e74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d9e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004da2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004da4:	f7fc fd38 	bl	8001818 <HAL_GetTick>
 8004da8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004daa:	e009      	b.n	8004dc0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004dac:	f7fc fd34 	bl	8001818 <HAL_GetTick>
 8004db0:	4602      	mov	r2, r0
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	1ad3      	subs	r3, r2, r3
 8004db6:	2b02      	cmp	r3, #2
 8004db8:	d902      	bls.n	8004dc0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004dba:	2303      	movs	r3, #3
 8004dbc:	73fb      	strb	r3, [r7, #15]
        break;
 8004dbe:	e005      	b.n	8004dcc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004dc0:	4b2c      	ldr	r3, [pc, #176]	@ (8004e74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d1ef      	bne.n	8004dac <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004dcc:	7bfb      	ldrb	r3, [r7, #15]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d14a      	bne.n	8004e68 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d111      	bne.n	8004dfc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004dd8:	4b26      	ldr	r3, [pc, #152]	@ (8004e74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dda:	695b      	ldr	r3, [r3, #20]
 8004ddc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004de0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	6892      	ldr	r2, [r2, #8]
 8004de8:	0211      	lsls	r1, r2, #8
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	68d2      	ldr	r2, [r2, #12]
 8004dee:	0912      	lsrs	r2, r2, #4
 8004df0:	0452      	lsls	r2, r2, #17
 8004df2:	430a      	orrs	r2, r1
 8004df4:	491f      	ldr	r1, [pc, #124]	@ (8004e74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004df6:	4313      	orrs	r3, r2
 8004df8:	614b      	str	r3, [r1, #20]
 8004dfa:	e011      	b.n	8004e20 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004dfc:	4b1d      	ldr	r3, [pc, #116]	@ (8004e74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dfe:	695b      	ldr	r3, [r3, #20]
 8004e00:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004e04:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004e08:	687a      	ldr	r2, [r7, #4]
 8004e0a:	6892      	ldr	r2, [r2, #8]
 8004e0c:	0211      	lsls	r1, r2, #8
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	6912      	ldr	r2, [r2, #16]
 8004e12:	0852      	lsrs	r2, r2, #1
 8004e14:	3a01      	subs	r2, #1
 8004e16:	0652      	lsls	r2, r2, #25
 8004e18:	430a      	orrs	r2, r1
 8004e1a:	4916      	ldr	r1, [pc, #88]	@ (8004e74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004e20:	4b14      	ldr	r3, [pc, #80]	@ (8004e74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a13      	ldr	r2, [pc, #76]	@ (8004e74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e2a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e2c:	f7fc fcf4 	bl	8001818 <HAL_GetTick>
 8004e30:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004e32:	e009      	b.n	8004e48 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004e34:	f7fc fcf0 	bl	8001818 <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	2b02      	cmp	r3, #2
 8004e40:	d902      	bls.n	8004e48 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	73fb      	strb	r3, [r7, #15]
          break;
 8004e46:	e005      	b.n	8004e54 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004e48:	4b0a      	ldr	r3, [pc, #40]	@ (8004e74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d0ef      	beq.n	8004e34 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004e54:	7bfb      	ldrb	r3, [r7, #15]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d106      	bne.n	8004e68 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004e5a:	4b06      	ldr	r3, [pc, #24]	@ (8004e74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e5c:	695a      	ldr	r2, [r3, #20]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	695b      	ldr	r3, [r3, #20]
 8004e62:	4904      	ldr	r1, [pc, #16]	@ (8004e74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e64:	4313      	orrs	r3, r2
 8004e66:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3710      	adds	r7, #16
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	40021000 	.word	0x40021000

08004e78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b082      	sub	sp, #8
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d101      	bne.n	8004e8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	e040      	b.n	8004f0c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d106      	bne.n	8004ea0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f7fc fabc 	bl	8001418 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2224      	movs	r2, #36	@ 0x24
 8004ea4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f022 0201 	bic.w	r2, r2, #1
 8004eb4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d002      	beq.n	8004ec4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f000 fb6a 	bl	8005598 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f000 f8af 	bl	8005028 <UART_SetConfig>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d101      	bne.n	8004ed4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e01b      	b.n	8004f0c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	685a      	ldr	r2, [r3, #4]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004ee2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	689a      	ldr	r2, [r3, #8]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004ef2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f042 0201 	orr.w	r2, r2, #1
 8004f02:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f000 fbe9 	bl	80056dc <UART_CheckIdleState>
 8004f0a:	4603      	mov	r3, r0
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3708      	adds	r7, #8
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b08a      	sub	sp, #40	@ 0x28
 8004f18:	af02      	add	r7, sp, #8
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	60b9      	str	r1, [r7, #8]
 8004f1e:	603b      	str	r3, [r7, #0]
 8004f20:	4613      	mov	r3, r2
 8004f22:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004f28:	2b20      	cmp	r3, #32
 8004f2a:	d177      	bne.n	800501c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d002      	beq.n	8004f38 <HAL_UART_Transmit+0x24>
 8004f32:	88fb      	ldrh	r3, [r7, #6]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d101      	bne.n	8004f3c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e070      	b.n	800501e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2221      	movs	r2, #33	@ 0x21
 8004f48:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f4a:	f7fc fc65 	bl	8001818 <HAL_GetTick>
 8004f4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	88fa      	ldrh	r2, [r7, #6]
 8004f54:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	88fa      	ldrh	r2, [r7, #6]
 8004f5c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f68:	d108      	bne.n	8004f7c <HAL_UART_Transmit+0x68>
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	691b      	ldr	r3, [r3, #16]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d104      	bne.n	8004f7c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004f72:	2300      	movs	r3, #0
 8004f74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	61bb      	str	r3, [r7, #24]
 8004f7a:	e003      	b.n	8004f84 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f80:	2300      	movs	r3, #0
 8004f82:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004f84:	e02f      	b.n	8004fe6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	9300      	str	r3, [sp, #0]
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	2180      	movs	r1, #128	@ 0x80
 8004f90:	68f8      	ldr	r0, [r7, #12]
 8004f92:	f000 fc4b 	bl	800582c <UART_WaitOnFlagUntilTimeout>
 8004f96:	4603      	mov	r3, r0
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d004      	beq.n	8004fa6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2220      	movs	r2, #32
 8004fa0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	e03b      	b.n	800501e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d10b      	bne.n	8004fc4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	881a      	ldrh	r2, [r3, #0]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004fb8:	b292      	uxth	r2, r2
 8004fba:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004fbc:	69bb      	ldr	r3, [r7, #24]
 8004fbe:	3302      	adds	r3, #2
 8004fc0:	61bb      	str	r3, [r7, #24]
 8004fc2:	e007      	b.n	8004fd4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004fc4:	69fb      	ldr	r3, [r7, #28]
 8004fc6:	781a      	ldrb	r2, [r3, #0]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004fce:	69fb      	ldr	r3, [r7, #28]
 8004fd0:	3301      	adds	r3, #1
 8004fd2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	3b01      	subs	r3, #1
 8004fde:	b29a      	uxth	r2, r3
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d1c9      	bne.n	8004f86 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	9300      	str	r3, [sp, #0]
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	2140      	movs	r1, #64	@ 0x40
 8004ffc:	68f8      	ldr	r0, [r7, #12]
 8004ffe:	f000 fc15 	bl	800582c <UART_WaitOnFlagUntilTimeout>
 8005002:	4603      	mov	r3, r0
 8005004:	2b00      	cmp	r3, #0
 8005006:	d004      	beq.n	8005012 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2220      	movs	r2, #32
 800500c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800500e:	2303      	movs	r3, #3
 8005010:	e005      	b.n	800501e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2220      	movs	r2, #32
 8005016:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005018:	2300      	movs	r3, #0
 800501a:	e000      	b.n	800501e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800501c:	2302      	movs	r3, #2
  }
}
 800501e:	4618      	mov	r0, r3
 8005020:	3720      	adds	r7, #32
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}
	...

08005028 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005028:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800502c:	b08a      	sub	sp, #40	@ 0x28
 800502e:	af00      	add	r7, sp, #0
 8005030:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005032:	2300      	movs	r3, #0
 8005034:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	689a      	ldr	r2, [r3, #8]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	691b      	ldr	r3, [r3, #16]
 8005040:	431a      	orrs	r2, r3
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	695b      	ldr	r3, [r3, #20]
 8005046:	431a      	orrs	r2, r3
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	69db      	ldr	r3, [r3, #28]
 800504c:	4313      	orrs	r3, r2
 800504e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	4ba4      	ldr	r3, [pc, #656]	@ (80052e8 <UART_SetConfig+0x2c0>)
 8005058:	4013      	ands	r3, r2
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	6812      	ldr	r2, [r2, #0]
 800505e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005060:	430b      	orrs	r3, r1
 8005062:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	68da      	ldr	r2, [r3, #12]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	430a      	orrs	r2, r1
 8005078:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	699b      	ldr	r3, [r3, #24]
 800507e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a99      	ldr	r2, [pc, #612]	@ (80052ec <UART_SetConfig+0x2c4>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d004      	beq.n	8005094 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	6a1b      	ldr	r3, [r3, #32]
 800508e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005090:	4313      	orrs	r3, r2
 8005092:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050a4:	430a      	orrs	r2, r1
 80050a6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a90      	ldr	r2, [pc, #576]	@ (80052f0 <UART_SetConfig+0x2c8>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d126      	bne.n	8005100 <UART_SetConfig+0xd8>
 80050b2:	4b90      	ldr	r3, [pc, #576]	@ (80052f4 <UART_SetConfig+0x2cc>)
 80050b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050b8:	f003 0303 	and.w	r3, r3, #3
 80050bc:	2b03      	cmp	r3, #3
 80050be:	d81b      	bhi.n	80050f8 <UART_SetConfig+0xd0>
 80050c0:	a201      	add	r2, pc, #4	@ (adr r2, 80050c8 <UART_SetConfig+0xa0>)
 80050c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050c6:	bf00      	nop
 80050c8:	080050d9 	.word	0x080050d9
 80050cc:	080050e9 	.word	0x080050e9
 80050d0:	080050e1 	.word	0x080050e1
 80050d4:	080050f1 	.word	0x080050f1
 80050d8:	2301      	movs	r3, #1
 80050da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050de:	e116      	b.n	800530e <UART_SetConfig+0x2e6>
 80050e0:	2302      	movs	r3, #2
 80050e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050e6:	e112      	b.n	800530e <UART_SetConfig+0x2e6>
 80050e8:	2304      	movs	r3, #4
 80050ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050ee:	e10e      	b.n	800530e <UART_SetConfig+0x2e6>
 80050f0:	2308      	movs	r3, #8
 80050f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050f6:	e10a      	b.n	800530e <UART_SetConfig+0x2e6>
 80050f8:	2310      	movs	r3, #16
 80050fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050fe:	e106      	b.n	800530e <UART_SetConfig+0x2e6>
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a7c      	ldr	r2, [pc, #496]	@ (80052f8 <UART_SetConfig+0x2d0>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d138      	bne.n	800517c <UART_SetConfig+0x154>
 800510a:	4b7a      	ldr	r3, [pc, #488]	@ (80052f4 <UART_SetConfig+0x2cc>)
 800510c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005110:	f003 030c 	and.w	r3, r3, #12
 8005114:	2b0c      	cmp	r3, #12
 8005116:	d82d      	bhi.n	8005174 <UART_SetConfig+0x14c>
 8005118:	a201      	add	r2, pc, #4	@ (adr r2, 8005120 <UART_SetConfig+0xf8>)
 800511a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800511e:	bf00      	nop
 8005120:	08005155 	.word	0x08005155
 8005124:	08005175 	.word	0x08005175
 8005128:	08005175 	.word	0x08005175
 800512c:	08005175 	.word	0x08005175
 8005130:	08005165 	.word	0x08005165
 8005134:	08005175 	.word	0x08005175
 8005138:	08005175 	.word	0x08005175
 800513c:	08005175 	.word	0x08005175
 8005140:	0800515d 	.word	0x0800515d
 8005144:	08005175 	.word	0x08005175
 8005148:	08005175 	.word	0x08005175
 800514c:	08005175 	.word	0x08005175
 8005150:	0800516d 	.word	0x0800516d
 8005154:	2300      	movs	r3, #0
 8005156:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800515a:	e0d8      	b.n	800530e <UART_SetConfig+0x2e6>
 800515c:	2302      	movs	r3, #2
 800515e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005162:	e0d4      	b.n	800530e <UART_SetConfig+0x2e6>
 8005164:	2304      	movs	r3, #4
 8005166:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800516a:	e0d0      	b.n	800530e <UART_SetConfig+0x2e6>
 800516c:	2308      	movs	r3, #8
 800516e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005172:	e0cc      	b.n	800530e <UART_SetConfig+0x2e6>
 8005174:	2310      	movs	r3, #16
 8005176:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800517a:	e0c8      	b.n	800530e <UART_SetConfig+0x2e6>
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a5e      	ldr	r2, [pc, #376]	@ (80052fc <UART_SetConfig+0x2d4>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d125      	bne.n	80051d2 <UART_SetConfig+0x1aa>
 8005186:	4b5b      	ldr	r3, [pc, #364]	@ (80052f4 <UART_SetConfig+0x2cc>)
 8005188:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800518c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005190:	2b30      	cmp	r3, #48	@ 0x30
 8005192:	d016      	beq.n	80051c2 <UART_SetConfig+0x19a>
 8005194:	2b30      	cmp	r3, #48	@ 0x30
 8005196:	d818      	bhi.n	80051ca <UART_SetConfig+0x1a2>
 8005198:	2b20      	cmp	r3, #32
 800519a:	d00a      	beq.n	80051b2 <UART_SetConfig+0x18a>
 800519c:	2b20      	cmp	r3, #32
 800519e:	d814      	bhi.n	80051ca <UART_SetConfig+0x1a2>
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d002      	beq.n	80051aa <UART_SetConfig+0x182>
 80051a4:	2b10      	cmp	r3, #16
 80051a6:	d008      	beq.n	80051ba <UART_SetConfig+0x192>
 80051a8:	e00f      	b.n	80051ca <UART_SetConfig+0x1a2>
 80051aa:	2300      	movs	r3, #0
 80051ac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051b0:	e0ad      	b.n	800530e <UART_SetConfig+0x2e6>
 80051b2:	2302      	movs	r3, #2
 80051b4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051b8:	e0a9      	b.n	800530e <UART_SetConfig+0x2e6>
 80051ba:	2304      	movs	r3, #4
 80051bc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051c0:	e0a5      	b.n	800530e <UART_SetConfig+0x2e6>
 80051c2:	2308      	movs	r3, #8
 80051c4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051c8:	e0a1      	b.n	800530e <UART_SetConfig+0x2e6>
 80051ca:	2310      	movs	r3, #16
 80051cc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051d0:	e09d      	b.n	800530e <UART_SetConfig+0x2e6>
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a4a      	ldr	r2, [pc, #296]	@ (8005300 <UART_SetConfig+0x2d8>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d125      	bne.n	8005228 <UART_SetConfig+0x200>
 80051dc:	4b45      	ldr	r3, [pc, #276]	@ (80052f4 <UART_SetConfig+0x2cc>)
 80051de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051e2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80051e6:	2bc0      	cmp	r3, #192	@ 0xc0
 80051e8:	d016      	beq.n	8005218 <UART_SetConfig+0x1f0>
 80051ea:	2bc0      	cmp	r3, #192	@ 0xc0
 80051ec:	d818      	bhi.n	8005220 <UART_SetConfig+0x1f8>
 80051ee:	2b80      	cmp	r3, #128	@ 0x80
 80051f0:	d00a      	beq.n	8005208 <UART_SetConfig+0x1e0>
 80051f2:	2b80      	cmp	r3, #128	@ 0x80
 80051f4:	d814      	bhi.n	8005220 <UART_SetConfig+0x1f8>
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d002      	beq.n	8005200 <UART_SetConfig+0x1d8>
 80051fa:	2b40      	cmp	r3, #64	@ 0x40
 80051fc:	d008      	beq.n	8005210 <UART_SetConfig+0x1e8>
 80051fe:	e00f      	b.n	8005220 <UART_SetConfig+0x1f8>
 8005200:	2300      	movs	r3, #0
 8005202:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005206:	e082      	b.n	800530e <UART_SetConfig+0x2e6>
 8005208:	2302      	movs	r3, #2
 800520a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800520e:	e07e      	b.n	800530e <UART_SetConfig+0x2e6>
 8005210:	2304      	movs	r3, #4
 8005212:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005216:	e07a      	b.n	800530e <UART_SetConfig+0x2e6>
 8005218:	2308      	movs	r3, #8
 800521a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800521e:	e076      	b.n	800530e <UART_SetConfig+0x2e6>
 8005220:	2310      	movs	r3, #16
 8005222:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005226:	e072      	b.n	800530e <UART_SetConfig+0x2e6>
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a35      	ldr	r2, [pc, #212]	@ (8005304 <UART_SetConfig+0x2dc>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d12a      	bne.n	8005288 <UART_SetConfig+0x260>
 8005232:	4b30      	ldr	r3, [pc, #192]	@ (80052f4 <UART_SetConfig+0x2cc>)
 8005234:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005238:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800523c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005240:	d01a      	beq.n	8005278 <UART_SetConfig+0x250>
 8005242:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005246:	d81b      	bhi.n	8005280 <UART_SetConfig+0x258>
 8005248:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800524c:	d00c      	beq.n	8005268 <UART_SetConfig+0x240>
 800524e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005252:	d815      	bhi.n	8005280 <UART_SetConfig+0x258>
 8005254:	2b00      	cmp	r3, #0
 8005256:	d003      	beq.n	8005260 <UART_SetConfig+0x238>
 8005258:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800525c:	d008      	beq.n	8005270 <UART_SetConfig+0x248>
 800525e:	e00f      	b.n	8005280 <UART_SetConfig+0x258>
 8005260:	2300      	movs	r3, #0
 8005262:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005266:	e052      	b.n	800530e <UART_SetConfig+0x2e6>
 8005268:	2302      	movs	r3, #2
 800526a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800526e:	e04e      	b.n	800530e <UART_SetConfig+0x2e6>
 8005270:	2304      	movs	r3, #4
 8005272:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005276:	e04a      	b.n	800530e <UART_SetConfig+0x2e6>
 8005278:	2308      	movs	r3, #8
 800527a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800527e:	e046      	b.n	800530e <UART_SetConfig+0x2e6>
 8005280:	2310      	movs	r3, #16
 8005282:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005286:	e042      	b.n	800530e <UART_SetConfig+0x2e6>
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a17      	ldr	r2, [pc, #92]	@ (80052ec <UART_SetConfig+0x2c4>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d13a      	bne.n	8005308 <UART_SetConfig+0x2e0>
 8005292:	4b18      	ldr	r3, [pc, #96]	@ (80052f4 <UART_SetConfig+0x2cc>)
 8005294:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005298:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800529c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80052a0:	d01a      	beq.n	80052d8 <UART_SetConfig+0x2b0>
 80052a2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80052a6:	d81b      	bhi.n	80052e0 <UART_SetConfig+0x2b8>
 80052a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80052ac:	d00c      	beq.n	80052c8 <UART_SetConfig+0x2a0>
 80052ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80052b2:	d815      	bhi.n	80052e0 <UART_SetConfig+0x2b8>
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d003      	beq.n	80052c0 <UART_SetConfig+0x298>
 80052b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052bc:	d008      	beq.n	80052d0 <UART_SetConfig+0x2a8>
 80052be:	e00f      	b.n	80052e0 <UART_SetConfig+0x2b8>
 80052c0:	2300      	movs	r3, #0
 80052c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052c6:	e022      	b.n	800530e <UART_SetConfig+0x2e6>
 80052c8:	2302      	movs	r3, #2
 80052ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052ce:	e01e      	b.n	800530e <UART_SetConfig+0x2e6>
 80052d0:	2304      	movs	r3, #4
 80052d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052d6:	e01a      	b.n	800530e <UART_SetConfig+0x2e6>
 80052d8:	2308      	movs	r3, #8
 80052da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052de:	e016      	b.n	800530e <UART_SetConfig+0x2e6>
 80052e0:	2310      	movs	r3, #16
 80052e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052e6:	e012      	b.n	800530e <UART_SetConfig+0x2e6>
 80052e8:	efff69f3 	.word	0xefff69f3
 80052ec:	40008000 	.word	0x40008000
 80052f0:	40013800 	.word	0x40013800
 80052f4:	40021000 	.word	0x40021000
 80052f8:	40004400 	.word	0x40004400
 80052fc:	40004800 	.word	0x40004800
 8005300:	40004c00 	.word	0x40004c00
 8005304:	40005000 	.word	0x40005000
 8005308:	2310      	movs	r3, #16
 800530a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a9f      	ldr	r2, [pc, #636]	@ (8005590 <UART_SetConfig+0x568>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d17a      	bne.n	800540e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005318:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800531c:	2b08      	cmp	r3, #8
 800531e:	d824      	bhi.n	800536a <UART_SetConfig+0x342>
 8005320:	a201      	add	r2, pc, #4	@ (adr r2, 8005328 <UART_SetConfig+0x300>)
 8005322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005326:	bf00      	nop
 8005328:	0800534d 	.word	0x0800534d
 800532c:	0800536b 	.word	0x0800536b
 8005330:	08005355 	.word	0x08005355
 8005334:	0800536b 	.word	0x0800536b
 8005338:	0800535b 	.word	0x0800535b
 800533c:	0800536b 	.word	0x0800536b
 8005340:	0800536b 	.word	0x0800536b
 8005344:	0800536b 	.word	0x0800536b
 8005348:	08005363 	.word	0x08005363
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800534c:	f7ff f83c 	bl	80043c8 <HAL_RCC_GetPCLK1Freq>
 8005350:	61f8      	str	r0, [r7, #28]
        break;
 8005352:	e010      	b.n	8005376 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005354:	4b8f      	ldr	r3, [pc, #572]	@ (8005594 <UART_SetConfig+0x56c>)
 8005356:	61fb      	str	r3, [r7, #28]
        break;
 8005358:	e00d      	b.n	8005376 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800535a:	f7fe ff9d 	bl	8004298 <HAL_RCC_GetSysClockFreq>
 800535e:	61f8      	str	r0, [r7, #28]
        break;
 8005360:	e009      	b.n	8005376 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005362:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005366:	61fb      	str	r3, [r7, #28]
        break;
 8005368:	e005      	b.n	8005376 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800536a:	2300      	movs	r3, #0
 800536c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005374:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005376:	69fb      	ldr	r3, [r7, #28]
 8005378:	2b00      	cmp	r3, #0
 800537a:	f000 80fb 	beq.w	8005574 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	685a      	ldr	r2, [r3, #4]
 8005382:	4613      	mov	r3, r2
 8005384:	005b      	lsls	r3, r3, #1
 8005386:	4413      	add	r3, r2
 8005388:	69fa      	ldr	r2, [r7, #28]
 800538a:	429a      	cmp	r2, r3
 800538c:	d305      	bcc.n	800539a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005394:	69fa      	ldr	r2, [r7, #28]
 8005396:	429a      	cmp	r2, r3
 8005398:	d903      	bls.n	80053a2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80053a0:	e0e8      	b.n	8005574 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	2200      	movs	r2, #0
 80053a6:	461c      	mov	r4, r3
 80053a8:	4615      	mov	r5, r2
 80053aa:	f04f 0200 	mov.w	r2, #0
 80053ae:	f04f 0300 	mov.w	r3, #0
 80053b2:	022b      	lsls	r3, r5, #8
 80053b4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80053b8:	0222      	lsls	r2, r4, #8
 80053ba:	68f9      	ldr	r1, [r7, #12]
 80053bc:	6849      	ldr	r1, [r1, #4]
 80053be:	0849      	lsrs	r1, r1, #1
 80053c0:	2000      	movs	r0, #0
 80053c2:	4688      	mov	r8, r1
 80053c4:	4681      	mov	r9, r0
 80053c6:	eb12 0a08 	adds.w	sl, r2, r8
 80053ca:	eb43 0b09 	adc.w	fp, r3, r9
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	603b      	str	r3, [r7, #0]
 80053d6:	607a      	str	r2, [r7, #4]
 80053d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80053dc:	4650      	mov	r0, sl
 80053de:	4659      	mov	r1, fp
 80053e0:	f7fb fbe2 	bl	8000ba8 <__aeabi_uldivmod>
 80053e4:	4602      	mov	r2, r0
 80053e6:	460b      	mov	r3, r1
 80053e8:	4613      	mov	r3, r2
 80053ea:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80053ec:	69bb      	ldr	r3, [r7, #24]
 80053ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80053f2:	d308      	bcc.n	8005406 <UART_SetConfig+0x3de>
 80053f4:	69bb      	ldr	r3, [r7, #24]
 80053f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80053fa:	d204      	bcs.n	8005406 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	69ba      	ldr	r2, [r7, #24]
 8005402:	60da      	str	r2, [r3, #12]
 8005404:	e0b6      	b.n	8005574 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800540c:	e0b2      	b.n	8005574 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	69db      	ldr	r3, [r3, #28]
 8005412:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005416:	d15e      	bne.n	80054d6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005418:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800541c:	2b08      	cmp	r3, #8
 800541e:	d828      	bhi.n	8005472 <UART_SetConfig+0x44a>
 8005420:	a201      	add	r2, pc, #4	@ (adr r2, 8005428 <UART_SetConfig+0x400>)
 8005422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005426:	bf00      	nop
 8005428:	0800544d 	.word	0x0800544d
 800542c:	08005455 	.word	0x08005455
 8005430:	0800545d 	.word	0x0800545d
 8005434:	08005473 	.word	0x08005473
 8005438:	08005463 	.word	0x08005463
 800543c:	08005473 	.word	0x08005473
 8005440:	08005473 	.word	0x08005473
 8005444:	08005473 	.word	0x08005473
 8005448:	0800546b 	.word	0x0800546b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800544c:	f7fe ffbc 	bl	80043c8 <HAL_RCC_GetPCLK1Freq>
 8005450:	61f8      	str	r0, [r7, #28]
        break;
 8005452:	e014      	b.n	800547e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005454:	f7fe ffce 	bl	80043f4 <HAL_RCC_GetPCLK2Freq>
 8005458:	61f8      	str	r0, [r7, #28]
        break;
 800545a:	e010      	b.n	800547e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800545c:	4b4d      	ldr	r3, [pc, #308]	@ (8005594 <UART_SetConfig+0x56c>)
 800545e:	61fb      	str	r3, [r7, #28]
        break;
 8005460:	e00d      	b.n	800547e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005462:	f7fe ff19 	bl	8004298 <HAL_RCC_GetSysClockFreq>
 8005466:	61f8      	str	r0, [r7, #28]
        break;
 8005468:	e009      	b.n	800547e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800546a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800546e:	61fb      	str	r3, [r7, #28]
        break;
 8005470:	e005      	b.n	800547e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005472:	2300      	movs	r3, #0
 8005474:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800547c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800547e:	69fb      	ldr	r3, [r7, #28]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d077      	beq.n	8005574 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005484:	69fb      	ldr	r3, [r7, #28]
 8005486:	005a      	lsls	r2, r3, #1
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	085b      	lsrs	r3, r3, #1
 800548e:	441a      	add	r2, r3
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	fbb2 f3f3 	udiv	r3, r2, r3
 8005498:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800549a:	69bb      	ldr	r3, [r7, #24]
 800549c:	2b0f      	cmp	r3, #15
 800549e:	d916      	bls.n	80054ce <UART_SetConfig+0x4a6>
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054a6:	d212      	bcs.n	80054ce <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80054a8:	69bb      	ldr	r3, [r7, #24]
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	f023 030f 	bic.w	r3, r3, #15
 80054b0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	085b      	lsrs	r3, r3, #1
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	f003 0307 	and.w	r3, r3, #7
 80054bc:	b29a      	uxth	r2, r3
 80054be:	8afb      	ldrh	r3, [r7, #22]
 80054c0:	4313      	orrs	r3, r2
 80054c2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	8afa      	ldrh	r2, [r7, #22]
 80054ca:	60da      	str	r2, [r3, #12]
 80054cc:	e052      	b.n	8005574 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80054d4:	e04e      	b.n	8005574 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80054d6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80054da:	2b08      	cmp	r3, #8
 80054dc:	d827      	bhi.n	800552e <UART_SetConfig+0x506>
 80054de:	a201      	add	r2, pc, #4	@ (adr r2, 80054e4 <UART_SetConfig+0x4bc>)
 80054e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054e4:	08005509 	.word	0x08005509
 80054e8:	08005511 	.word	0x08005511
 80054ec:	08005519 	.word	0x08005519
 80054f0:	0800552f 	.word	0x0800552f
 80054f4:	0800551f 	.word	0x0800551f
 80054f8:	0800552f 	.word	0x0800552f
 80054fc:	0800552f 	.word	0x0800552f
 8005500:	0800552f 	.word	0x0800552f
 8005504:	08005527 	.word	0x08005527
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005508:	f7fe ff5e 	bl	80043c8 <HAL_RCC_GetPCLK1Freq>
 800550c:	61f8      	str	r0, [r7, #28]
        break;
 800550e:	e014      	b.n	800553a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005510:	f7fe ff70 	bl	80043f4 <HAL_RCC_GetPCLK2Freq>
 8005514:	61f8      	str	r0, [r7, #28]
        break;
 8005516:	e010      	b.n	800553a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005518:	4b1e      	ldr	r3, [pc, #120]	@ (8005594 <UART_SetConfig+0x56c>)
 800551a:	61fb      	str	r3, [r7, #28]
        break;
 800551c:	e00d      	b.n	800553a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800551e:	f7fe febb 	bl	8004298 <HAL_RCC_GetSysClockFreq>
 8005522:	61f8      	str	r0, [r7, #28]
        break;
 8005524:	e009      	b.n	800553a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005526:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800552a:	61fb      	str	r3, [r7, #28]
        break;
 800552c:	e005      	b.n	800553a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800552e:	2300      	movs	r3, #0
 8005530:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005538:	bf00      	nop
    }

    if (pclk != 0U)
 800553a:	69fb      	ldr	r3, [r7, #28]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d019      	beq.n	8005574 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	085a      	lsrs	r2, r3, #1
 8005546:	69fb      	ldr	r3, [r7, #28]
 8005548:	441a      	add	r2, r3
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005552:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005554:	69bb      	ldr	r3, [r7, #24]
 8005556:	2b0f      	cmp	r3, #15
 8005558:	d909      	bls.n	800556e <UART_SetConfig+0x546>
 800555a:	69bb      	ldr	r3, [r7, #24]
 800555c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005560:	d205      	bcs.n	800556e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005562:	69bb      	ldr	r3, [r7, #24]
 8005564:	b29a      	uxth	r2, r3
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	60da      	str	r2, [r3, #12]
 800556c:	e002      	b.n	8005574 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2200      	movs	r2, #0
 8005578:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2200      	movs	r2, #0
 800557e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005580:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005584:	4618      	mov	r0, r3
 8005586:	3728      	adds	r7, #40	@ 0x28
 8005588:	46bd      	mov	sp, r7
 800558a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800558e:	bf00      	nop
 8005590:	40008000 	.word	0x40008000
 8005594:	00f42400 	.word	0x00f42400

08005598 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005598:	b480      	push	{r7}
 800559a:	b083      	sub	sp, #12
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055a4:	f003 0308 	and.w	r3, r3, #8
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d00a      	beq.n	80055c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	430a      	orrs	r2, r1
 80055c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055c6:	f003 0301 	and.w	r3, r3, #1
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d00a      	beq.n	80055e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	430a      	orrs	r2, r1
 80055e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055e8:	f003 0302 	and.w	r3, r3, #2
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d00a      	beq.n	8005606 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	430a      	orrs	r2, r1
 8005604:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800560a:	f003 0304 	and.w	r3, r3, #4
 800560e:	2b00      	cmp	r3, #0
 8005610:	d00a      	beq.n	8005628 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	430a      	orrs	r2, r1
 8005626:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800562c:	f003 0310 	and.w	r3, r3, #16
 8005630:	2b00      	cmp	r3, #0
 8005632:	d00a      	beq.n	800564a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	430a      	orrs	r2, r1
 8005648:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800564e:	f003 0320 	and.w	r3, r3, #32
 8005652:	2b00      	cmp	r3, #0
 8005654:	d00a      	beq.n	800566c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	430a      	orrs	r2, r1
 800566a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005670:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005674:	2b00      	cmp	r3, #0
 8005676:	d01a      	beq.n	80056ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	430a      	orrs	r2, r1
 800568c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005692:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005696:	d10a      	bne.n	80056ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	430a      	orrs	r2, r1
 80056ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d00a      	beq.n	80056d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	430a      	orrs	r2, r1
 80056ce:	605a      	str	r2, [r3, #4]
  }
}
 80056d0:	bf00      	nop
 80056d2:	370c      	adds	r7, #12
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr

080056dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b098      	sub	sp, #96	@ 0x60
 80056e0:	af02      	add	r7, sp, #8
 80056e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2200      	movs	r2, #0
 80056e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80056ec:	f7fc f894 	bl	8001818 <HAL_GetTick>
 80056f0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f003 0308 	and.w	r3, r3, #8
 80056fc:	2b08      	cmp	r3, #8
 80056fe:	d12e      	bne.n	800575e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005700:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005704:	9300      	str	r3, [sp, #0]
 8005706:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005708:	2200      	movs	r2, #0
 800570a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f000 f88c 	bl	800582c <UART_WaitOnFlagUntilTimeout>
 8005714:	4603      	mov	r3, r0
 8005716:	2b00      	cmp	r3, #0
 8005718:	d021      	beq.n	800575e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005720:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005722:	e853 3f00 	ldrex	r3, [r3]
 8005726:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005728:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800572a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800572e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	461a      	mov	r2, r3
 8005736:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005738:	647b      	str	r3, [r7, #68]	@ 0x44
 800573a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800573c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800573e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005740:	e841 2300 	strex	r3, r2, [r1]
 8005744:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005746:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005748:	2b00      	cmp	r3, #0
 800574a:	d1e6      	bne.n	800571a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2220      	movs	r2, #32
 8005750:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2200      	movs	r2, #0
 8005756:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800575a:	2303      	movs	r3, #3
 800575c:	e062      	b.n	8005824 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f003 0304 	and.w	r3, r3, #4
 8005768:	2b04      	cmp	r3, #4
 800576a:	d149      	bne.n	8005800 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800576c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005770:	9300      	str	r3, [sp, #0]
 8005772:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005774:	2200      	movs	r2, #0
 8005776:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f000 f856 	bl	800582c <UART_WaitOnFlagUntilTimeout>
 8005780:	4603      	mov	r3, r0
 8005782:	2b00      	cmp	r3, #0
 8005784:	d03c      	beq.n	8005800 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800578c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800578e:	e853 3f00 	ldrex	r3, [r3]
 8005792:	623b      	str	r3, [r7, #32]
   return(result);
 8005794:	6a3b      	ldr	r3, [r7, #32]
 8005796:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800579a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	461a      	mov	r2, r3
 80057a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80057a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80057a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80057aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057ac:	e841 2300 	strex	r3, r2, [r1]
 80057b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80057b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d1e6      	bne.n	8005786 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	3308      	adds	r3, #8
 80057be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	e853 3f00 	ldrex	r3, [r3]
 80057c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f023 0301 	bic.w	r3, r3, #1
 80057ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	3308      	adds	r3, #8
 80057d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80057d8:	61fa      	str	r2, [r7, #28]
 80057da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057dc:	69b9      	ldr	r1, [r7, #24]
 80057de:	69fa      	ldr	r2, [r7, #28]
 80057e0:	e841 2300 	strex	r3, r2, [r1]
 80057e4:	617b      	str	r3, [r7, #20]
   return(result);
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d1e5      	bne.n	80057b8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2220      	movs	r2, #32
 80057f0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057fc:	2303      	movs	r3, #3
 80057fe:	e011      	b.n	8005824 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2220      	movs	r2, #32
 8005804:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2220      	movs	r2, #32
 800580a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2200      	movs	r2, #0
 8005818:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2200      	movs	r2, #0
 800581e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005822:	2300      	movs	r3, #0
}
 8005824:	4618      	mov	r0, r3
 8005826:	3758      	adds	r7, #88	@ 0x58
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}

0800582c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b084      	sub	sp, #16
 8005830:	af00      	add	r7, sp, #0
 8005832:	60f8      	str	r0, [r7, #12]
 8005834:	60b9      	str	r1, [r7, #8]
 8005836:	603b      	str	r3, [r7, #0]
 8005838:	4613      	mov	r3, r2
 800583a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800583c:	e049      	b.n	80058d2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800583e:	69bb      	ldr	r3, [r7, #24]
 8005840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005844:	d045      	beq.n	80058d2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005846:	f7fb ffe7 	bl	8001818 <HAL_GetTick>
 800584a:	4602      	mov	r2, r0
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	1ad3      	subs	r3, r2, r3
 8005850:	69ba      	ldr	r2, [r7, #24]
 8005852:	429a      	cmp	r2, r3
 8005854:	d302      	bcc.n	800585c <UART_WaitOnFlagUntilTimeout+0x30>
 8005856:	69bb      	ldr	r3, [r7, #24]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d101      	bne.n	8005860 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800585c:	2303      	movs	r3, #3
 800585e:	e048      	b.n	80058f2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f003 0304 	and.w	r3, r3, #4
 800586a:	2b00      	cmp	r3, #0
 800586c:	d031      	beq.n	80058d2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	69db      	ldr	r3, [r3, #28]
 8005874:	f003 0308 	and.w	r3, r3, #8
 8005878:	2b08      	cmp	r3, #8
 800587a:	d110      	bne.n	800589e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	2208      	movs	r2, #8
 8005882:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005884:	68f8      	ldr	r0, [r7, #12]
 8005886:	f000 f838 	bl	80058fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2208      	movs	r2, #8
 800588e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2200      	movs	r2, #0
 8005896:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	e029      	b.n	80058f2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	69db      	ldr	r3, [r3, #28]
 80058a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80058a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80058ac:	d111      	bne.n	80058d2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80058b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80058b8:	68f8      	ldr	r0, [r7, #12]
 80058ba:	f000 f81e 	bl	80058fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2220      	movs	r2, #32
 80058c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2200      	movs	r2, #0
 80058ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80058ce:	2303      	movs	r3, #3
 80058d0:	e00f      	b.n	80058f2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	69da      	ldr	r2, [r3, #28]
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	4013      	ands	r3, r2
 80058dc:	68ba      	ldr	r2, [r7, #8]
 80058de:	429a      	cmp	r2, r3
 80058e0:	bf0c      	ite	eq
 80058e2:	2301      	moveq	r3, #1
 80058e4:	2300      	movne	r3, #0
 80058e6:	b2db      	uxtb	r3, r3
 80058e8:	461a      	mov	r2, r3
 80058ea:	79fb      	ldrb	r3, [r7, #7]
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d0a6      	beq.n	800583e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058f0:	2300      	movs	r3, #0
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3710      	adds	r7, #16
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}

080058fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80058fa:	b480      	push	{r7}
 80058fc:	b095      	sub	sp, #84	@ 0x54
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005908:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800590a:	e853 3f00 	ldrex	r3, [r3]
 800590e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005912:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005916:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	461a      	mov	r2, r3
 800591e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005920:	643b      	str	r3, [r7, #64]	@ 0x40
 8005922:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005924:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005926:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005928:	e841 2300 	strex	r3, r2, [r1]
 800592c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800592e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005930:	2b00      	cmp	r3, #0
 8005932:	d1e6      	bne.n	8005902 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	3308      	adds	r3, #8
 800593a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800593c:	6a3b      	ldr	r3, [r7, #32]
 800593e:	e853 3f00 	ldrex	r3, [r3]
 8005942:	61fb      	str	r3, [r7, #28]
   return(result);
 8005944:	69fb      	ldr	r3, [r7, #28]
 8005946:	f023 0301 	bic.w	r3, r3, #1
 800594a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	3308      	adds	r3, #8
 8005952:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005954:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005956:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005958:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800595a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800595c:	e841 2300 	strex	r3, r2, [r1]
 8005960:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005964:	2b00      	cmp	r3, #0
 8005966:	d1e5      	bne.n	8005934 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800596c:	2b01      	cmp	r3, #1
 800596e:	d118      	bne.n	80059a2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	e853 3f00 	ldrex	r3, [r3]
 800597c:	60bb      	str	r3, [r7, #8]
   return(result);
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	f023 0310 	bic.w	r3, r3, #16
 8005984:	647b      	str	r3, [r7, #68]	@ 0x44
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	461a      	mov	r2, r3
 800598c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800598e:	61bb      	str	r3, [r7, #24]
 8005990:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005992:	6979      	ldr	r1, [r7, #20]
 8005994:	69ba      	ldr	r2, [r7, #24]
 8005996:	e841 2300 	strex	r3, r2, [r1]
 800599a:	613b      	str	r3, [r7, #16]
   return(result);
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d1e6      	bne.n	8005970 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2220      	movs	r2, #32
 80059a6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2200      	movs	r2, #0
 80059ae:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2200      	movs	r2, #0
 80059b4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80059b6:	bf00      	nop
 80059b8:	3754      	adds	r7, #84	@ 0x54
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr

080059c2 <__cvt>:
 80059c2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80059c6:	ec57 6b10 	vmov	r6, r7, d0
 80059ca:	2f00      	cmp	r7, #0
 80059cc:	460c      	mov	r4, r1
 80059ce:	4619      	mov	r1, r3
 80059d0:	463b      	mov	r3, r7
 80059d2:	bfbb      	ittet	lt
 80059d4:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80059d8:	461f      	movlt	r7, r3
 80059da:	2300      	movge	r3, #0
 80059dc:	232d      	movlt	r3, #45	@ 0x2d
 80059de:	700b      	strb	r3, [r1, #0]
 80059e0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80059e2:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80059e6:	4691      	mov	r9, r2
 80059e8:	f023 0820 	bic.w	r8, r3, #32
 80059ec:	bfbc      	itt	lt
 80059ee:	4632      	movlt	r2, r6
 80059f0:	4616      	movlt	r6, r2
 80059f2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80059f6:	d005      	beq.n	8005a04 <__cvt+0x42>
 80059f8:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80059fc:	d100      	bne.n	8005a00 <__cvt+0x3e>
 80059fe:	3401      	adds	r4, #1
 8005a00:	2102      	movs	r1, #2
 8005a02:	e000      	b.n	8005a06 <__cvt+0x44>
 8005a04:	2103      	movs	r1, #3
 8005a06:	ab03      	add	r3, sp, #12
 8005a08:	9301      	str	r3, [sp, #4]
 8005a0a:	ab02      	add	r3, sp, #8
 8005a0c:	9300      	str	r3, [sp, #0]
 8005a0e:	ec47 6b10 	vmov	d0, r6, r7
 8005a12:	4653      	mov	r3, sl
 8005a14:	4622      	mov	r2, r4
 8005a16:	f000 fe4b 	bl	80066b0 <_dtoa_r>
 8005a1a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005a1e:	4605      	mov	r5, r0
 8005a20:	d119      	bne.n	8005a56 <__cvt+0x94>
 8005a22:	f019 0f01 	tst.w	r9, #1
 8005a26:	d00e      	beq.n	8005a46 <__cvt+0x84>
 8005a28:	eb00 0904 	add.w	r9, r0, r4
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	2300      	movs	r3, #0
 8005a30:	4630      	mov	r0, r6
 8005a32:	4639      	mov	r1, r7
 8005a34:	f7fb f848 	bl	8000ac8 <__aeabi_dcmpeq>
 8005a38:	b108      	cbz	r0, 8005a3e <__cvt+0x7c>
 8005a3a:	f8cd 900c 	str.w	r9, [sp, #12]
 8005a3e:	2230      	movs	r2, #48	@ 0x30
 8005a40:	9b03      	ldr	r3, [sp, #12]
 8005a42:	454b      	cmp	r3, r9
 8005a44:	d31e      	bcc.n	8005a84 <__cvt+0xc2>
 8005a46:	9b03      	ldr	r3, [sp, #12]
 8005a48:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005a4a:	1b5b      	subs	r3, r3, r5
 8005a4c:	4628      	mov	r0, r5
 8005a4e:	6013      	str	r3, [r2, #0]
 8005a50:	b004      	add	sp, #16
 8005a52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a56:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005a5a:	eb00 0904 	add.w	r9, r0, r4
 8005a5e:	d1e5      	bne.n	8005a2c <__cvt+0x6a>
 8005a60:	7803      	ldrb	r3, [r0, #0]
 8005a62:	2b30      	cmp	r3, #48	@ 0x30
 8005a64:	d10a      	bne.n	8005a7c <__cvt+0xba>
 8005a66:	2200      	movs	r2, #0
 8005a68:	2300      	movs	r3, #0
 8005a6a:	4630      	mov	r0, r6
 8005a6c:	4639      	mov	r1, r7
 8005a6e:	f7fb f82b 	bl	8000ac8 <__aeabi_dcmpeq>
 8005a72:	b918      	cbnz	r0, 8005a7c <__cvt+0xba>
 8005a74:	f1c4 0401 	rsb	r4, r4, #1
 8005a78:	f8ca 4000 	str.w	r4, [sl]
 8005a7c:	f8da 3000 	ldr.w	r3, [sl]
 8005a80:	4499      	add	r9, r3
 8005a82:	e7d3      	b.n	8005a2c <__cvt+0x6a>
 8005a84:	1c59      	adds	r1, r3, #1
 8005a86:	9103      	str	r1, [sp, #12]
 8005a88:	701a      	strb	r2, [r3, #0]
 8005a8a:	e7d9      	b.n	8005a40 <__cvt+0x7e>

08005a8c <__exponent>:
 8005a8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a8e:	2900      	cmp	r1, #0
 8005a90:	bfba      	itte	lt
 8005a92:	4249      	neglt	r1, r1
 8005a94:	232d      	movlt	r3, #45	@ 0x2d
 8005a96:	232b      	movge	r3, #43	@ 0x2b
 8005a98:	2909      	cmp	r1, #9
 8005a9a:	7002      	strb	r2, [r0, #0]
 8005a9c:	7043      	strb	r3, [r0, #1]
 8005a9e:	dd29      	ble.n	8005af4 <__exponent+0x68>
 8005aa0:	f10d 0307 	add.w	r3, sp, #7
 8005aa4:	461d      	mov	r5, r3
 8005aa6:	270a      	movs	r7, #10
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	fbb1 f6f7 	udiv	r6, r1, r7
 8005aae:	fb07 1416 	mls	r4, r7, r6, r1
 8005ab2:	3430      	adds	r4, #48	@ 0x30
 8005ab4:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005ab8:	460c      	mov	r4, r1
 8005aba:	2c63      	cmp	r4, #99	@ 0x63
 8005abc:	f103 33ff 	add.w	r3, r3, #4294967295
 8005ac0:	4631      	mov	r1, r6
 8005ac2:	dcf1      	bgt.n	8005aa8 <__exponent+0x1c>
 8005ac4:	3130      	adds	r1, #48	@ 0x30
 8005ac6:	1e94      	subs	r4, r2, #2
 8005ac8:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005acc:	1c41      	adds	r1, r0, #1
 8005ace:	4623      	mov	r3, r4
 8005ad0:	42ab      	cmp	r3, r5
 8005ad2:	d30a      	bcc.n	8005aea <__exponent+0x5e>
 8005ad4:	f10d 0309 	add.w	r3, sp, #9
 8005ad8:	1a9b      	subs	r3, r3, r2
 8005ada:	42ac      	cmp	r4, r5
 8005adc:	bf88      	it	hi
 8005ade:	2300      	movhi	r3, #0
 8005ae0:	3302      	adds	r3, #2
 8005ae2:	4403      	add	r3, r0
 8005ae4:	1a18      	subs	r0, r3, r0
 8005ae6:	b003      	add	sp, #12
 8005ae8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005aea:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005aee:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005af2:	e7ed      	b.n	8005ad0 <__exponent+0x44>
 8005af4:	2330      	movs	r3, #48	@ 0x30
 8005af6:	3130      	adds	r1, #48	@ 0x30
 8005af8:	7083      	strb	r3, [r0, #2]
 8005afa:	70c1      	strb	r1, [r0, #3]
 8005afc:	1d03      	adds	r3, r0, #4
 8005afe:	e7f1      	b.n	8005ae4 <__exponent+0x58>

08005b00 <_printf_float>:
 8005b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b04:	b08d      	sub	sp, #52	@ 0x34
 8005b06:	460c      	mov	r4, r1
 8005b08:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005b0c:	4616      	mov	r6, r2
 8005b0e:	461f      	mov	r7, r3
 8005b10:	4605      	mov	r5, r0
 8005b12:	f000 fccd 	bl	80064b0 <_localeconv_r>
 8005b16:	6803      	ldr	r3, [r0, #0]
 8005b18:	9304      	str	r3, [sp, #16]
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f7fa fba8 	bl	8000270 <strlen>
 8005b20:	2300      	movs	r3, #0
 8005b22:	930a      	str	r3, [sp, #40]	@ 0x28
 8005b24:	f8d8 3000 	ldr.w	r3, [r8]
 8005b28:	9005      	str	r0, [sp, #20]
 8005b2a:	3307      	adds	r3, #7
 8005b2c:	f023 0307 	bic.w	r3, r3, #7
 8005b30:	f103 0208 	add.w	r2, r3, #8
 8005b34:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005b38:	f8d4 b000 	ldr.w	fp, [r4]
 8005b3c:	f8c8 2000 	str.w	r2, [r8]
 8005b40:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005b44:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005b48:	9307      	str	r3, [sp, #28]
 8005b4a:	f8cd 8018 	str.w	r8, [sp, #24]
 8005b4e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005b52:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b56:	4b9c      	ldr	r3, [pc, #624]	@ (8005dc8 <_printf_float+0x2c8>)
 8005b58:	f04f 32ff 	mov.w	r2, #4294967295
 8005b5c:	f7fa ffe6 	bl	8000b2c <__aeabi_dcmpun>
 8005b60:	bb70      	cbnz	r0, 8005bc0 <_printf_float+0xc0>
 8005b62:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b66:	4b98      	ldr	r3, [pc, #608]	@ (8005dc8 <_printf_float+0x2c8>)
 8005b68:	f04f 32ff 	mov.w	r2, #4294967295
 8005b6c:	f7fa ffc0 	bl	8000af0 <__aeabi_dcmple>
 8005b70:	bb30      	cbnz	r0, 8005bc0 <_printf_float+0xc0>
 8005b72:	2200      	movs	r2, #0
 8005b74:	2300      	movs	r3, #0
 8005b76:	4640      	mov	r0, r8
 8005b78:	4649      	mov	r1, r9
 8005b7a:	f7fa ffaf 	bl	8000adc <__aeabi_dcmplt>
 8005b7e:	b110      	cbz	r0, 8005b86 <_printf_float+0x86>
 8005b80:	232d      	movs	r3, #45	@ 0x2d
 8005b82:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b86:	4a91      	ldr	r2, [pc, #580]	@ (8005dcc <_printf_float+0x2cc>)
 8005b88:	4b91      	ldr	r3, [pc, #580]	@ (8005dd0 <_printf_float+0x2d0>)
 8005b8a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005b8e:	bf94      	ite	ls
 8005b90:	4690      	movls	r8, r2
 8005b92:	4698      	movhi	r8, r3
 8005b94:	2303      	movs	r3, #3
 8005b96:	6123      	str	r3, [r4, #16]
 8005b98:	f02b 0304 	bic.w	r3, fp, #4
 8005b9c:	6023      	str	r3, [r4, #0]
 8005b9e:	f04f 0900 	mov.w	r9, #0
 8005ba2:	9700      	str	r7, [sp, #0]
 8005ba4:	4633      	mov	r3, r6
 8005ba6:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005ba8:	4621      	mov	r1, r4
 8005baa:	4628      	mov	r0, r5
 8005bac:	f000 f9d2 	bl	8005f54 <_printf_common>
 8005bb0:	3001      	adds	r0, #1
 8005bb2:	f040 808d 	bne.w	8005cd0 <_printf_float+0x1d0>
 8005bb6:	f04f 30ff 	mov.w	r0, #4294967295
 8005bba:	b00d      	add	sp, #52	@ 0x34
 8005bbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bc0:	4642      	mov	r2, r8
 8005bc2:	464b      	mov	r3, r9
 8005bc4:	4640      	mov	r0, r8
 8005bc6:	4649      	mov	r1, r9
 8005bc8:	f7fa ffb0 	bl	8000b2c <__aeabi_dcmpun>
 8005bcc:	b140      	cbz	r0, 8005be0 <_printf_float+0xe0>
 8005bce:	464b      	mov	r3, r9
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	bfbc      	itt	lt
 8005bd4:	232d      	movlt	r3, #45	@ 0x2d
 8005bd6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005bda:	4a7e      	ldr	r2, [pc, #504]	@ (8005dd4 <_printf_float+0x2d4>)
 8005bdc:	4b7e      	ldr	r3, [pc, #504]	@ (8005dd8 <_printf_float+0x2d8>)
 8005bde:	e7d4      	b.n	8005b8a <_printf_float+0x8a>
 8005be0:	6863      	ldr	r3, [r4, #4]
 8005be2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005be6:	9206      	str	r2, [sp, #24]
 8005be8:	1c5a      	adds	r2, r3, #1
 8005bea:	d13b      	bne.n	8005c64 <_printf_float+0x164>
 8005bec:	2306      	movs	r3, #6
 8005bee:	6063      	str	r3, [r4, #4]
 8005bf0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	6022      	str	r2, [r4, #0]
 8005bf8:	9303      	str	r3, [sp, #12]
 8005bfa:	ab0a      	add	r3, sp, #40	@ 0x28
 8005bfc:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005c00:	ab09      	add	r3, sp, #36	@ 0x24
 8005c02:	9300      	str	r3, [sp, #0]
 8005c04:	6861      	ldr	r1, [r4, #4]
 8005c06:	ec49 8b10 	vmov	d0, r8, r9
 8005c0a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005c0e:	4628      	mov	r0, r5
 8005c10:	f7ff fed7 	bl	80059c2 <__cvt>
 8005c14:	9b06      	ldr	r3, [sp, #24]
 8005c16:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005c18:	2b47      	cmp	r3, #71	@ 0x47
 8005c1a:	4680      	mov	r8, r0
 8005c1c:	d129      	bne.n	8005c72 <_printf_float+0x172>
 8005c1e:	1cc8      	adds	r0, r1, #3
 8005c20:	db02      	blt.n	8005c28 <_printf_float+0x128>
 8005c22:	6863      	ldr	r3, [r4, #4]
 8005c24:	4299      	cmp	r1, r3
 8005c26:	dd41      	ble.n	8005cac <_printf_float+0x1ac>
 8005c28:	f1aa 0a02 	sub.w	sl, sl, #2
 8005c2c:	fa5f fa8a 	uxtb.w	sl, sl
 8005c30:	3901      	subs	r1, #1
 8005c32:	4652      	mov	r2, sl
 8005c34:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005c38:	9109      	str	r1, [sp, #36]	@ 0x24
 8005c3a:	f7ff ff27 	bl	8005a8c <__exponent>
 8005c3e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005c40:	1813      	adds	r3, r2, r0
 8005c42:	2a01      	cmp	r2, #1
 8005c44:	4681      	mov	r9, r0
 8005c46:	6123      	str	r3, [r4, #16]
 8005c48:	dc02      	bgt.n	8005c50 <_printf_float+0x150>
 8005c4a:	6822      	ldr	r2, [r4, #0]
 8005c4c:	07d2      	lsls	r2, r2, #31
 8005c4e:	d501      	bpl.n	8005c54 <_printf_float+0x154>
 8005c50:	3301      	adds	r3, #1
 8005c52:	6123      	str	r3, [r4, #16]
 8005c54:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d0a2      	beq.n	8005ba2 <_printf_float+0xa2>
 8005c5c:	232d      	movs	r3, #45	@ 0x2d
 8005c5e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c62:	e79e      	b.n	8005ba2 <_printf_float+0xa2>
 8005c64:	9a06      	ldr	r2, [sp, #24]
 8005c66:	2a47      	cmp	r2, #71	@ 0x47
 8005c68:	d1c2      	bne.n	8005bf0 <_printf_float+0xf0>
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d1c0      	bne.n	8005bf0 <_printf_float+0xf0>
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e7bd      	b.n	8005bee <_printf_float+0xee>
 8005c72:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005c76:	d9db      	bls.n	8005c30 <_printf_float+0x130>
 8005c78:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005c7c:	d118      	bne.n	8005cb0 <_printf_float+0x1b0>
 8005c7e:	2900      	cmp	r1, #0
 8005c80:	6863      	ldr	r3, [r4, #4]
 8005c82:	dd0b      	ble.n	8005c9c <_printf_float+0x19c>
 8005c84:	6121      	str	r1, [r4, #16]
 8005c86:	b913      	cbnz	r3, 8005c8e <_printf_float+0x18e>
 8005c88:	6822      	ldr	r2, [r4, #0]
 8005c8a:	07d0      	lsls	r0, r2, #31
 8005c8c:	d502      	bpl.n	8005c94 <_printf_float+0x194>
 8005c8e:	3301      	adds	r3, #1
 8005c90:	440b      	add	r3, r1
 8005c92:	6123      	str	r3, [r4, #16]
 8005c94:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005c96:	f04f 0900 	mov.w	r9, #0
 8005c9a:	e7db      	b.n	8005c54 <_printf_float+0x154>
 8005c9c:	b913      	cbnz	r3, 8005ca4 <_printf_float+0x1a4>
 8005c9e:	6822      	ldr	r2, [r4, #0]
 8005ca0:	07d2      	lsls	r2, r2, #31
 8005ca2:	d501      	bpl.n	8005ca8 <_printf_float+0x1a8>
 8005ca4:	3302      	adds	r3, #2
 8005ca6:	e7f4      	b.n	8005c92 <_printf_float+0x192>
 8005ca8:	2301      	movs	r3, #1
 8005caa:	e7f2      	b.n	8005c92 <_printf_float+0x192>
 8005cac:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005cb0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005cb2:	4299      	cmp	r1, r3
 8005cb4:	db05      	blt.n	8005cc2 <_printf_float+0x1c2>
 8005cb6:	6823      	ldr	r3, [r4, #0]
 8005cb8:	6121      	str	r1, [r4, #16]
 8005cba:	07d8      	lsls	r0, r3, #31
 8005cbc:	d5ea      	bpl.n	8005c94 <_printf_float+0x194>
 8005cbe:	1c4b      	adds	r3, r1, #1
 8005cc0:	e7e7      	b.n	8005c92 <_printf_float+0x192>
 8005cc2:	2900      	cmp	r1, #0
 8005cc4:	bfd4      	ite	le
 8005cc6:	f1c1 0202 	rsble	r2, r1, #2
 8005cca:	2201      	movgt	r2, #1
 8005ccc:	4413      	add	r3, r2
 8005cce:	e7e0      	b.n	8005c92 <_printf_float+0x192>
 8005cd0:	6823      	ldr	r3, [r4, #0]
 8005cd2:	055a      	lsls	r2, r3, #21
 8005cd4:	d407      	bmi.n	8005ce6 <_printf_float+0x1e6>
 8005cd6:	6923      	ldr	r3, [r4, #16]
 8005cd8:	4642      	mov	r2, r8
 8005cda:	4631      	mov	r1, r6
 8005cdc:	4628      	mov	r0, r5
 8005cde:	47b8      	blx	r7
 8005ce0:	3001      	adds	r0, #1
 8005ce2:	d12b      	bne.n	8005d3c <_printf_float+0x23c>
 8005ce4:	e767      	b.n	8005bb6 <_printf_float+0xb6>
 8005ce6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005cea:	f240 80dd 	bls.w	8005ea8 <_printf_float+0x3a8>
 8005cee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	f7fa fee7 	bl	8000ac8 <__aeabi_dcmpeq>
 8005cfa:	2800      	cmp	r0, #0
 8005cfc:	d033      	beq.n	8005d66 <_printf_float+0x266>
 8005cfe:	4a37      	ldr	r2, [pc, #220]	@ (8005ddc <_printf_float+0x2dc>)
 8005d00:	2301      	movs	r3, #1
 8005d02:	4631      	mov	r1, r6
 8005d04:	4628      	mov	r0, r5
 8005d06:	47b8      	blx	r7
 8005d08:	3001      	adds	r0, #1
 8005d0a:	f43f af54 	beq.w	8005bb6 <_printf_float+0xb6>
 8005d0e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005d12:	4543      	cmp	r3, r8
 8005d14:	db02      	blt.n	8005d1c <_printf_float+0x21c>
 8005d16:	6823      	ldr	r3, [r4, #0]
 8005d18:	07d8      	lsls	r0, r3, #31
 8005d1a:	d50f      	bpl.n	8005d3c <_printf_float+0x23c>
 8005d1c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d20:	4631      	mov	r1, r6
 8005d22:	4628      	mov	r0, r5
 8005d24:	47b8      	blx	r7
 8005d26:	3001      	adds	r0, #1
 8005d28:	f43f af45 	beq.w	8005bb6 <_printf_float+0xb6>
 8005d2c:	f04f 0900 	mov.w	r9, #0
 8005d30:	f108 38ff 	add.w	r8, r8, #4294967295
 8005d34:	f104 0a1a 	add.w	sl, r4, #26
 8005d38:	45c8      	cmp	r8, r9
 8005d3a:	dc09      	bgt.n	8005d50 <_printf_float+0x250>
 8005d3c:	6823      	ldr	r3, [r4, #0]
 8005d3e:	079b      	lsls	r3, r3, #30
 8005d40:	f100 8103 	bmi.w	8005f4a <_printf_float+0x44a>
 8005d44:	68e0      	ldr	r0, [r4, #12]
 8005d46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005d48:	4298      	cmp	r0, r3
 8005d4a:	bfb8      	it	lt
 8005d4c:	4618      	movlt	r0, r3
 8005d4e:	e734      	b.n	8005bba <_printf_float+0xba>
 8005d50:	2301      	movs	r3, #1
 8005d52:	4652      	mov	r2, sl
 8005d54:	4631      	mov	r1, r6
 8005d56:	4628      	mov	r0, r5
 8005d58:	47b8      	blx	r7
 8005d5a:	3001      	adds	r0, #1
 8005d5c:	f43f af2b 	beq.w	8005bb6 <_printf_float+0xb6>
 8005d60:	f109 0901 	add.w	r9, r9, #1
 8005d64:	e7e8      	b.n	8005d38 <_printf_float+0x238>
 8005d66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	dc39      	bgt.n	8005de0 <_printf_float+0x2e0>
 8005d6c:	4a1b      	ldr	r2, [pc, #108]	@ (8005ddc <_printf_float+0x2dc>)
 8005d6e:	2301      	movs	r3, #1
 8005d70:	4631      	mov	r1, r6
 8005d72:	4628      	mov	r0, r5
 8005d74:	47b8      	blx	r7
 8005d76:	3001      	adds	r0, #1
 8005d78:	f43f af1d 	beq.w	8005bb6 <_printf_float+0xb6>
 8005d7c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005d80:	ea59 0303 	orrs.w	r3, r9, r3
 8005d84:	d102      	bne.n	8005d8c <_printf_float+0x28c>
 8005d86:	6823      	ldr	r3, [r4, #0]
 8005d88:	07d9      	lsls	r1, r3, #31
 8005d8a:	d5d7      	bpl.n	8005d3c <_printf_float+0x23c>
 8005d8c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d90:	4631      	mov	r1, r6
 8005d92:	4628      	mov	r0, r5
 8005d94:	47b8      	blx	r7
 8005d96:	3001      	adds	r0, #1
 8005d98:	f43f af0d 	beq.w	8005bb6 <_printf_float+0xb6>
 8005d9c:	f04f 0a00 	mov.w	sl, #0
 8005da0:	f104 0b1a 	add.w	fp, r4, #26
 8005da4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005da6:	425b      	negs	r3, r3
 8005da8:	4553      	cmp	r3, sl
 8005daa:	dc01      	bgt.n	8005db0 <_printf_float+0x2b0>
 8005dac:	464b      	mov	r3, r9
 8005dae:	e793      	b.n	8005cd8 <_printf_float+0x1d8>
 8005db0:	2301      	movs	r3, #1
 8005db2:	465a      	mov	r2, fp
 8005db4:	4631      	mov	r1, r6
 8005db6:	4628      	mov	r0, r5
 8005db8:	47b8      	blx	r7
 8005dba:	3001      	adds	r0, #1
 8005dbc:	f43f aefb 	beq.w	8005bb6 <_printf_float+0xb6>
 8005dc0:	f10a 0a01 	add.w	sl, sl, #1
 8005dc4:	e7ee      	b.n	8005da4 <_printf_float+0x2a4>
 8005dc6:	bf00      	nop
 8005dc8:	7fefffff 	.word	0x7fefffff
 8005dcc:	08008374 	.word	0x08008374
 8005dd0:	08008378 	.word	0x08008378
 8005dd4:	0800837c 	.word	0x0800837c
 8005dd8:	08008380 	.word	0x08008380
 8005ddc:	08008384 	.word	0x08008384
 8005de0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005de2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005de6:	4553      	cmp	r3, sl
 8005de8:	bfa8      	it	ge
 8005dea:	4653      	movge	r3, sl
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	4699      	mov	r9, r3
 8005df0:	dc36      	bgt.n	8005e60 <_printf_float+0x360>
 8005df2:	f04f 0b00 	mov.w	fp, #0
 8005df6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005dfa:	f104 021a 	add.w	r2, r4, #26
 8005dfe:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005e00:	9306      	str	r3, [sp, #24]
 8005e02:	eba3 0309 	sub.w	r3, r3, r9
 8005e06:	455b      	cmp	r3, fp
 8005e08:	dc31      	bgt.n	8005e6e <_printf_float+0x36e>
 8005e0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e0c:	459a      	cmp	sl, r3
 8005e0e:	dc3a      	bgt.n	8005e86 <_printf_float+0x386>
 8005e10:	6823      	ldr	r3, [r4, #0]
 8005e12:	07da      	lsls	r2, r3, #31
 8005e14:	d437      	bmi.n	8005e86 <_printf_float+0x386>
 8005e16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e18:	ebaa 0903 	sub.w	r9, sl, r3
 8005e1c:	9b06      	ldr	r3, [sp, #24]
 8005e1e:	ebaa 0303 	sub.w	r3, sl, r3
 8005e22:	4599      	cmp	r9, r3
 8005e24:	bfa8      	it	ge
 8005e26:	4699      	movge	r9, r3
 8005e28:	f1b9 0f00 	cmp.w	r9, #0
 8005e2c:	dc33      	bgt.n	8005e96 <_printf_float+0x396>
 8005e2e:	f04f 0800 	mov.w	r8, #0
 8005e32:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005e36:	f104 0b1a 	add.w	fp, r4, #26
 8005e3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e3c:	ebaa 0303 	sub.w	r3, sl, r3
 8005e40:	eba3 0309 	sub.w	r3, r3, r9
 8005e44:	4543      	cmp	r3, r8
 8005e46:	f77f af79 	ble.w	8005d3c <_printf_float+0x23c>
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	465a      	mov	r2, fp
 8005e4e:	4631      	mov	r1, r6
 8005e50:	4628      	mov	r0, r5
 8005e52:	47b8      	blx	r7
 8005e54:	3001      	adds	r0, #1
 8005e56:	f43f aeae 	beq.w	8005bb6 <_printf_float+0xb6>
 8005e5a:	f108 0801 	add.w	r8, r8, #1
 8005e5e:	e7ec      	b.n	8005e3a <_printf_float+0x33a>
 8005e60:	4642      	mov	r2, r8
 8005e62:	4631      	mov	r1, r6
 8005e64:	4628      	mov	r0, r5
 8005e66:	47b8      	blx	r7
 8005e68:	3001      	adds	r0, #1
 8005e6a:	d1c2      	bne.n	8005df2 <_printf_float+0x2f2>
 8005e6c:	e6a3      	b.n	8005bb6 <_printf_float+0xb6>
 8005e6e:	2301      	movs	r3, #1
 8005e70:	4631      	mov	r1, r6
 8005e72:	4628      	mov	r0, r5
 8005e74:	9206      	str	r2, [sp, #24]
 8005e76:	47b8      	blx	r7
 8005e78:	3001      	adds	r0, #1
 8005e7a:	f43f ae9c 	beq.w	8005bb6 <_printf_float+0xb6>
 8005e7e:	9a06      	ldr	r2, [sp, #24]
 8005e80:	f10b 0b01 	add.w	fp, fp, #1
 8005e84:	e7bb      	b.n	8005dfe <_printf_float+0x2fe>
 8005e86:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e8a:	4631      	mov	r1, r6
 8005e8c:	4628      	mov	r0, r5
 8005e8e:	47b8      	blx	r7
 8005e90:	3001      	adds	r0, #1
 8005e92:	d1c0      	bne.n	8005e16 <_printf_float+0x316>
 8005e94:	e68f      	b.n	8005bb6 <_printf_float+0xb6>
 8005e96:	9a06      	ldr	r2, [sp, #24]
 8005e98:	464b      	mov	r3, r9
 8005e9a:	4442      	add	r2, r8
 8005e9c:	4631      	mov	r1, r6
 8005e9e:	4628      	mov	r0, r5
 8005ea0:	47b8      	blx	r7
 8005ea2:	3001      	adds	r0, #1
 8005ea4:	d1c3      	bne.n	8005e2e <_printf_float+0x32e>
 8005ea6:	e686      	b.n	8005bb6 <_printf_float+0xb6>
 8005ea8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005eac:	f1ba 0f01 	cmp.w	sl, #1
 8005eb0:	dc01      	bgt.n	8005eb6 <_printf_float+0x3b6>
 8005eb2:	07db      	lsls	r3, r3, #31
 8005eb4:	d536      	bpl.n	8005f24 <_printf_float+0x424>
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	4642      	mov	r2, r8
 8005eba:	4631      	mov	r1, r6
 8005ebc:	4628      	mov	r0, r5
 8005ebe:	47b8      	blx	r7
 8005ec0:	3001      	adds	r0, #1
 8005ec2:	f43f ae78 	beq.w	8005bb6 <_printf_float+0xb6>
 8005ec6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005eca:	4631      	mov	r1, r6
 8005ecc:	4628      	mov	r0, r5
 8005ece:	47b8      	blx	r7
 8005ed0:	3001      	adds	r0, #1
 8005ed2:	f43f ae70 	beq.w	8005bb6 <_printf_float+0xb6>
 8005ed6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005eda:	2200      	movs	r2, #0
 8005edc:	2300      	movs	r3, #0
 8005ede:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005ee2:	f7fa fdf1 	bl	8000ac8 <__aeabi_dcmpeq>
 8005ee6:	b9c0      	cbnz	r0, 8005f1a <_printf_float+0x41a>
 8005ee8:	4653      	mov	r3, sl
 8005eea:	f108 0201 	add.w	r2, r8, #1
 8005eee:	4631      	mov	r1, r6
 8005ef0:	4628      	mov	r0, r5
 8005ef2:	47b8      	blx	r7
 8005ef4:	3001      	adds	r0, #1
 8005ef6:	d10c      	bne.n	8005f12 <_printf_float+0x412>
 8005ef8:	e65d      	b.n	8005bb6 <_printf_float+0xb6>
 8005efa:	2301      	movs	r3, #1
 8005efc:	465a      	mov	r2, fp
 8005efe:	4631      	mov	r1, r6
 8005f00:	4628      	mov	r0, r5
 8005f02:	47b8      	blx	r7
 8005f04:	3001      	adds	r0, #1
 8005f06:	f43f ae56 	beq.w	8005bb6 <_printf_float+0xb6>
 8005f0a:	f108 0801 	add.w	r8, r8, #1
 8005f0e:	45d0      	cmp	r8, sl
 8005f10:	dbf3      	blt.n	8005efa <_printf_float+0x3fa>
 8005f12:	464b      	mov	r3, r9
 8005f14:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005f18:	e6df      	b.n	8005cda <_printf_float+0x1da>
 8005f1a:	f04f 0800 	mov.w	r8, #0
 8005f1e:	f104 0b1a 	add.w	fp, r4, #26
 8005f22:	e7f4      	b.n	8005f0e <_printf_float+0x40e>
 8005f24:	2301      	movs	r3, #1
 8005f26:	4642      	mov	r2, r8
 8005f28:	e7e1      	b.n	8005eee <_printf_float+0x3ee>
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	464a      	mov	r2, r9
 8005f2e:	4631      	mov	r1, r6
 8005f30:	4628      	mov	r0, r5
 8005f32:	47b8      	blx	r7
 8005f34:	3001      	adds	r0, #1
 8005f36:	f43f ae3e 	beq.w	8005bb6 <_printf_float+0xb6>
 8005f3a:	f108 0801 	add.w	r8, r8, #1
 8005f3e:	68e3      	ldr	r3, [r4, #12]
 8005f40:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005f42:	1a5b      	subs	r3, r3, r1
 8005f44:	4543      	cmp	r3, r8
 8005f46:	dcf0      	bgt.n	8005f2a <_printf_float+0x42a>
 8005f48:	e6fc      	b.n	8005d44 <_printf_float+0x244>
 8005f4a:	f04f 0800 	mov.w	r8, #0
 8005f4e:	f104 0919 	add.w	r9, r4, #25
 8005f52:	e7f4      	b.n	8005f3e <_printf_float+0x43e>

08005f54 <_printf_common>:
 8005f54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f58:	4616      	mov	r6, r2
 8005f5a:	4698      	mov	r8, r3
 8005f5c:	688a      	ldr	r2, [r1, #8]
 8005f5e:	690b      	ldr	r3, [r1, #16]
 8005f60:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005f64:	4293      	cmp	r3, r2
 8005f66:	bfb8      	it	lt
 8005f68:	4613      	movlt	r3, r2
 8005f6a:	6033      	str	r3, [r6, #0]
 8005f6c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005f70:	4607      	mov	r7, r0
 8005f72:	460c      	mov	r4, r1
 8005f74:	b10a      	cbz	r2, 8005f7a <_printf_common+0x26>
 8005f76:	3301      	adds	r3, #1
 8005f78:	6033      	str	r3, [r6, #0]
 8005f7a:	6823      	ldr	r3, [r4, #0]
 8005f7c:	0699      	lsls	r1, r3, #26
 8005f7e:	bf42      	ittt	mi
 8005f80:	6833      	ldrmi	r3, [r6, #0]
 8005f82:	3302      	addmi	r3, #2
 8005f84:	6033      	strmi	r3, [r6, #0]
 8005f86:	6825      	ldr	r5, [r4, #0]
 8005f88:	f015 0506 	ands.w	r5, r5, #6
 8005f8c:	d106      	bne.n	8005f9c <_printf_common+0x48>
 8005f8e:	f104 0a19 	add.w	sl, r4, #25
 8005f92:	68e3      	ldr	r3, [r4, #12]
 8005f94:	6832      	ldr	r2, [r6, #0]
 8005f96:	1a9b      	subs	r3, r3, r2
 8005f98:	42ab      	cmp	r3, r5
 8005f9a:	dc26      	bgt.n	8005fea <_printf_common+0x96>
 8005f9c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005fa0:	6822      	ldr	r2, [r4, #0]
 8005fa2:	3b00      	subs	r3, #0
 8005fa4:	bf18      	it	ne
 8005fa6:	2301      	movne	r3, #1
 8005fa8:	0692      	lsls	r2, r2, #26
 8005faa:	d42b      	bmi.n	8006004 <_printf_common+0xb0>
 8005fac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005fb0:	4641      	mov	r1, r8
 8005fb2:	4638      	mov	r0, r7
 8005fb4:	47c8      	blx	r9
 8005fb6:	3001      	adds	r0, #1
 8005fb8:	d01e      	beq.n	8005ff8 <_printf_common+0xa4>
 8005fba:	6823      	ldr	r3, [r4, #0]
 8005fbc:	6922      	ldr	r2, [r4, #16]
 8005fbe:	f003 0306 	and.w	r3, r3, #6
 8005fc2:	2b04      	cmp	r3, #4
 8005fc4:	bf02      	ittt	eq
 8005fc6:	68e5      	ldreq	r5, [r4, #12]
 8005fc8:	6833      	ldreq	r3, [r6, #0]
 8005fca:	1aed      	subeq	r5, r5, r3
 8005fcc:	68a3      	ldr	r3, [r4, #8]
 8005fce:	bf0c      	ite	eq
 8005fd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005fd4:	2500      	movne	r5, #0
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	bfc4      	itt	gt
 8005fda:	1a9b      	subgt	r3, r3, r2
 8005fdc:	18ed      	addgt	r5, r5, r3
 8005fde:	2600      	movs	r6, #0
 8005fe0:	341a      	adds	r4, #26
 8005fe2:	42b5      	cmp	r5, r6
 8005fe4:	d11a      	bne.n	800601c <_printf_common+0xc8>
 8005fe6:	2000      	movs	r0, #0
 8005fe8:	e008      	b.n	8005ffc <_printf_common+0xa8>
 8005fea:	2301      	movs	r3, #1
 8005fec:	4652      	mov	r2, sl
 8005fee:	4641      	mov	r1, r8
 8005ff0:	4638      	mov	r0, r7
 8005ff2:	47c8      	blx	r9
 8005ff4:	3001      	adds	r0, #1
 8005ff6:	d103      	bne.n	8006000 <_printf_common+0xac>
 8005ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8005ffc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006000:	3501      	adds	r5, #1
 8006002:	e7c6      	b.n	8005f92 <_printf_common+0x3e>
 8006004:	18e1      	adds	r1, r4, r3
 8006006:	1c5a      	adds	r2, r3, #1
 8006008:	2030      	movs	r0, #48	@ 0x30
 800600a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800600e:	4422      	add	r2, r4
 8006010:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006014:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006018:	3302      	adds	r3, #2
 800601a:	e7c7      	b.n	8005fac <_printf_common+0x58>
 800601c:	2301      	movs	r3, #1
 800601e:	4622      	mov	r2, r4
 8006020:	4641      	mov	r1, r8
 8006022:	4638      	mov	r0, r7
 8006024:	47c8      	blx	r9
 8006026:	3001      	adds	r0, #1
 8006028:	d0e6      	beq.n	8005ff8 <_printf_common+0xa4>
 800602a:	3601      	adds	r6, #1
 800602c:	e7d9      	b.n	8005fe2 <_printf_common+0x8e>
	...

08006030 <_printf_i>:
 8006030:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006034:	7e0f      	ldrb	r7, [r1, #24]
 8006036:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006038:	2f78      	cmp	r7, #120	@ 0x78
 800603a:	4691      	mov	r9, r2
 800603c:	4680      	mov	r8, r0
 800603e:	460c      	mov	r4, r1
 8006040:	469a      	mov	sl, r3
 8006042:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006046:	d807      	bhi.n	8006058 <_printf_i+0x28>
 8006048:	2f62      	cmp	r7, #98	@ 0x62
 800604a:	d80a      	bhi.n	8006062 <_printf_i+0x32>
 800604c:	2f00      	cmp	r7, #0
 800604e:	f000 80d2 	beq.w	80061f6 <_printf_i+0x1c6>
 8006052:	2f58      	cmp	r7, #88	@ 0x58
 8006054:	f000 80b9 	beq.w	80061ca <_printf_i+0x19a>
 8006058:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800605c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006060:	e03a      	b.n	80060d8 <_printf_i+0xa8>
 8006062:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006066:	2b15      	cmp	r3, #21
 8006068:	d8f6      	bhi.n	8006058 <_printf_i+0x28>
 800606a:	a101      	add	r1, pc, #4	@ (adr r1, 8006070 <_printf_i+0x40>)
 800606c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006070:	080060c9 	.word	0x080060c9
 8006074:	080060dd 	.word	0x080060dd
 8006078:	08006059 	.word	0x08006059
 800607c:	08006059 	.word	0x08006059
 8006080:	08006059 	.word	0x08006059
 8006084:	08006059 	.word	0x08006059
 8006088:	080060dd 	.word	0x080060dd
 800608c:	08006059 	.word	0x08006059
 8006090:	08006059 	.word	0x08006059
 8006094:	08006059 	.word	0x08006059
 8006098:	08006059 	.word	0x08006059
 800609c:	080061dd 	.word	0x080061dd
 80060a0:	08006107 	.word	0x08006107
 80060a4:	08006197 	.word	0x08006197
 80060a8:	08006059 	.word	0x08006059
 80060ac:	08006059 	.word	0x08006059
 80060b0:	080061ff 	.word	0x080061ff
 80060b4:	08006059 	.word	0x08006059
 80060b8:	08006107 	.word	0x08006107
 80060bc:	08006059 	.word	0x08006059
 80060c0:	08006059 	.word	0x08006059
 80060c4:	0800619f 	.word	0x0800619f
 80060c8:	6833      	ldr	r3, [r6, #0]
 80060ca:	1d1a      	adds	r2, r3, #4
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	6032      	str	r2, [r6, #0]
 80060d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80060d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80060d8:	2301      	movs	r3, #1
 80060da:	e09d      	b.n	8006218 <_printf_i+0x1e8>
 80060dc:	6833      	ldr	r3, [r6, #0]
 80060de:	6820      	ldr	r0, [r4, #0]
 80060e0:	1d19      	adds	r1, r3, #4
 80060e2:	6031      	str	r1, [r6, #0]
 80060e4:	0606      	lsls	r6, r0, #24
 80060e6:	d501      	bpl.n	80060ec <_printf_i+0xbc>
 80060e8:	681d      	ldr	r5, [r3, #0]
 80060ea:	e003      	b.n	80060f4 <_printf_i+0xc4>
 80060ec:	0645      	lsls	r5, r0, #25
 80060ee:	d5fb      	bpl.n	80060e8 <_printf_i+0xb8>
 80060f0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80060f4:	2d00      	cmp	r5, #0
 80060f6:	da03      	bge.n	8006100 <_printf_i+0xd0>
 80060f8:	232d      	movs	r3, #45	@ 0x2d
 80060fa:	426d      	negs	r5, r5
 80060fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006100:	4859      	ldr	r0, [pc, #356]	@ (8006268 <_printf_i+0x238>)
 8006102:	230a      	movs	r3, #10
 8006104:	e011      	b.n	800612a <_printf_i+0xfa>
 8006106:	6821      	ldr	r1, [r4, #0]
 8006108:	6833      	ldr	r3, [r6, #0]
 800610a:	0608      	lsls	r0, r1, #24
 800610c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006110:	d402      	bmi.n	8006118 <_printf_i+0xe8>
 8006112:	0649      	lsls	r1, r1, #25
 8006114:	bf48      	it	mi
 8006116:	b2ad      	uxthmi	r5, r5
 8006118:	2f6f      	cmp	r7, #111	@ 0x6f
 800611a:	4853      	ldr	r0, [pc, #332]	@ (8006268 <_printf_i+0x238>)
 800611c:	6033      	str	r3, [r6, #0]
 800611e:	bf14      	ite	ne
 8006120:	230a      	movne	r3, #10
 8006122:	2308      	moveq	r3, #8
 8006124:	2100      	movs	r1, #0
 8006126:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800612a:	6866      	ldr	r6, [r4, #4]
 800612c:	60a6      	str	r6, [r4, #8]
 800612e:	2e00      	cmp	r6, #0
 8006130:	bfa2      	ittt	ge
 8006132:	6821      	ldrge	r1, [r4, #0]
 8006134:	f021 0104 	bicge.w	r1, r1, #4
 8006138:	6021      	strge	r1, [r4, #0]
 800613a:	b90d      	cbnz	r5, 8006140 <_printf_i+0x110>
 800613c:	2e00      	cmp	r6, #0
 800613e:	d04b      	beq.n	80061d8 <_printf_i+0x1a8>
 8006140:	4616      	mov	r6, r2
 8006142:	fbb5 f1f3 	udiv	r1, r5, r3
 8006146:	fb03 5711 	mls	r7, r3, r1, r5
 800614a:	5dc7      	ldrb	r7, [r0, r7]
 800614c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006150:	462f      	mov	r7, r5
 8006152:	42bb      	cmp	r3, r7
 8006154:	460d      	mov	r5, r1
 8006156:	d9f4      	bls.n	8006142 <_printf_i+0x112>
 8006158:	2b08      	cmp	r3, #8
 800615a:	d10b      	bne.n	8006174 <_printf_i+0x144>
 800615c:	6823      	ldr	r3, [r4, #0]
 800615e:	07df      	lsls	r7, r3, #31
 8006160:	d508      	bpl.n	8006174 <_printf_i+0x144>
 8006162:	6923      	ldr	r3, [r4, #16]
 8006164:	6861      	ldr	r1, [r4, #4]
 8006166:	4299      	cmp	r1, r3
 8006168:	bfde      	ittt	le
 800616a:	2330      	movle	r3, #48	@ 0x30
 800616c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006170:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006174:	1b92      	subs	r2, r2, r6
 8006176:	6122      	str	r2, [r4, #16]
 8006178:	f8cd a000 	str.w	sl, [sp]
 800617c:	464b      	mov	r3, r9
 800617e:	aa03      	add	r2, sp, #12
 8006180:	4621      	mov	r1, r4
 8006182:	4640      	mov	r0, r8
 8006184:	f7ff fee6 	bl	8005f54 <_printf_common>
 8006188:	3001      	adds	r0, #1
 800618a:	d14a      	bne.n	8006222 <_printf_i+0x1f2>
 800618c:	f04f 30ff 	mov.w	r0, #4294967295
 8006190:	b004      	add	sp, #16
 8006192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006196:	6823      	ldr	r3, [r4, #0]
 8006198:	f043 0320 	orr.w	r3, r3, #32
 800619c:	6023      	str	r3, [r4, #0]
 800619e:	4833      	ldr	r0, [pc, #204]	@ (800626c <_printf_i+0x23c>)
 80061a0:	2778      	movs	r7, #120	@ 0x78
 80061a2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80061a6:	6823      	ldr	r3, [r4, #0]
 80061a8:	6831      	ldr	r1, [r6, #0]
 80061aa:	061f      	lsls	r7, r3, #24
 80061ac:	f851 5b04 	ldr.w	r5, [r1], #4
 80061b0:	d402      	bmi.n	80061b8 <_printf_i+0x188>
 80061b2:	065f      	lsls	r7, r3, #25
 80061b4:	bf48      	it	mi
 80061b6:	b2ad      	uxthmi	r5, r5
 80061b8:	6031      	str	r1, [r6, #0]
 80061ba:	07d9      	lsls	r1, r3, #31
 80061bc:	bf44      	itt	mi
 80061be:	f043 0320 	orrmi.w	r3, r3, #32
 80061c2:	6023      	strmi	r3, [r4, #0]
 80061c4:	b11d      	cbz	r5, 80061ce <_printf_i+0x19e>
 80061c6:	2310      	movs	r3, #16
 80061c8:	e7ac      	b.n	8006124 <_printf_i+0xf4>
 80061ca:	4827      	ldr	r0, [pc, #156]	@ (8006268 <_printf_i+0x238>)
 80061cc:	e7e9      	b.n	80061a2 <_printf_i+0x172>
 80061ce:	6823      	ldr	r3, [r4, #0]
 80061d0:	f023 0320 	bic.w	r3, r3, #32
 80061d4:	6023      	str	r3, [r4, #0]
 80061d6:	e7f6      	b.n	80061c6 <_printf_i+0x196>
 80061d8:	4616      	mov	r6, r2
 80061da:	e7bd      	b.n	8006158 <_printf_i+0x128>
 80061dc:	6833      	ldr	r3, [r6, #0]
 80061de:	6825      	ldr	r5, [r4, #0]
 80061e0:	6961      	ldr	r1, [r4, #20]
 80061e2:	1d18      	adds	r0, r3, #4
 80061e4:	6030      	str	r0, [r6, #0]
 80061e6:	062e      	lsls	r6, r5, #24
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	d501      	bpl.n	80061f0 <_printf_i+0x1c0>
 80061ec:	6019      	str	r1, [r3, #0]
 80061ee:	e002      	b.n	80061f6 <_printf_i+0x1c6>
 80061f0:	0668      	lsls	r0, r5, #25
 80061f2:	d5fb      	bpl.n	80061ec <_printf_i+0x1bc>
 80061f4:	8019      	strh	r1, [r3, #0]
 80061f6:	2300      	movs	r3, #0
 80061f8:	6123      	str	r3, [r4, #16]
 80061fa:	4616      	mov	r6, r2
 80061fc:	e7bc      	b.n	8006178 <_printf_i+0x148>
 80061fe:	6833      	ldr	r3, [r6, #0]
 8006200:	1d1a      	adds	r2, r3, #4
 8006202:	6032      	str	r2, [r6, #0]
 8006204:	681e      	ldr	r6, [r3, #0]
 8006206:	6862      	ldr	r2, [r4, #4]
 8006208:	2100      	movs	r1, #0
 800620a:	4630      	mov	r0, r6
 800620c:	f7f9 ffe0 	bl	80001d0 <memchr>
 8006210:	b108      	cbz	r0, 8006216 <_printf_i+0x1e6>
 8006212:	1b80      	subs	r0, r0, r6
 8006214:	6060      	str	r0, [r4, #4]
 8006216:	6863      	ldr	r3, [r4, #4]
 8006218:	6123      	str	r3, [r4, #16]
 800621a:	2300      	movs	r3, #0
 800621c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006220:	e7aa      	b.n	8006178 <_printf_i+0x148>
 8006222:	6923      	ldr	r3, [r4, #16]
 8006224:	4632      	mov	r2, r6
 8006226:	4649      	mov	r1, r9
 8006228:	4640      	mov	r0, r8
 800622a:	47d0      	blx	sl
 800622c:	3001      	adds	r0, #1
 800622e:	d0ad      	beq.n	800618c <_printf_i+0x15c>
 8006230:	6823      	ldr	r3, [r4, #0]
 8006232:	079b      	lsls	r3, r3, #30
 8006234:	d413      	bmi.n	800625e <_printf_i+0x22e>
 8006236:	68e0      	ldr	r0, [r4, #12]
 8006238:	9b03      	ldr	r3, [sp, #12]
 800623a:	4298      	cmp	r0, r3
 800623c:	bfb8      	it	lt
 800623e:	4618      	movlt	r0, r3
 8006240:	e7a6      	b.n	8006190 <_printf_i+0x160>
 8006242:	2301      	movs	r3, #1
 8006244:	4632      	mov	r2, r6
 8006246:	4649      	mov	r1, r9
 8006248:	4640      	mov	r0, r8
 800624a:	47d0      	blx	sl
 800624c:	3001      	adds	r0, #1
 800624e:	d09d      	beq.n	800618c <_printf_i+0x15c>
 8006250:	3501      	adds	r5, #1
 8006252:	68e3      	ldr	r3, [r4, #12]
 8006254:	9903      	ldr	r1, [sp, #12]
 8006256:	1a5b      	subs	r3, r3, r1
 8006258:	42ab      	cmp	r3, r5
 800625a:	dcf2      	bgt.n	8006242 <_printf_i+0x212>
 800625c:	e7eb      	b.n	8006236 <_printf_i+0x206>
 800625e:	2500      	movs	r5, #0
 8006260:	f104 0619 	add.w	r6, r4, #25
 8006264:	e7f5      	b.n	8006252 <_printf_i+0x222>
 8006266:	bf00      	nop
 8006268:	08008386 	.word	0x08008386
 800626c:	08008397 	.word	0x08008397

08006270 <std>:
 8006270:	2300      	movs	r3, #0
 8006272:	b510      	push	{r4, lr}
 8006274:	4604      	mov	r4, r0
 8006276:	e9c0 3300 	strd	r3, r3, [r0]
 800627a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800627e:	6083      	str	r3, [r0, #8]
 8006280:	8181      	strh	r1, [r0, #12]
 8006282:	6643      	str	r3, [r0, #100]	@ 0x64
 8006284:	81c2      	strh	r2, [r0, #14]
 8006286:	6183      	str	r3, [r0, #24]
 8006288:	4619      	mov	r1, r3
 800628a:	2208      	movs	r2, #8
 800628c:	305c      	adds	r0, #92	@ 0x5c
 800628e:	f000 f906 	bl	800649e <memset>
 8006292:	4b0d      	ldr	r3, [pc, #52]	@ (80062c8 <std+0x58>)
 8006294:	6263      	str	r3, [r4, #36]	@ 0x24
 8006296:	4b0d      	ldr	r3, [pc, #52]	@ (80062cc <std+0x5c>)
 8006298:	62a3      	str	r3, [r4, #40]	@ 0x28
 800629a:	4b0d      	ldr	r3, [pc, #52]	@ (80062d0 <std+0x60>)
 800629c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800629e:	4b0d      	ldr	r3, [pc, #52]	@ (80062d4 <std+0x64>)
 80062a0:	6323      	str	r3, [r4, #48]	@ 0x30
 80062a2:	4b0d      	ldr	r3, [pc, #52]	@ (80062d8 <std+0x68>)
 80062a4:	6224      	str	r4, [r4, #32]
 80062a6:	429c      	cmp	r4, r3
 80062a8:	d006      	beq.n	80062b8 <std+0x48>
 80062aa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80062ae:	4294      	cmp	r4, r2
 80062b0:	d002      	beq.n	80062b8 <std+0x48>
 80062b2:	33d0      	adds	r3, #208	@ 0xd0
 80062b4:	429c      	cmp	r4, r3
 80062b6:	d105      	bne.n	80062c4 <std+0x54>
 80062b8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80062bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062c0:	f000 b96a 	b.w	8006598 <__retarget_lock_init_recursive>
 80062c4:	bd10      	pop	{r4, pc}
 80062c6:	bf00      	nop
 80062c8:	08006419 	.word	0x08006419
 80062cc:	0800643b 	.word	0x0800643b
 80062d0:	08006473 	.word	0x08006473
 80062d4:	08006497 	.word	0x08006497
 80062d8:	20000330 	.word	0x20000330

080062dc <stdio_exit_handler>:
 80062dc:	4a02      	ldr	r2, [pc, #8]	@ (80062e8 <stdio_exit_handler+0xc>)
 80062de:	4903      	ldr	r1, [pc, #12]	@ (80062ec <stdio_exit_handler+0x10>)
 80062e0:	4803      	ldr	r0, [pc, #12]	@ (80062f0 <stdio_exit_handler+0x14>)
 80062e2:	f000 b869 	b.w	80063b8 <_fwalk_sglue>
 80062e6:	bf00      	nop
 80062e8:	2000000c 	.word	0x2000000c
 80062ec:	08007ec9 	.word	0x08007ec9
 80062f0:	2000001c 	.word	0x2000001c

080062f4 <cleanup_stdio>:
 80062f4:	6841      	ldr	r1, [r0, #4]
 80062f6:	4b0c      	ldr	r3, [pc, #48]	@ (8006328 <cleanup_stdio+0x34>)
 80062f8:	4299      	cmp	r1, r3
 80062fa:	b510      	push	{r4, lr}
 80062fc:	4604      	mov	r4, r0
 80062fe:	d001      	beq.n	8006304 <cleanup_stdio+0x10>
 8006300:	f001 fde2 	bl	8007ec8 <_fflush_r>
 8006304:	68a1      	ldr	r1, [r4, #8]
 8006306:	4b09      	ldr	r3, [pc, #36]	@ (800632c <cleanup_stdio+0x38>)
 8006308:	4299      	cmp	r1, r3
 800630a:	d002      	beq.n	8006312 <cleanup_stdio+0x1e>
 800630c:	4620      	mov	r0, r4
 800630e:	f001 fddb 	bl	8007ec8 <_fflush_r>
 8006312:	68e1      	ldr	r1, [r4, #12]
 8006314:	4b06      	ldr	r3, [pc, #24]	@ (8006330 <cleanup_stdio+0x3c>)
 8006316:	4299      	cmp	r1, r3
 8006318:	d004      	beq.n	8006324 <cleanup_stdio+0x30>
 800631a:	4620      	mov	r0, r4
 800631c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006320:	f001 bdd2 	b.w	8007ec8 <_fflush_r>
 8006324:	bd10      	pop	{r4, pc}
 8006326:	bf00      	nop
 8006328:	20000330 	.word	0x20000330
 800632c:	20000398 	.word	0x20000398
 8006330:	20000400 	.word	0x20000400

08006334 <global_stdio_init.part.0>:
 8006334:	b510      	push	{r4, lr}
 8006336:	4b0b      	ldr	r3, [pc, #44]	@ (8006364 <global_stdio_init.part.0+0x30>)
 8006338:	4c0b      	ldr	r4, [pc, #44]	@ (8006368 <global_stdio_init.part.0+0x34>)
 800633a:	4a0c      	ldr	r2, [pc, #48]	@ (800636c <global_stdio_init.part.0+0x38>)
 800633c:	601a      	str	r2, [r3, #0]
 800633e:	4620      	mov	r0, r4
 8006340:	2200      	movs	r2, #0
 8006342:	2104      	movs	r1, #4
 8006344:	f7ff ff94 	bl	8006270 <std>
 8006348:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800634c:	2201      	movs	r2, #1
 800634e:	2109      	movs	r1, #9
 8006350:	f7ff ff8e 	bl	8006270 <std>
 8006354:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006358:	2202      	movs	r2, #2
 800635a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800635e:	2112      	movs	r1, #18
 8006360:	f7ff bf86 	b.w	8006270 <std>
 8006364:	20000468 	.word	0x20000468
 8006368:	20000330 	.word	0x20000330
 800636c:	080062dd 	.word	0x080062dd

08006370 <__sfp_lock_acquire>:
 8006370:	4801      	ldr	r0, [pc, #4]	@ (8006378 <__sfp_lock_acquire+0x8>)
 8006372:	f000 b912 	b.w	800659a <__retarget_lock_acquire_recursive>
 8006376:	bf00      	nop
 8006378:	20000471 	.word	0x20000471

0800637c <__sfp_lock_release>:
 800637c:	4801      	ldr	r0, [pc, #4]	@ (8006384 <__sfp_lock_release+0x8>)
 800637e:	f000 b90d 	b.w	800659c <__retarget_lock_release_recursive>
 8006382:	bf00      	nop
 8006384:	20000471 	.word	0x20000471

08006388 <__sinit>:
 8006388:	b510      	push	{r4, lr}
 800638a:	4604      	mov	r4, r0
 800638c:	f7ff fff0 	bl	8006370 <__sfp_lock_acquire>
 8006390:	6a23      	ldr	r3, [r4, #32]
 8006392:	b11b      	cbz	r3, 800639c <__sinit+0x14>
 8006394:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006398:	f7ff bff0 	b.w	800637c <__sfp_lock_release>
 800639c:	4b04      	ldr	r3, [pc, #16]	@ (80063b0 <__sinit+0x28>)
 800639e:	6223      	str	r3, [r4, #32]
 80063a0:	4b04      	ldr	r3, [pc, #16]	@ (80063b4 <__sinit+0x2c>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d1f5      	bne.n	8006394 <__sinit+0xc>
 80063a8:	f7ff ffc4 	bl	8006334 <global_stdio_init.part.0>
 80063ac:	e7f2      	b.n	8006394 <__sinit+0xc>
 80063ae:	bf00      	nop
 80063b0:	080062f5 	.word	0x080062f5
 80063b4:	20000468 	.word	0x20000468

080063b8 <_fwalk_sglue>:
 80063b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063bc:	4607      	mov	r7, r0
 80063be:	4688      	mov	r8, r1
 80063c0:	4614      	mov	r4, r2
 80063c2:	2600      	movs	r6, #0
 80063c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80063c8:	f1b9 0901 	subs.w	r9, r9, #1
 80063cc:	d505      	bpl.n	80063da <_fwalk_sglue+0x22>
 80063ce:	6824      	ldr	r4, [r4, #0]
 80063d0:	2c00      	cmp	r4, #0
 80063d2:	d1f7      	bne.n	80063c4 <_fwalk_sglue+0xc>
 80063d4:	4630      	mov	r0, r6
 80063d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063da:	89ab      	ldrh	r3, [r5, #12]
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d907      	bls.n	80063f0 <_fwalk_sglue+0x38>
 80063e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80063e4:	3301      	adds	r3, #1
 80063e6:	d003      	beq.n	80063f0 <_fwalk_sglue+0x38>
 80063e8:	4629      	mov	r1, r5
 80063ea:	4638      	mov	r0, r7
 80063ec:	47c0      	blx	r8
 80063ee:	4306      	orrs	r6, r0
 80063f0:	3568      	adds	r5, #104	@ 0x68
 80063f2:	e7e9      	b.n	80063c8 <_fwalk_sglue+0x10>

080063f4 <iprintf>:
 80063f4:	b40f      	push	{r0, r1, r2, r3}
 80063f6:	b507      	push	{r0, r1, r2, lr}
 80063f8:	4906      	ldr	r1, [pc, #24]	@ (8006414 <iprintf+0x20>)
 80063fa:	ab04      	add	r3, sp, #16
 80063fc:	6808      	ldr	r0, [r1, #0]
 80063fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8006402:	6881      	ldr	r1, [r0, #8]
 8006404:	9301      	str	r3, [sp, #4]
 8006406:	f001 fbc3 	bl	8007b90 <_vfiprintf_r>
 800640a:	b003      	add	sp, #12
 800640c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006410:	b004      	add	sp, #16
 8006412:	4770      	bx	lr
 8006414:	20000018 	.word	0x20000018

08006418 <__sread>:
 8006418:	b510      	push	{r4, lr}
 800641a:	460c      	mov	r4, r1
 800641c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006420:	f000 f86c 	bl	80064fc <_read_r>
 8006424:	2800      	cmp	r0, #0
 8006426:	bfab      	itete	ge
 8006428:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800642a:	89a3      	ldrhlt	r3, [r4, #12]
 800642c:	181b      	addge	r3, r3, r0
 800642e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006432:	bfac      	ite	ge
 8006434:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006436:	81a3      	strhlt	r3, [r4, #12]
 8006438:	bd10      	pop	{r4, pc}

0800643a <__swrite>:
 800643a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800643e:	461f      	mov	r7, r3
 8006440:	898b      	ldrh	r3, [r1, #12]
 8006442:	05db      	lsls	r3, r3, #23
 8006444:	4605      	mov	r5, r0
 8006446:	460c      	mov	r4, r1
 8006448:	4616      	mov	r6, r2
 800644a:	d505      	bpl.n	8006458 <__swrite+0x1e>
 800644c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006450:	2302      	movs	r3, #2
 8006452:	2200      	movs	r2, #0
 8006454:	f000 f840 	bl	80064d8 <_lseek_r>
 8006458:	89a3      	ldrh	r3, [r4, #12]
 800645a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800645e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006462:	81a3      	strh	r3, [r4, #12]
 8006464:	4632      	mov	r2, r6
 8006466:	463b      	mov	r3, r7
 8006468:	4628      	mov	r0, r5
 800646a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800646e:	f000 b857 	b.w	8006520 <_write_r>

08006472 <__sseek>:
 8006472:	b510      	push	{r4, lr}
 8006474:	460c      	mov	r4, r1
 8006476:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800647a:	f000 f82d 	bl	80064d8 <_lseek_r>
 800647e:	1c43      	adds	r3, r0, #1
 8006480:	89a3      	ldrh	r3, [r4, #12]
 8006482:	bf15      	itete	ne
 8006484:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006486:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800648a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800648e:	81a3      	strheq	r3, [r4, #12]
 8006490:	bf18      	it	ne
 8006492:	81a3      	strhne	r3, [r4, #12]
 8006494:	bd10      	pop	{r4, pc}

08006496 <__sclose>:
 8006496:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800649a:	f000 b80d 	b.w	80064b8 <_close_r>

0800649e <memset>:
 800649e:	4402      	add	r2, r0
 80064a0:	4603      	mov	r3, r0
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d100      	bne.n	80064a8 <memset+0xa>
 80064a6:	4770      	bx	lr
 80064a8:	f803 1b01 	strb.w	r1, [r3], #1
 80064ac:	e7f9      	b.n	80064a2 <memset+0x4>
	...

080064b0 <_localeconv_r>:
 80064b0:	4800      	ldr	r0, [pc, #0]	@ (80064b4 <_localeconv_r+0x4>)
 80064b2:	4770      	bx	lr
 80064b4:	20000158 	.word	0x20000158

080064b8 <_close_r>:
 80064b8:	b538      	push	{r3, r4, r5, lr}
 80064ba:	4d06      	ldr	r5, [pc, #24]	@ (80064d4 <_close_r+0x1c>)
 80064bc:	2300      	movs	r3, #0
 80064be:	4604      	mov	r4, r0
 80064c0:	4608      	mov	r0, r1
 80064c2:	602b      	str	r3, [r5, #0]
 80064c4:	f7fb f89a 	bl	80015fc <_close>
 80064c8:	1c43      	adds	r3, r0, #1
 80064ca:	d102      	bne.n	80064d2 <_close_r+0x1a>
 80064cc:	682b      	ldr	r3, [r5, #0]
 80064ce:	b103      	cbz	r3, 80064d2 <_close_r+0x1a>
 80064d0:	6023      	str	r3, [r4, #0]
 80064d2:	bd38      	pop	{r3, r4, r5, pc}
 80064d4:	2000046c 	.word	0x2000046c

080064d8 <_lseek_r>:
 80064d8:	b538      	push	{r3, r4, r5, lr}
 80064da:	4d07      	ldr	r5, [pc, #28]	@ (80064f8 <_lseek_r+0x20>)
 80064dc:	4604      	mov	r4, r0
 80064de:	4608      	mov	r0, r1
 80064e0:	4611      	mov	r1, r2
 80064e2:	2200      	movs	r2, #0
 80064e4:	602a      	str	r2, [r5, #0]
 80064e6:	461a      	mov	r2, r3
 80064e8:	f7fb f8af 	bl	800164a <_lseek>
 80064ec:	1c43      	adds	r3, r0, #1
 80064ee:	d102      	bne.n	80064f6 <_lseek_r+0x1e>
 80064f0:	682b      	ldr	r3, [r5, #0]
 80064f2:	b103      	cbz	r3, 80064f6 <_lseek_r+0x1e>
 80064f4:	6023      	str	r3, [r4, #0]
 80064f6:	bd38      	pop	{r3, r4, r5, pc}
 80064f8:	2000046c 	.word	0x2000046c

080064fc <_read_r>:
 80064fc:	b538      	push	{r3, r4, r5, lr}
 80064fe:	4d07      	ldr	r5, [pc, #28]	@ (800651c <_read_r+0x20>)
 8006500:	4604      	mov	r4, r0
 8006502:	4608      	mov	r0, r1
 8006504:	4611      	mov	r1, r2
 8006506:	2200      	movs	r2, #0
 8006508:	602a      	str	r2, [r5, #0]
 800650a:	461a      	mov	r2, r3
 800650c:	f7fb f83d 	bl	800158a <_read>
 8006510:	1c43      	adds	r3, r0, #1
 8006512:	d102      	bne.n	800651a <_read_r+0x1e>
 8006514:	682b      	ldr	r3, [r5, #0]
 8006516:	b103      	cbz	r3, 800651a <_read_r+0x1e>
 8006518:	6023      	str	r3, [r4, #0]
 800651a:	bd38      	pop	{r3, r4, r5, pc}
 800651c:	2000046c 	.word	0x2000046c

08006520 <_write_r>:
 8006520:	b538      	push	{r3, r4, r5, lr}
 8006522:	4d07      	ldr	r5, [pc, #28]	@ (8006540 <_write_r+0x20>)
 8006524:	4604      	mov	r4, r0
 8006526:	4608      	mov	r0, r1
 8006528:	4611      	mov	r1, r2
 800652a:	2200      	movs	r2, #0
 800652c:	602a      	str	r2, [r5, #0]
 800652e:	461a      	mov	r2, r3
 8006530:	f7fb f848 	bl	80015c4 <_write>
 8006534:	1c43      	adds	r3, r0, #1
 8006536:	d102      	bne.n	800653e <_write_r+0x1e>
 8006538:	682b      	ldr	r3, [r5, #0]
 800653a:	b103      	cbz	r3, 800653e <_write_r+0x1e>
 800653c:	6023      	str	r3, [r4, #0]
 800653e:	bd38      	pop	{r3, r4, r5, pc}
 8006540:	2000046c 	.word	0x2000046c

08006544 <__errno>:
 8006544:	4b01      	ldr	r3, [pc, #4]	@ (800654c <__errno+0x8>)
 8006546:	6818      	ldr	r0, [r3, #0]
 8006548:	4770      	bx	lr
 800654a:	bf00      	nop
 800654c:	20000018 	.word	0x20000018

08006550 <__libc_init_array>:
 8006550:	b570      	push	{r4, r5, r6, lr}
 8006552:	4d0d      	ldr	r5, [pc, #52]	@ (8006588 <__libc_init_array+0x38>)
 8006554:	4c0d      	ldr	r4, [pc, #52]	@ (800658c <__libc_init_array+0x3c>)
 8006556:	1b64      	subs	r4, r4, r5
 8006558:	10a4      	asrs	r4, r4, #2
 800655a:	2600      	movs	r6, #0
 800655c:	42a6      	cmp	r6, r4
 800655e:	d109      	bne.n	8006574 <__libc_init_array+0x24>
 8006560:	4d0b      	ldr	r5, [pc, #44]	@ (8006590 <__libc_init_array+0x40>)
 8006562:	4c0c      	ldr	r4, [pc, #48]	@ (8006594 <__libc_init_array+0x44>)
 8006564:	f001 febe 	bl	80082e4 <_init>
 8006568:	1b64      	subs	r4, r4, r5
 800656a:	10a4      	asrs	r4, r4, #2
 800656c:	2600      	movs	r6, #0
 800656e:	42a6      	cmp	r6, r4
 8006570:	d105      	bne.n	800657e <__libc_init_array+0x2e>
 8006572:	bd70      	pop	{r4, r5, r6, pc}
 8006574:	f855 3b04 	ldr.w	r3, [r5], #4
 8006578:	4798      	blx	r3
 800657a:	3601      	adds	r6, #1
 800657c:	e7ee      	b.n	800655c <__libc_init_array+0xc>
 800657e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006582:	4798      	blx	r3
 8006584:	3601      	adds	r6, #1
 8006586:	e7f2      	b.n	800656e <__libc_init_array+0x1e>
 8006588:	080086f0 	.word	0x080086f0
 800658c:	080086f0 	.word	0x080086f0
 8006590:	080086f0 	.word	0x080086f0
 8006594:	080086f4 	.word	0x080086f4

08006598 <__retarget_lock_init_recursive>:
 8006598:	4770      	bx	lr

0800659a <__retarget_lock_acquire_recursive>:
 800659a:	4770      	bx	lr

0800659c <__retarget_lock_release_recursive>:
 800659c:	4770      	bx	lr

0800659e <quorem>:
 800659e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065a2:	6903      	ldr	r3, [r0, #16]
 80065a4:	690c      	ldr	r4, [r1, #16]
 80065a6:	42a3      	cmp	r3, r4
 80065a8:	4607      	mov	r7, r0
 80065aa:	db7e      	blt.n	80066aa <quorem+0x10c>
 80065ac:	3c01      	subs	r4, #1
 80065ae:	f101 0814 	add.w	r8, r1, #20
 80065b2:	00a3      	lsls	r3, r4, #2
 80065b4:	f100 0514 	add.w	r5, r0, #20
 80065b8:	9300      	str	r3, [sp, #0]
 80065ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80065be:	9301      	str	r3, [sp, #4]
 80065c0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80065c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80065c8:	3301      	adds	r3, #1
 80065ca:	429a      	cmp	r2, r3
 80065cc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80065d0:	fbb2 f6f3 	udiv	r6, r2, r3
 80065d4:	d32e      	bcc.n	8006634 <quorem+0x96>
 80065d6:	f04f 0a00 	mov.w	sl, #0
 80065da:	46c4      	mov	ip, r8
 80065dc:	46ae      	mov	lr, r5
 80065de:	46d3      	mov	fp, sl
 80065e0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80065e4:	b298      	uxth	r0, r3
 80065e6:	fb06 a000 	mla	r0, r6, r0, sl
 80065ea:	0c02      	lsrs	r2, r0, #16
 80065ec:	0c1b      	lsrs	r3, r3, #16
 80065ee:	fb06 2303 	mla	r3, r6, r3, r2
 80065f2:	f8de 2000 	ldr.w	r2, [lr]
 80065f6:	b280      	uxth	r0, r0
 80065f8:	b292      	uxth	r2, r2
 80065fa:	1a12      	subs	r2, r2, r0
 80065fc:	445a      	add	r2, fp
 80065fe:	f8de 0000 	ldr.w	r0, [lr]
 8006602:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006606:	b29b      	uxth	r3, r3
 8006608:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800660c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006610:	b292      	uxth	r2, r2
 8006612:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006616:	45e1      	cmp	r9, ip
 8006618:	f84e 2b04 	str.w	r2, [lr], #4
 800661c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006620:	d2de      	bcs.n	80065e0 <quorem+0x42>
 8006622:	9b00      	ldr	r3, [sp, #0]
 8006624:	58eb      	ldr	r3, [r5, r3]
 8006626:	b92b      	cbnz	r3, 8006634 <quorem+0x96>
 8006628:	9b01      	ldr	r3, [sp, #4]
 800662a:	3b04      	subs	r3, #4
 800662c:	429d      	cmp	r5, r3
 800662e:	461a      	mov	r2, r3
 8006630:	d32f      	bcc.n	8006692 <quorem+0xf4>
 8006632:	613c      	str	r4, [r7, #16]
 8006634:	4638      	mov	r0, r7
 8006636:	f001 f979 	bl	800792c <__mcmp>
 800663a:	2800      	cmp	r0, #0
 800663c:	db25      	blt.n	800668a <quorem+0xec>
 800663e:	4629      	mov	r1, r5
 8006640:	2000      	movs	r0, #0
 8006642:	f858 2b04 	ldr.w	r2, [r8], #4
 8006646:	f8d1 c000 	ldr.w	ip, [r1]
 800664a:	fa1f fe82 	uxth.w	lr, r2
 800664e:	fa1f f38c 	uxth.w	r3, ip
 8006652:	eba3 030e 	sub.w	r3, r3, lr
 8006656:	4403      	add	r3, r0
 8006658:	0c12      	lsrs	r2, r2, #16
 800665a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800665e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006662:	b29b      	uxth	r3, r3
 8006664:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006668:	45c1      	cmp	r9, r8
 800666a:	f841 3b04 	str.w	r3, [r1], #4
 800666e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006672:	d2e6      	bcs.n	8006642 <quorem+0xa4>
 8006674:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006678:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800667c:	b922      	cbnz	r2, 8006688 <quorem+0xea>
 800667e:	3b04      	subs	r3, #4
 8006680:	429d      	cmp	r5, r3
 8006682:	461a      	mov	r2, r3
 8006684:	d30b      	bcc.n	800669e <quorem+0x100>
 8006686:	613c      	str	r4, [r7, #16]
 8006688:	3601      	adds	r6, #1
 800668a:	4630      	mov	r0, r6
 800668c:	b003      	add	sp, #12
 800668e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006692:	6812      	ldr	r2, [r2, #0]
 8006694:	3b04      	subs	r3, #4
 8006696:	2a00      	cmp	r2, #0
 8006698:	d1cb      	bne.n	8006632 <quorem+0x94>
 800669a:	3c01      	subs	r4, #1
 800669c:	e7c6      	b.n	800662c <quorem+0x8e>
 800669e:	6812      	ldr	r2, [r2, #0]
 80066a0:	3b04      	subs	r3, #4
 80066a2:	2a00      	cmp	r2, #0
 80066a4:	d1ef      	bne.n	8006686 <quorem+0xe8>
 80066a6:	3c01      	subs	r4, #1
 80066a8:	e7ea      	b.n	8006680 <quorem+0xe2>
 80066aa:	2000      	movs	r0, #0
 80066ac:	e7ee      	b.n	800668c <quorem+0xee>
	...

080066b0 <_dtoa_r>:
 80066b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066b4:	69c7      	ldr	r7, [r0, #28]
 80066b6:	b099      	sub	sp, #100	@ 0x64
 80066b8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80066bc:	ec55 4b10 	vmov	r4, r5, d0
 80066c0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80066c2:	9109      	str	r1, [sp, #36]	@ 0x24
 80066c4:	4683      	mov	fp, r0
 80066c6:	920e      	str	r2, [sp, #56]	@ 0x38
 80066c8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80066ca:	b97f      	cbnz	r7, 80066ec <_dtoa_r+0x3c>
 80066cc:	2010      	movs	r0, #16
 80066ce:	f000 fdfd 	bl	80072cc <malloc>
 80066d2:	4602      	mov	r2, r0
 80066d4:	f8cb 001c 	str.w	r0, [fp, #28]
 80066d8:	b920      	cbnz	r0, 80066e4 <_dtoa_r+0x34>
 80066da:	4ba7      	ldr	r3, [pc, #668]	@ (8006978 <_dtoa_r+0x2c8>)
 80066dc:	21ef      	movs	r1, #239	@ 0xef
 80066de:	48a7      	ldr	r0, [pc, #668]	@ (800697c <_dtoa_r+0x2cc>)
 80066e0:	f001 fccc 	bl	800807c <__assert_func>
 80066e4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80066e8:	6007      	str	r7, [r0, #0]
 80066ea:	60c7      	str	r7, [r0, #12]
 80066ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 80066f0:	6819      	ldr	r1, [r3, #0]
 80066f2:	b159      	cbz	r1, 800670c <_dtoa_r+0x5c>
 80066f4:	685a      	ldr	r2, [r3, #4]
 80066f6:	604a      	str	r2, [r1, #4]
 80066f8:	2301      	movs	r3, #1
 80066fa:	4093      	lsls	r3, r2
 80066fc:	608b      	str	r3, [r1, #8]
 80066fe:	4658      	mov	r0, fp
 8006700:	f000 feda 	bl	80074b8 <_Bfree>
 8006704:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006708:	2200      	movs	r2, #0
 800670a:	601a      	str	r2, [r3, #0]
 800670c:	1e2b      	subs	r3, r5, #0
 800670e:	bfb9      	ittee	lt
 8006710:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006714:	9303      	strlt	r3, [sp, #12]
 8006716:	2300      	movge	r3, #0
 8006718:	6033      	strge	r3, [r6, #0]
 800671a:	9f03      	ldr	r7, [sp, #12]
 800671c:	4b98      	ldr	r3, [pc, #608]	@ (8006980 <_dtoa_r+0x2d0>)
 800671e:	bfbc      	itt	lt
 8006720:	2201      	movlt	r2, #1
 8006722:	6032      	strlt	r2, [r6, #0]
 8006724:	43bb      	bics	r3, r7
 8006726:	d112      	bne.n	800674e <_dtoa_r+0x9e>
 8006728:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800672a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800672e:	6013      	str	r3, [r2, #0]
 8006730:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006734:	4323      	orrs	r3, r4
 8006736:	f000 854d 	beq.w	80071d4 <_dtoa_r+0xb24>
 800673a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800673c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006994 <_dtoa_r+0x2e4>
 8006740:	2b00      	cmp	r3, #0
 8006742:	f000 854f 	beq.w	80071e4 <_dtoa_r+0xb34>
 8006746:	f10a 0303 	add.w	r3, sl, #3
 800674a:	f000 bd49 	b.w	80071e0 <_dtoa_r+0xb30>
 800674e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006752:	2200      	movs	r2, #0
 8006754:	ec51 0b17 	vmov	r0, r1, d7
 8006758:	2300      	movs	r3, #0
 800675a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800675e:	f7fa f9b3 	bl	8000ac8 <__aeabi_dcmpeq>
 8006762:	4680      	mov	r8, r0
 8006764:	b158      	cbz	r0, 800677e <_dtoa_r+0xce>
 8006766:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006768:	2301      	movs	r3, #1
 800676a:	6013      	str	r3, [r2, #0]
 800676c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800676e:	b113      	cbz	r3, 8006776 <_dtoa_r+0xc6>
 8006770:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006772:	4b84      	ldr	r3, [pc, #528]	@ (8006984 <_dtoa_r+0x2d4>)
 8006774:	6013      	str	r3, [r2, #0]
 8006776:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006998 <_dtoa_r+0x2e8>
 800677a:	f000 bd33 	b.w	80071e4 <_dtoa_r+0xb34>
 800677e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006782:	aa16      	add	r2, sp, #88	@ 0x58
 8006784:	a917      	add	r1, sp, #92	@ 0x5c
 8006786:	4658      	mov	r0, fp
 8006788:	f001 f980 	bl	8007a8c <__d2b>
 800678c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006790:	4681      	mov	r9, r0
 8006792:	2e00      	cmp	r6, #0
 8006794:	d077      	beq.n	8006886 <_dtoa_r+0x1d6>
 8006796:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006798:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800679c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80067a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80067a4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80067a8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80067ac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80067b0:	4619      	mov	r1, r3
 80067b2:	2200      	movs	r2, #0
 80067b4:	4b74      	ldr	r3, [pc, #464]	@ (8006988 <_dtoa_r+0x2d8>)
 80067b6:	f7f9 fd67 	bl	8000288 <__aeabi_dsub>
 80067ba:	a369      	add	r3, pc, #420	@ (adr r3, 8006960 <_dtoa_r+0x2b0>)
 80067bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067c0:	f7f9 ff1a 	bl	80005f8 <__aeabi_dmul>
 80067c4:	a368      	add	r3, pc, #416	@ (adr r3, 8006968 <_dtoa_r+0x2b8>)
 80067c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ca:	f7f9 fd5f 	bl	800028c <__adddf3>
 80067ce:	4604      	mov	r4, r0
 80067d0:	4630      	mov	r0, r6
 80067d2:	460d      	mov	r5, r1
 80067d4:	f7f9 fea6 	bl	8000524 <__aeabi_i2d>
 80067d8:	a365      	add	r3, pc, #404	@ (adr r3, 8006970 <_dtoa_r+0x2c0>)
 80067da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067de:	f7f9 ff0b 	bl	80005f8 <__aeabi_dmul>
 80067e2:	4602      	mov	r2, r0
 80067e4:	460b      	mov	r3, r1
 80067e6:	4620      	mov	r0, r4
 80067e8:	4629      	mov	r1, r5
 80067ea:	f7f9 fd4f 	bl	800028c <__adddf3>
 80067ee:	4604      	mov	r4, r0
 80067f0:	460d      	mov	r5, r1
 80067f2:	f7fa f9b1 	bl	8000b58 <__aeabi_d2iz>
 80067f6:	2200      	movs	r2, #0
 80067f8:	4607      	mov	r7, r0
 80067fa:	2300      	movs	r3, #0
 80067fc:	4620      	mov	r0, r4
 80067fe:	4629      	mov	r1, r5
 8006800:	f7fa f96c 	bl	8000adc <__aeabi_dcmplt>
 8006804:	b140      	cbz	r0, 8006818 <_dtoa_r+0x168>
 8006806:	4638      	mov	r0, r7
 8006808:	f7f9 fe8c 	bl	8000524 <__aeabi_i2d>
 800680c:	4622      	mov	r2, r4
 800680e:	462b      	mov	r3, r5
 8006810:	f7fa f95a 	bl	8000ac8 <__aeabi_dcmpeq>
 8006814:	b900      	cbnz	r0, 8006818 <_dtoa_r+0x168>
 8006816:	3f01      	subs	r7, #1
 8006818:	2f16      	cmp	r7, #22
 800681a:	d851      	bhi.n	80068c0 <_dtoa_r+0x210>
 800681c:	4b5b      	ldr	r3, [pc, #364]	@ (800698c <_dtoa_r+0x2dc>)
 800681e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006826:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800682a:	f7fa f957 	bl	8000adc <__aeabi_dcmplt>
 800682e:	2800      	cmp	r0, #0
 8006830:	d048      	beq.n	80068c4 <_dtoa_r+0x214>
 8006832:	3f01      	subs	r7, #1
 8006834:	2300      	movs	r3, #0
 8006836:	9312      	str	r3, [sp, #72]	@ 0x48
 8006838:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800683a:	1b9b      	subs	r3, r3, r6
 800683c:	1e5a      	subs	r2, r3, #1
 800683e:	bf44      	itt	mi
 8006840:	f1c3 0801 	rsbmi	r8, r3, #1
 8006844:	2300      	movmi	r3, #0
 8006846:	9208      	str	r2, [sp, #32]
 8006848:	bf54      	ite	pl
 800684a:	f04f 0800 	movpl.w	r8, #0
 800684e:	9308      	strmi	r3, [sp, #32]
 8006850:	2f00      	cmp	r7, #0
 8006852:	db39      	blt.n	80068c8 <_dtoa_r+0x218>
 8006854:	9b08      	ldr	r3, [sp, #32]
 8006856:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006858:	443b      	add	r3, r7
 800685a:	9308      	str	r3, [sp, #32]
 800685c:	2300      	movs	r3, #0
 800685e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006860:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006862:	2b09      	cmp	r3, #9
 8006864:	d864      	bhi.n	8006930 <_dtoa_r+0x280>
 8006866:	2b05      	cmp	r3, #5
 8006868:	bfc4      	itt	gt
 800686a:	3b04      	subgt	r3, #4
 800686c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800686e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006870:	f1a3 0302 	sub.w	r3, r3, #2
 8006874:	bfcc      	ite	gt
 8006876:	2400      	movgt	r4, #0
 8006878:	2401      	movle	r4, #1
 800687a:	2b03      	cmp	r3, #3
 800687c:	d863      	bhi.n	8006946 <_dtoa_r+0x296>
 800687e:	e8df f003 	tbb	[pc, r3]
 8006882:	372a      	.short	0x372a
 8006884:	5535      	.short	0x5535
 8006886:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800688a:	441e      	add	r6, r3
 800688c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006890:	2b20      	cmp	r3, #32
 8006892:	bfc1      	itttt	gt
 8006894:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006898:	409f      	lslgt	r7, r3
 800689a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800689e:	fa24 f303 	lsrgt.w	r3, r4, r3
 80068a2:	bfd6      	itet	le
 80068a4:	f1c3 0320 	rsble	r3, r3, #32
 80068a8:	ea47 0003 	orrgt.w	r0, r7, r3
 80068ac:	fa04 f003 	lslle.w	r0, r4, r3
 80068b0:	f7f9 fe28 	bl	8000504 <__aeabi_ui2d>
 80068b4:	2201      	movs	r2, #1
 80068b6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80068ba:	3e01      	subs	r6, #1
 80068bc:	9214      	str	r2, [sp, #80]	@ 0x50
 80068be:	e777      	b.n	80067b0 <_dtoa_r+0x100>
 80068c0:	2301      	movs	r3, #1
 80068c2:	e7b8      	b.n	8006836 <_dtoa_r+0x186>
 80068c4:	9012      	str	r0, [sp, #72]	@ 0x48
 80068c6:	e7b7      	b.n	8006838 <_dtoa_r+0x188>
 80068c8:	427b      	negs	r3, r7
 80068ca:	930a      	str	r3, [sp, #40]	@ 0x28
 80068cc:	2300      	movs	r3, #0
 80068ce:	eba8 0807 	sub.w	r8, r8, r7
 80068d2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80068d4:	e7c4      	b.n	8006860 <_dtoa_r+0x1b0>
 80068d6:	2300      	movs	r3, #0
 80068d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80068da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80068dc:	2b00      	cmp	r3, #0
 80068de:	dc35      	bgt.n	800694c <_dtoa_r+0x29c>
 80068e0:	2301      	movs	r3, #1
 80068e2:	9300      	str	r3, [sp, #0]
 80068e4:	9307      	str	r3, [sp, #28]
 80068e6:	461a      	mov	r2, r3
 80068e8:	920e      	str	r2, [sp, #56]	@ 0x38
 80068ea:	e00b      	b.n	8006904 <_dtoa_r+0x254>
 80068ec:	2301      	movs	r3, #1
 80068ee:	e7f3      	b.n	80068d8 <_dtoa_r+0x228>
 80068f0:	2300      	movs	r3, #0
 80068f2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80068f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80068f6:	18fb      	adds	r3, r7, r3
 80068f8:	9300      	str	r3, [sp, #0]
 80068fa:	3301      	adds	r3, #1
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	9307      	str	r3, [sp, #28]
 8006900:	bfb8      	it	lt
 8006902:	2301      	movlt	r3, #1
 8006904:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006908:	2100      	movs	r1, #0
 800690a:	2204      	movs	r2, #4
 800690c:	f102 0514 	add.w	r5, r2, #20
 8006910:	429d      	cmp	r5, r3
 8006912:	d91f      	bls.n	8006954 <_dtoa_r+0x2a4>
 8006914:	6041      	str	r1, [r0, #4]
 8006916:	4658      	mov	r0, fp
 8006918:	f000 fd8e 	bl	8007438 <_Balloc>
 800691c:	4682      	mov	sl, r0
 800691e:	2800      	cmp	r0, #0
 8006920:	d13c      	bne.n	800699c <_dtoa_r+0x2ec>
 8006922:	4b1b      	ldr	r3, [pc, #108]	@ (8006990 <_dtoa_r+0x2e0>)
 8006924:	4602      	mov	r2, r0
 8006926:	f240 11af 	movw	r1, #431	@ 0x1af
 800692a:	e6d8      	b.n	80066de <_dtoa_r+0x2e>
 800692c:	2301      	movs	r3, #1
 800692e:	e7e0      	b.n	80068f2 <_dtoa_r+0x242>
 8006930:	2401      	movs	r4, #1
 8006932:	2300      	movs	r3, #0
 8006934:	9309      	str	r3, [sp, #36]	@ 0x24
 8006936:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006938:	f04f 33ff 	mov.w	r3, #4294967295
 800693c:	9300      	str	r3, [sp, #0]
 800693e:	9307      	str	r3, [sp, #28]
 8006940:	2200      	movs	r2, #0
 8006942:	2312      	movs	r3, #18
 8006944:	e7d0      	b.n	80068e8 <_dtoa_r+0x238>
 8006946:	2301      	movs	r3, #1
 8006948:	930b      	str	r3, [sp, #44]	@ 0x2c
 800694a:	e7f5      	b.n	8006938 <_dtoa_r+0x288>
 800694c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800694e:	9300      	str	r3, [sp, #0]
 8006950:	9307      	str	r3, [sp, #28]
 8006952:	e7d7      	b.n	8006904 <_dtoa_r+0x254>
 8006954:	3101      	adds	r1, #1
 8006956:	0052      	lsls	r2, r2, #1
 8006958:	e7d8      	b.n	800690c <_dtoa_r+0x25c>
 800695a:	bf00      	nop
 800695c:	f3af 8000 	nop.w
 8006960:	636f4361 	.word	0x636f4361
 8006964:	3fd287a7 	.word	0x3fd287a7
 8006968:	8b60c8b3 	.word	0x8b60c8b3
 800696c:	3fc68a28 	.word	0x3fc68a28
 8006970:	509f79fb 	.word	0x509f79fb
 8006974:	3fd34413 	.word	0x3fd34413
 8006978:	080083b5 	.word	0x080083b5
 800697c:	080083cc 	.word	0x080083cc
 8006980:	7ff00000 	.word	0x7ff00000
 8006984:	08008385 	.word	0x08008385
 8006988:	3ff80000 	.word	0x3ff80000
 800698c:	080084c8 	.word	0x080084c8
 8006990:	08008424 	.word	0x08008424
 8006994:	080083b1 	.word	0x080083b1
 8006998:	08008384 	.word	0x08008384
 800699c:	f8db 301c 	ldr.w	r3, [fp, #28]
 80069a0:	6018      	str	r0, [r3, #0]
 80069a2:	9b07      	ldr	r3, [sp, #28]
 80069a4:	2b0e      	cmp	r3, #14
 80069a6:	f200 80a4 	bhi.w	8006af2 <_dtoa_r+0x442>
 80069aa:	2c00      	cmp	r4, #0
 80069ac:	f000 80a1 	beq.w	8006af2 <_dtoa_r+0x442>
 80069b0:	2f00      	cmp	r7, #0
 80069b2:	dd33      	ble.n	8006a1c <_dtoa_r+0x36c>
 80069b4:	4bad      	ldr	r3, [pc, #692]	@ (8006c6c <_dtoa_r+0x5bc>)
 80069b6:	f007 020f 	and.w	r2, r7, #15
 80069ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80069be:	ed93 7b00 	vldr	d7, [r3]
 80069c2:	05f8      	lsls	r0, r7, #23
 80069c4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80069c8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80069cc:	d516      	bpl.n	80069fc <_dtoa_r+0x34c>
 80069ce:	4ba8      	ldr	r3, [pc, #672]	@ (8006c70 <_dtoa_r+0x5c0>)
 80069d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80069d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80069d8:	f7f9 ff38 	bl	800084c <__aeabi_ddiv>
 80069dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80069e0:	f004 040f 	and.w	r4, r4, #15
 80069e4:	2603      	movs	r6, #3
 80069e6:	4da2      	ldr	r5, [pc, #648]	@ (8006c70 <_dtoa_r+0x5c0>)
 80069e8:	b954      	cbnz	r4, 8006a00 <_dtoa_r+0x350>
 80069ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069f2:	f7f9 ff2b 	bl	800084c <__aeabi_ddiv>
 80069f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80069fa:	e028      	b.n	8006a4e <_dtoa_r+0x39e>
 80069fc:	2602      	movs	r6, #2
 80069fe:	e7f2      	b.n	80069e6 <_dtoa_r+0x336>
 8006a00:	07e1      	lsls	r1, r4, #31
 8006a02:	d508      	bpl.n	8006a16 <_dtoa_r+0x366>
 8006a04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a08:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006a0c:	f7f9 fdf4 	bl	80005f8 <__aeabi_dmul>
 8006a10:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006a14:	3601      	adds	r6, #1
 8006a16:	1064      	asrs	r4, r4, #1
 8006a18:	3508      	adds	r5, #8
 8006a1a:	e7e5      	b.n	80069e8 <_dtoa_r+0x338>
 8006a1c:	f000 80d2 	beq.w	8006bc4 <_dtoa_r+0x514>
 8006a20:	427c      	negs	r4, r7
 8006a22:	4b92      	ldr	r3, [pc, #584]	@ (8006c6c <_dtoa_r+0x5bc>)
 8006a24:	4d92      	ldr	r5, [pc, #584]	@ (8006c70 <_dtoa_r+0x5c0>)
 8006a26:	f004 020f 	and.w	r2, r4, #15
 8006a2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a32:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006a36:	f7f9 fddf 	bl	80005f8 <__aeabi_dmul>
 8006a3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a3e:	1124      	asrs	r4, r4, #4
 8006a40:	2300      	movs	r3, #0
 8006a42:	2602      	movs	r6, #2
 8006a44:	2c00      	cmp	r4, #0
 8006a46:	f040 80b2 	bne.w	8006bae <_dtoa_r+0x4fe>
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d1d3      	bne.n	80069f6 <_dtoa_r+0x346>
 8006a4e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006a50:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	f000 80b7 	beq.w	8006bc8 <_dtoa_r+0x518>
 8006a5a:	4b86      	ldr	r3, [pc, #536]	@ (8006c74 <_dtoa_r+0x5c4>)
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	4620      	mov	r0, r4
 8006a60:	4629      	mov	r1, r5
 8006a62:	f7fa f83b 	bl	8000adc <__aeabi_dcmplt>
 8006a66:	2800      	cmp	r0, #0
 8006a68:	f000 80ae 	beq.w	8006bc8 <_dtoa_r+0x518>
 8006a6c:	9b07      	ldr	r3, [sp, #28]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	f000 80aa 	beq.w	8006bc8 <_dtoa_r+0x518>
 8006a74:	9b00      	ldr	r3, [sp, #0]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	dd37      	ble.n	8006aea <_dtoa_r+0x43a>
 8006a7a:	1e7b      	subs	r3, r7, #1
 8006a7c:	9304      	str	r3, [sp, #16]
 8006a7e:	4620      	mov	r0, r4
 8006a80:	4b7d      	ldr	r3, [pc, #500]	@ (8006c78 <_dtoa_r+0x5c8>)
 8006a82:	2200      	movs	r2, #0
 8006a84:	4629      	mov	r1, r5
 8006a86:	f7f9 fdb7 	bl	80005f8 <__aeabi_dmul>
 8006a8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a8e:	9c00      	ldr	r4, [sp, #0]
 8006a90:	3601      	adds	r6, #1
 8006a92:	4630      	mov	r0, r6
 8006a94:	f7f9 fd46 	bl	8000524 <__aeabi_i2d>
 8006a98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006a9c:	f7f9 fdac 	bl	80005f8 <__aeabi_dmul>
 8006aa0:	4b76      	ldr	r3, [pc, #472]	@ (8006c7c <_dtoa_r+0x5cc>)
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	f7f9 fbf2 	bl	800028c <__adddf3>
 8006aa8:	4605      	mov	r5, r0
 8006aaa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006aae:	2c00      	cmp	r4, #0
 8006ab0:	f040 808d 	bne.w	8006bce <_dtoa_r+0x51e>
 8006ab4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ab8:	4b71      	ldr	r3, [pc, #452]	@ (8006c80 <_dtoa_r+0x5d0>)
 8006aba:	2200      	movs	r2, #0
 8006abc:	f7f9 fbe4 	bl	8000288 <__aeabi_dsub>
 8006ac0:	4602      	mov	r2, r0
 8006ac2:	460b      	mov	r3, r1
 8006ac4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006ac8:	462a      	mov	r2, r5
 8006aca:	4633      	mov	r3, r6
 8006acc:	f7fa f824 	bl	8000b18 <__aeabi_dcmpgt>
 8006ad0:	2800      	cmp	r0, #0
 8006ad2:	f040 828b 	bne.w	8006fec <_dtoa_r+0x93c>
 8006ad6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ada:	462a      	mov	r2, r5
 8006adc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006ae0:	f7f9 fffc 	bl	8000adc <__aeabi_dcmplt>
 8006ae4:	2800      	cmp	r0, #0
 8006ae6:	f040 8128 	bne.w	8006d3a <_dtoa_r+0x68a>
 8006aea:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006aee:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006af2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	f2c0 815a 	blt.w	8006dae <_dtoa_r+0x6fe>
 8006afa:	2f0e      	cmp	r7, #14
 8006afc:	f300 8157 	bgt.w	8006dae <_dtoa_r+0x6fe>
 8006b00:	4b5a      	ldr	r3, [pc, #360]	@ (8006c6c <_dtoa_r+0x5bc>)
 8006b02:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006b06:	ed93 7b00 	vldr	d7, [r3]
 8006b0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	ed8d 7b00 	vstr	d7, [sp]
 8006b12:	da03      	bge.n	8006b1c <_dtoa_r+0x46c>
 8006b14:	9b07      	ldr	r3, [sp, #28]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	f340 8101 	ble.w	8006d1e <_dtoa_r+0x66e>
 8006b1c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006b20:	4656      	mov	r6, sl
 8006b22:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006b26:	4620      	mov	r0, r4
 8006b28:	4629      	mov	r1, r5
 8006b2a:	f7f9 fe8f 	bl	800084c <__aeabi_ddiv>
 8006b2e:	f7fa f813 	bl	8000b58 <__aeabi_d2iz>
 8006b32:	4680      	mov	r8, r0
 8006b34:	f7f9 fcf6 	bl	8000524 <__aeabi_i2d>
 8006b38:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006b3c:	f7f9 fd5c 	bl	80005f8 <__aeabi_dmul>
 8006b40:	4602      	mov	r2, r0
 8006b42:	460b      	mov	r3, r1
 8006b44:	4620      	mov	r0, r4
 8006b46:	4629      	mov	r1, r5
 8006b48:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006b4c:	f7f9 fb9c 	bl	8000288 <__aeabi_dsub>
 8006b50:	f806 4b01 	strb.w	r4, [r6], #1
 8006b54:	9d07      	ldr	r5, [sp, #28]
 8006b56:	eba6 040a 	sub.w	r4, r6, sl
 8006b5a:	42a5      	cmp	r5, r4
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	460b      	mov	r3, r1
 8006b60:	f040 8117 	bne.w	8006d92 <_dtoa_r+0x6e2>
 8006b64:	f7f9 fb92 	bl	800028c <__adddf3>
 8006b68:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006b6c:	4604      	mov	r4, r0
 8006b6e:	460d      	mov	r5, r1
 8006b70:	f7f9 ffd2 	bl	8000b18 <__aeabi_dcmpgt>
 8006b74:	2800      	cmp	r0, #0
 8006b76:	f040 80f9 	bne.w	8006d6c <_dtoa_r+0x6bc>
 8006b7a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006b7e:	4620      	mov	r0, r4
 8006b80:	4629      	mov	r1, r5
 8006b82:	f7f9 ffa1 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b86:	b118      	cbz	r0, 8006b90 <_dtoa_r+0x4e0>
 8006b88:	f018 0f01 	tst.w	r8, #1
 8006b8c:	f040 80ee 	bne.w	8006d6c <_dtoa_r+0x6bc>
 8006b90:	4649      	mov	r1, r9
 8006b92:	4658      	mov	r0, fp
 8006b94:	f000 fc90 	bl	80074b8 <_Bfree>
 8006b98:	2300      	movs	r3, #0
 8006b9a:	7033      	strb	r3, [r6, #0]
 8006b9c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006b9e:	3701      	adds	r7, #1
 8006ba0:	601f      	str	r7, [r3, #0]
 8006ba2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	f000 831d 	beq.w	80071e4 <_dtoa_r+0xb34>
 8006baa:	601e      	str	r6, [r3, #0]
 8006bac:	e31a      	b.n	80071e4 <_dtoa_r+0xb34>
 8006bae:	07e2      	lsls	r2, r4, #31
 8006bb0:	d505      	bpl.n	8006bbe <_dtoa_r+0x50e>
 8006bb2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006bb6:	f7f9 fd1f 	bl	80005f8 <__aeabi_dmul>
 8006bba:	3601      	adds	r6, #1
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	1064      	asrs	r4, r4, #1
 8006bc0:	3508      	adds	r5, #8
 8006bc2:	e73f      	b.n	8006a44 <_dtoa_r+0x394>
 8006bc4:	2602      	movs	r6, #2
 8006bc6:	e742      	b.n	8006a4e <_dtoa_r+0x39e>
 8006bc8:	9c07      	ldr	r4, [sp, #28]
 8006bca:	9704      	str	r7, [sp, #16]
 8006bcc:	e761      	b.n	8006a92 <_dtoa_r+0x3e2>
 8006bce:	4b27      	ldr	r3, [pc, #156]	@ (8006c6c <_dtoa_r+0x5bc>)
 8006bd0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006bd2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006bd6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006bda:	4454      	add	r4, sl
 8006bdc:	2900      	cmp	r1, #0
 8006bde:	d053      	beq.n	8006c88 <_dtoa_r+0x5d8>
 8006be0:	4928      	ldr	r1, [pc, #160]	@ (8006c84 <_dtoa_r+0x5d4>)
 8006be2:	2000      	movs	r0, #0
 8006be4:	f7f9 fe32 	bl	800084c <__aeabi_ddiv>
 8006be8:	4633      	mov	r3, r6
 8006bea:	462a      	mov	r2, r5
 8006bec:	f7f9 fb4c 	bl	8000288 <__aeabi_dsub>
 8006bf0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006bf4:	4656      	mov	r6, sl
 8006bf6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006bfa:	f7f9 ffad 	bl	8000b58 <__aeabi_d2iz>
 8006bfe:	4605      	mov	r5, r0
 8006c00:	f7f9 fc90 	bl	8000524 <__aeabi_i2d>
 8006c04:	4602      	mov	r2, r0
 8006c06:	460b      	mov	r3, r1
 8006c08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c0c:	f7f9 fb3c 	bl	8000288 <__aeabi_dsub>
 8006c10:	3530      	adds	r5, #48	@ 0x30
 8006c12:	4602      	mov	r2, r0
 8006c14:	460b      	mov	r3, r1
 8006c16:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006c1a:	f806 5b01 	strb.w	r5, [r6], #1
 8006c1e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006c22:	f7f9 ff5b 	bl	8000adc <__aeabi_dcmplt>
 8006c26:	2800      	cmp	r0, #0
 8006c28:	d171      	bne.n	8006d0e <_dtoa_r+0x65e>
 8006c2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006c2e:	4911      	ldr	r1, [pc, #68]	@ (8006c74 <_dtoa_r+0x5c4>)
 8006c30:	2000      	movs	r0, #0
 8006c32:	f7f9 fb29 	bl	8000288 <__aeabi_dsub>
 8006c36:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006c3a:	f7f9 ff4f 	bl	8000adc <__aeabi_dcmplt>
 8006c3e:	2800      	cmp	r0, #0
 8006c40:	f040 8095 	bne.w	8006d6e <_dtoa_r+0x6be>
 8006c44:	42a6      	cmp	r6, r4
 8006c46:	f43f af50 	beq.w	8006aea <_dtoa_r+0x43a>
 8006c4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006c4e:	4b0a      	ldr	r3, [pc, #40]	@ (8006c78 <_dtoa_r+0x5c8>)
 8006c50:	2200      	movs	r2, #0
 8006c52:	f7f9 fcd1 	bl	80005f8 <__aeabi_dmul>
 8006c56:	4b08      	ldr	r3, [pc, #32]	@ (8006c78 <_dtoa_r+0x5c8>)
 8006c58:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c62:	f7f9 fcc9 	bl	80005f8 <__aeabi_dmul>
 8006c66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c6a:	e7c4      	b.n	8006bf6 <_dtoa_r+0x546>
 8006c6c:	080084c8 	.word	0x080084c8
 8006c70:	080084a0 	.word	0x080084a0
 8006c74:	3ff00000 	.word	0x3ff00000
 8006c78:	40240000 	.word	0x40240000
 8006c7c:	401c0000 	.word	0x401c0000
 8006c80:	40140000 	.word	0x40140000
 8006c84:	3fe00000 	.word	0x3fe00000
 8006c88:	4631      	mov	r1, r6
 8006c8a:	4628      	mov	r0, r5
 8006c8c:	f7f9 fcb4 	bl	80005f8 <__aeabi_dmul>
 8006c90:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006c94:	9415      	str	r4, [sp, #84]	@ 0x54
 8006c96:	4656      	mov	r6, sl
 8006c98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c9c:	f7f9 ff5c 	bl	8000b58 <__aeabi_d2iz>
 8006ca0:	4605      	mov	r5, r0
 8006ca2:	f7f9 fc3f 	bl	8000524 <__aeabi_i2d>
 8006ca6:	4602      	mov	r2, r0
 8006ca8:	460b      	mov	r3, r1
 8006caa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006cae:	f7f9 faeb 	bl	8000288 <__aeabi_dsub>
 8006cb2:	3530      	adds	r5, #48	@ 0x30
 8006cb4:	f806 5b01 	strb.w	r5, [r6], #1
 8006cb8:	4602      	mov	r2, r0
 8006cba:	460b      	mov	r3, r1
 8006cbc:	42a6      	cmp	r6, r4
 8006cbe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006cc2:	f04f 0200 	mov.w	r2, #0
 8006cc6:	d124      	bne.n	8006d12 <_dtoa_r+0x662>
 8006cc8:	4bac      	ldr	r3, [pc, #688]	@ (8006f7c <_dtoa_r+0x8cc>)
 8006cca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006cce:	f7f9 fadd 	bl	800028c <__adddf3>
 8006cd2:	4602      	mov	r2, r0
 8006cd4:	460b      	mov	r3, r1
 8006cd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006cda:	f7f9 ff1d 	bl	8000b18 <__aeabi_dcmpgt>
 8006cde:	2800      	cmp	r0, #0
 8006ce0:	d145      	bne.n	8006d6e <_dtoa_r+0x6be>
 8006ce2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006ce6:	49a5      	ldr	r1, [pc, #660]	@ (8006f7c <_dtoa_r+0x8cc>)
 8006ce8:	2000      	movs	r0, #0
 8006cea:	f7f9 facd 	bl	8000288 <__aeabi_dsub>
 8006cee:	4602      	mov	r2, r0
 8006cf0:	460b      	mov	r3, r1
 8006cf2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006cf6:	f7f9 fef1 	bl	8000adc <__aeabi_dcmplt>
 8006cfa:	2800      	cmp	r0, #0
 8006cfc:	f43f aef5 	beq.w	8006aea <_dtoa_r+0x43a>
 8006d00:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006d02:	1e73      	subs	r3, r6, #1
 8006d04:	9315      	str	r3, [sp, #84]	@ 0x54
 8006d06:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006d0a:	2b30      	cmp	r3, #48	@ 0x30
 8006d0c:	d0f8      	beq.n	8006d00 <_dtoa_r+0x650>
 8006d0e:	9f04      	ldr	r7, [sp, #16]
 8006d10:	e73e      	b.n	8006b90 <_dtoa_r+0x4e0>
 8006d12:	4b9b      	ldr	r3, [pc, #620]	@ (8006f80 <_dtoa_r+0x8d0>)
 8006d14:	f7f9 fc70 	bl	80005f8 <__aeabi_dmul>
 8006d18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d1c:	e7bc      	b.n	8006c98 <_dtoa_r+0x5e8>
 8006d1e:	d10c      	bne.n	8006d3a <_dtoa_r+0x68a>
 8006d20:	4b98      	ldr	r3, [pc, #608]	@ (8006f84 <_dtoa_r+0x8d4>)
 8006d22:	2200      	movs	r2, #0
 8006d24:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006d28:	f7f9 fc66 	bl	80005f8 <__aeabi_dmul>
 8006d2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006d30:	f7f9 fee8 	bl	8000b04 <__aeabi_dcmpge>
 8006d34:	2800      	cmp	r0, #0
 8006d36:	f000 8157 	beq.w	8006fe8 <_dtoa_r+0x938>
 8006d3a:	2400      	movs	r4, #0
 8006d3c:	4625      	mov	r5, r4
 8006d3e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006d40:	43db      	mvns	r3, r3
 8006d42:	9304      	str	r3, [sp, #16]
 8006d44:	4656      	mov	r6, sl
 8006d46:	2700      	movs	r7, #0
 8006d48:	4621      	mov	r1, r4
 8006d4a:	4658      	mov	r0, fp
 8006d4c:	f000 fbb4 	bl	80074b8 <_Bfree>
 8006d50:	2d00      	cmp	r5, #0
 8006d52:	d0dc      	beq.n	8006d0e <_dtoa_r+0x65e>
 8006d54:	b12f      	cbz	r7, 8006d62 <_dtoa_r+0x6b2>
 8006d56:	42af      	cmp	r7, r5
 8006d58:	d003      	beq.n	8006d62 <_dtoa_r+0x6b2>
 8006d5a:	4639      	mov	r1, r7
 8006d5c:	4658      	mov	r0, fp
 8006d5e:	f000 fbab 	bl	80074b8 <_Bfree>
 8006d62:	4629      	mov	r1, r5
 8006d64:	4658      	mov	r0, fp
 8006d66:	f000 fba7 	bl	80074b8 <_Bfree>
 8006d6a:	e7d0      	b.n	8006d0e <_dtoa_r+0x65e>
 8006d6c:	9704      	str	r7, [sp, #16]
 8006d6e:	4633      	mov	r3, r6
 8006d70:	461e      	mov	r6, r3
 8006d72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006d76:	2a39      	cmp	r2, #57	@ 0x39
 8006d78:	d107      	bne.n	8006d8a <_dtoa_r+0x6da>
 8006d7a:	459a      	cmp	sl, r3
 8006d7c:	d1f8      	bne.n	8006d70 <_dtoa_r+0x6c0>
 8006d7e:	9a04      	ldr	r2, [sp, #16]
 8006d80:	3201      	adds	r2, #1
 8006d82:	9204      	str	r2, [sp, #16]
 8006d84:	2230      	movs	r2, #48	@ 0x30
 8006d86:	f88a 2000 	strb.w	r2, [sl]
 8006d8a:	781a      	ldrb	r2, [r3, #0]
 8006d8c:	3201      	adds	r2, #1
 8006d8e:	701a      	strb	r2, [r3, #0]
 8006d90:	e7bd      	b.n	8006d0e <_dtoa_r+0x65e>
 8006d92:	4b7b      	ldr	r3, [pc, #492]	@ (8006f80 <_dtoa_r+0x8d0>)
 8006d94:	2200      	movs	r2, #0
 8006d96:	f7f9 fc2f 	bl	80005f8 <__aeabi_dmul>
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	4604      	mov	r4, r0
 8006da0:	460d      	mov	r5, r1
 8006da2:	f7f9 fe91 	bl	8000ac8 <__aeabi_dcmpeq>
 8006da6:	2800      	cmp	r0, #0
 8006da8:	f43f aebb 	beq.w	8006b22 <_dtoa_r+0x472>
 8006dac:	e6f0      	b.n	8006b90 <_dtoa_r+0x4e0>
 8006dae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006db0:	2a00      	cmp	r2, #0
 8006db2:	f000 80db 	beq.w	8006f6c <_dtoa_r+0x8bc>
 8006db6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006db8:	2a01      	cmp	r2, #1
 8006dba:	f300 80bf 	bgt.w	8006f3c <_dtoa_r+0x88c>
 8006dbe:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006dc0:	2a00      	cmp	r2, #0
 8006dc2:	f000 80b7 	beq.w	8006f34 <_dtoa_r+0x884>
 8006dc6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006dca:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006dcc:	4646      	mov	r6, r8
 8006dce:	9a08      	ldr	r2, [sp, #32]
 8006dd0:	2101      	movs	r1, #1
 8006dd2:	441a      	add	r2, r3
 8006dd4:	4658      	mov	r0, fp
 8006dd6:	4498      	add	r8, r3
 8006dd8:	9208      	str	r2, [sp, #32]
 8006dda:	f000 fc21 	bl	8007620 <__i2b>
 8006dde:	4605      	mov	r5, r0
 8006de0:	b15e      	cbz	r6, 8006dfa <_dtoa_r+0x74a>
 8006de2:	9b08      	ldr	r3, [sp, #32]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	dd08      	ble.n	8006dfa <_dtoa_r+0x74a>
 8006de8:	42b3      	cmp	r3, r6
 8006dea:	9a08      	ldr	r2, [sp, #32]
 8006dec:	bfa8      	it	ge
 8006dee:	4633      	movge	r3, r6
 8006df0:	eba8 0803 	sub.w	r8, r8, r3
 8006df4:	1af6      	subs	r6, r6, r3
 8006df6:	1ad3      	subs	r3, r2, r3
 8006df8:	9308      	str	r3, [sp, #32]
 8006dfa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006dfc:	b1f3      	cbz	r3, 8006e3c <_dtoa_r+0x78c>
 8006dfe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	f000 80b7 	beq.w	8006f74 <_dtoa_r+0x8c4>
 8006e06:	b18c      	cbz	r4, 8006e2c <_dtoa_r+0x77c>
 8006e08:	4629      	mov	r1, r5
 8006e0a:	4622      	mov	r2, r4
 8006e0c:	4658      	mov	r0, fp
 8006e0e:	f000 fcc7 	bl	80077a0 <__pow5mult>
 8006e12:	464a      	mov	r2, r9
 8006e14:	4601      	mov	r1, r0
 8006e16:	4605      	mov	r5, r0
 8006e18:	4658      	mov	r0, fp
 8006e1a:	f000 fc17 	bl	800764c <__multiply>
 8006e1e:	4649      	mov	r1, r9
 8006e20:	9004      	str	r0, [sp, #16]
 8006e22:	4658      	mov	r0, fp
 8006e24:	f000 fb48 	bl	80074b8 <_Bfree>
 8006e28:	9b04      	ldr	r3, [sp, #16]
 8006e2a:	4699      	mov	r9, r3
 8006e2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006e2e:	1b1a      	subs	r2, r3, r4
 8006e30:	d004      	beq.n	8006e3c <_dtoa_r+0x78c>
 8006e32:	4649      	mov	r1, r9
 8006e34:	4658      	mov	r0, fp
 8006e36:	f000 fcb3 	bl	80077a0 <__pow5mult>
 8006e3a:	4681      	mov	r9, r0
 8006e3c:	2101      	movs	r1, #1
 8006e3e:	4658      	mov	r0, fp
 8006e40:	f000 fbee 	bl	8007620 <__i2b>
 8006e44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006e46:	4604      	mov	r4, r0
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	f000 81cf 	beq.w	80071ec <_dtoa_r+0xb3c>
 8006e4e:	461a      	mov	r2, r3
 8006e50:	4601      	mov	r1, r0
 8006e52:	4658      	mov	r0, fp
 8006e54:	f000 fca4 	bl	80077a0 <__pow5mult>
 8006e58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e5a:	2b01      	cmp	r3, #1
 8006e5c:	4604      	mov	r4, r0
 8006e5e:	f300 8095 	bgt.w	8006f8c <_dtoa_r+0x8dc>
 8006e62:	9b02      	ldr	r3, [sp, #8]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	f040 8087 	bne.w	8006f78 <_dtoa_r+0x8c8>
 8006e6a:	9b03      	ldr	r3, [sp, #12]
 8006e6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	f040 8089 	bne.w	8006f88 <_dtoa_r+0x8d8>
 8006e76:	9b03      	ldr	r3, [sp, #12]
 8006e78:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006e7c:	0d1b      	lsrs	r3, r3, #20
 8006e7e:	051b      	lsls	r3, r3, #20
 8006e80:	b12b      	cbz	r3, 8006e8e <_dtoa_r+0x7de>
 8006e82:	9b08      	ldr	r3, [sp, #32]
 8006e84:	3301      	adds	r3, #1
 8006e86:	9308      	str	r3, [sp, #32]
 8006e88:	f108 0801 	add.w	r8, r8, #1
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006e90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	f000 81b0 	beq.w	80071f8 <_dtoa_r+0xb48>
 8006e98:	6923      	ldr	r3, [r4, #16]
 8006e9a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006e9e:	6918      	ldr	r0, [r3, #16]
 8006ea0:	f000 fb72 	bl	8007588 <__hi0bits>
 8006ea4:	f1c0 0020 	rsb	r0, r0, #32
 8006ea8:	9b08      	ldr	r3, [sp, #32]
 8006eaa:	4418      	add	r0, r3
 8006eac:	f010 001f 	ands.w	r0, r0, #31
 8006eb0:	d077      	beq.n	8006fa2 <_dtoa_r+0x8f2>
 8006eb2:	f1c0 0320 	rsb	r3, r0, #32
 8006eb6:	2b04      	cmp	r3, #4
 8006eb8:	dd6b      	ble.n	8006f92 <_dtoa_r+0x8e2>
 8006eba:	9b08      	ldr	r3, [sp, #32]
 8006ebc:	f1c0 001c 	rsb	r0, r0, #28
 8006ec0:	4403      	add	r3, r0
 8006ec2:	4480      	add	r8, r0
 8006ec4:	4406      	add	r6, r0
 8006ec6:	9308      	str	r3, [sp, #32]
 8006ec8:	f1b8 0f00 	cmp.w	r8, #0
 8006ecc:	dd05      	ble.n	8006eda <_dtoa_r+0x82a>
 8006ece:	4649      	mov	r1, r9
 8006ed0:	4642      	mov	r2, r8
 8006ed2:	4658      	mov	r0, fp
 8006ed4:	f000 fcbe 	bl	8007854 <__lshift>
 8006ed8:	4681      	mov	r9, r0
 8006eda:	9b08      	ldr	r3, [sp, #32]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	dd05      	ble.n	8006eec <_dtoa_r+0x83c>
 8006ee0:	4621      	mov	r1, r4
 8006ee2:	461a      	mov	r2, r3
 8006ee4:	4658      	mov	r0, fp
 8006ee6:	f000 fcb5 	bl	8007854 <__lshift>
 8006eea:	4604      	mov	r4, r0
 8006eec:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d059      	beq.n	8006fa6 <_dtoa_r+0x8f6>
 8006ef2:	4621      	mov	r1, r4
 8006ef4:	4648      	mov	r0, r9
 8006ef6:	f000 fd19 	bl	800792c <__mcmp>
 8006efa:	2800      	cmp	r0, #0
 8006efc:	da53      	bge.n	8006fa6 <_dtoa_r+0x8f6>
 8006efe:	1e7b      	subs	r3, r7, #1
 8006f00:	9304      	str	r3, [sp, #16]
 8006f02:	4649      	mov	r1, r9
 8006f04:	2300      	movs	r3, #0
 8006f06:	220a      	movs	r2, #10
 8006f08:	4658      	mov	r0, fp
 8006f0a:	f000 faf7 	bl	80074fc <__multadd>
 8006f0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006f10:	4681      	mov	r9, r0
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	f000 8172 	beq.w	80071fc <_dtoa_r+0xb4c>
 8006f18:	2300      	movs	r3, #0
 8006f1a:	4629      	mov	r1, r5
 8006f1c:	220a      	movs	r2, #10
 8006f1e:	4658      	mov	r0, fp
 8006f20:	f000 faec 	bl	80074fc <__multadd>
 8006f24:	9b00      	ldr	r3, [sp, #0]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	4605      	mov	r5, r0
 8006f2a:	dc67      	bgt.n	8006ffc <_dtoa_r+0x94c>
 8006f2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f2e:	2b02      	cmp	r3, #2
 8006f30:	dc41      	bgt.n	8006fb6 <_dtoa_r+0x906>
 8006f32:	e063      	b.n	8006ffc <_dtoa_r+0x94c>
 8006f34:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006f36:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006f3a:	e746      	b.n	8006dca <_dtoa_r+0x71a>
 8006f3c:	9b07      	ldr	r3, [sp, #28]
 8006f3e:	1e5c      	subs	r4, r3, #1
 8006f40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006f42:	42a3      	cmp	r3, r4
 8006f44:	bfbf      	itttt	lt
 8006f46:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006f48:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8006f4a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006f4c:	1ae3      	sublt	r3, r4, r3
 8006f4e:	bfb4      	ite	lt
 8006f50:	18d2      	addlt	r2, r2, r3
 8006f52:	1b1c      	subge	r4, r3, r4
 8006f54:	9b07      	ldr	r3, [sp, #28]
 8006f56:	bfbc      	itt	lt
 8006f58:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8006f5a:	2400      	movlt	r4, #0
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	bfb5      	itete	lt
 8006f60:	eba8 0603 	sublt.w	r6, r8, r3
 8006f64:	9b07      	ldrge	r3, [sp, #28]
 8006f66:	2300      	movlt	r3, #0
 8006f68:	4646      	movge	r6, r8
 8006f6a:	e730      	b.n	8006dce <_dtoa_r+0x71e>
 8006f6c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006f6e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006f70:	4646      	mov	r6, r8
 8006f72:	e735      	b.n	8006de0 <_dtoa_r+0x730>
 8006f74:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006f76:	e75c      	b.n	8006e32 <_dtoa_r+0x782>
 8006f78:	2300      	movs	r3, #0
 8006f7a:	e788      	b.n	8006e8e <_dtoa_r+0x7de>
 8006f7c:	3fe00000 	.word	0x3fe00000
 8006f80:	40240000 	.word	0x40240000
 8006f84:	40140000 	.word	0x40140000
 8006f88:	9b02      	ldr	r3, [sp, #8]
 8006f8a:	e780      	b.n	8006e8e <_dtoa_r+0x7de>
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f90:	e782      	b.n	8006e98 <_dtoa_r+0x7e8>
 8006f92:	d099      	beq.n	8006ec8 <_dtoa_r+0x818>
 8006f94:	9a08      	ldr	r2, [sp, #32]
 8006f96:	331c      	adds	r3, #28
 8006f98:	441a      	add	r2, r3
 8006f9a:	4498      	add	r8, r3
 8006f9c:	441e      	add	r6, r3
 8006f9e:	9208      	str	r2, [sp, #32]
 8006fa0:	e792      	b.n	8006ec8 <_dtoa_r+0x818>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	e7f6      	b.n	8006f94 <_dtoa_r+0x8e4>
 8006fa6:	9b07      	ldr	r3, [sp, #28]
 8006fa8:	9704      	str	r7, [sp, #16]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	dc20      	bgt.n	8006ff0 <_dtoa_r+0x940>
 8006fae:	9300      	str	r3, [sp, #0]
 8006fb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fb2:	2b02      	cmp	r3, #2
 8006fb4:	dd1e      	ble.n	8006ff4 <_dtoa_r+0x944>
 8006fb6:	9b00      	ldr	r3, [sp, #0]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	f47f aec0 	bne.w	8006d3e <_dtoa_r+0x68e>
 8006fbe:	4621      	mov	r1, r4
 8006fc0:	2205      	movs	r2, #5
 8006fc2:	4658      	mov	r0, fp
 8006fc4:	f000 fa9a 	bl	80074fc <__multadd>
 8006fc8:	4601      	mov	r1, r0
 8006fca:	4604      	mov	r4, r0
 8006fcc:	4648      	mov	r0, r9
 8006fce:	f000 fcad 	bl	800792c <__mcmp>
 8006fd2:	2800      	cmp	r0, #0
 8006fd4:	f77f aeb3 	ble.w	8006d3e <_dtoa_r+0x68e>
 8006fd8:	4656      	mov	r6, sl
 8006fda:	2331      	movs	r3, #49	@ 0x31
 8006fdc:	f806 3b01 	strb.w	r3, [r6], #1
 8006fe0:	9b04      	ldr	r3, [sp, #16]
 8006fe2:	3301      	adds	r3, #1
 8006fe4:	9304      	str	r3, [sp, #16]
 8006fe6:	e6ae      	b.n	8006d46 <_dtoa_r+0x696>
 8006fe8:	9c07      	ldr	r4, [sp, #28]
 8006fea:	9704      	str	r7, [sp, #16]
 8006fec:	4625      	mov	r5, r4
 8006fee:	e7f3      	b.n	8006fd8 <_dtoa_r+0x928>
 8006ff0:	9b07      	ldr	r3, [sp, #28]
 8006ff2:	9300      	str	r3, [sp, #0]
 8006ff4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	f000 8104 	beq.w	8007204 <_dtoa_r+0xb54>
 8006ffc:	2e00      	cmp	r6, #0
 8006ffe:	dd05      	ble.n	800700c <_dtoa_r+0x95c>
 8007000:	4629      	mov	r1, r5
 8007002:	4632      	mov	r2, r6
 8007004:	4658      	mov	r0, fp
 8007006:	f000 fc25 	bl	8007854 <__lshift>
 800700a:	4605      	mov	r5, r0
 800700c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800700e:	2b00      	cmp	r3, #0
 8007010:	d05a      	beq.n	80070c8 <_dtoa_r+0xa18>
 8007012:	6869      	ldr	r1, [r5, #4]
 8007014:	4658      	mov	r0, fp
 8007016:	f000 fa0f 	bl	8007438 <_Balloc>
 800701a:	4606      	mov	r6, r0
 800701c:	b928      	cbnz	r0, 800702a <_dtoa_r+0x97a>
 800701e:	4b84      	ldr	r3, [pc, #528]	@ (8007230 <_dtoa_r+0xb80>)
 8007020:	4602      	mov	r2, r0
 8007022:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007026:	f7ff bb5a 	b.w	80066de <_dtoa_r+0x2e>
 800702a:	692a      	ldr	r2, [r5, #16]
 800702c:	3202      	adds	r2, #2
 800702e:	0092      	lsls	r2, r2, #2
 8007030:	f105 010c 	add.w	r1, r5, #12
 8007034:	300c      	adds	r0, #12
 8007036:	f001 f813 	bl	8008060 <memcpy>
 800703a:	2201      	movs	r2, #1
 800703c:	4631      	mov	r1, r6
 800703e:	4658      	mov	r0, fp
 8007040:	f000 fc08 	bl	8007854 <__lshift>
 8007044:	f10a 0301 	add.w	r3, sl, #1
 8007048:	9307      	str	r3, [sp, #28]
 800704a:	9b00      	ldr	r3, [sp, #0]
 800704c:	4453      	add	r3, sl
 800704e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007050:	9b02      	ldr	r3, [sp, #8]
 8007052:	f003 0301 	and.w	r3, r3, #1
 8007056:	462f      	mov	r7, r5
 8007058:	930a      	str	r3, [sp, #40]	@ 0x28
 800705a:	4605      	mov	r5, r0
 800705c:	9b07      	ldr	r3, [sp, #28]
 800705e:	4621      	mov	r1, r4
 8007060:	3b01      	subs	r3, #1
 8007062:	4648      	mov	r0, r9
 8007064:	9300      	str	r3, [sp, #0]
 8007066:	f7ff fa9a 	bl	800659e <quorem>
 800706a:	4639      	mov	r1, r7
 800706c:	9002      	str	r0, [sp, #8]
 800706e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007072:	4648      	mov	r0, r9
 8007074:	f000 fc5a 	bl	800792c <__mcmp>
 8007078:	462a      	mov	r2, r5
 800707a:	9008      	str	r0, [sp, #32]
 800707c:	4621      	mov	r1, r4
 800707e:	4658      	mov	r0, fp
 8007080:	f000 fc70 	bl	8007964 <__mdiff>
 8007084:	68c2      	ldr	r2, [r0, #12]
 8007086:	4606      	mov	r6, r0
 8007088:	bb02      	cbnz	r2, 80070cc <_dtoa_r+0xa1c>
 800708a:	4601      	mov	r1, r0
 800708c:	4648      	mov	r0, r9
 800708e:	f000 fc4d 	bl	800792c <__mcmp>
 8007092:	4602      	mov	r2, r0
 8007094:	4631      	mov	r1, r6
 8007096:	4658      	mov	r0, fp
 8007098:	920e      	str	r2, [sp, #56]	@ 0x38
 800709a:	f000 fa0d 	bl	80074b8 <_Bfree>
 800709e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070a0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80070a2:	9e07      	ldr	r6, [sp, #28]
 80070a4:	ea43 0102 	orr.w	r1, r3, r2
 80070a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80070aa:	4319      	orrs	r1, r3
 80070ac:	d110      	bne.n	80070d0 <_dtoa_r+0xa20>
 80070ae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80070b2:	d029      	beq.n	8007108 <_dtoa_r+0xa58>
 80070b4:	9b08      	ldr	r3, [sp, #32]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	dd02      	ble.n	80070c0 <_dtoa_r+0xa10>
 80070ba:	9b02      	ldr	r3, [sp, #8]
 80070bc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80070c0:	9b00      	ldr	r3, [sp, #0]
 80070c2:	f883 8000 	strb.w	r8, [r3]
 80070c6:	e63f      	b.n	8006d48 <_dtoa_r+0x698>
 80070c8:	4628      	mov	r0, r5
 80070ca:	e7bb      	b.n	8007044 <_dtoa_r+0x994>
 80070cc:	2201      	movs	r2, #1
 80070ce:	e7e1      	b.n	8007094 <_dtoa_r+0x9e4>
 80070d0:	9b08      	ldr	r3, [sp, #32]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	db04      	blt.n	80070e0 <_dtoa_r+0xa30>
 80070d6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80070d8:	430b      	orrs	r3, r1
 80070da:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80070dc:	430b      	orrs	r3, r1
 80070de:	d120      	bne.n	8007122 <_dtoa_r+0xa72>
 80070e0:	2a00      	cmp	r2, #0
 80070e2:	dded      	ble.n	80070c0 <_dtoa_r+0xa10>
 80070e4:	4649      	mov	r1, r9
 80070e6:	2201      	movs	r2, #1
 80070e8:	4658      	mov	r0, fp
 80070ea:	f000 fbb3 	bl	8007854 <__lshift>
 80070ee:	4621      	mov	r1, r4
 80070f0:	4681      	mov	r9, r0
 80070f2:	f000 fc1b 	bl	800792c <__mcmp>
 80070f6:	2800      	cmp	r0, #0
 80070f8:	dc03      	bgt.n	8007102 <_dtoa_r+0xa52>
 80070fa:	d1e1      	bne.n	80070c0 <_dtoa_r+0xa10>
 80070fc:	f018 0f01 	tst.w	r8, #1
 8007100:	d0de      	beq.n	80070c0 <_dtoa_r+0xa10>
 8007102:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007106:	d1d8      	bne.n	80070ba <_dtoa_r+0xa0a>
 8007108:	9a00      	ldr	r2, [sp, #0]
 800710a:	2339      	movs	r3, #57	@ 0x39
 800710c:	7013      	strb	r3, [r2, #0]
 800710e:	4633      	mov	r3, r6
 8007110:	461e      	mov	r6, r3
 8007112:	3b01      	subs	r3, #1
 8007114:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007118:	2a39      	cmp	r2, #57	@ 0x39
 800711a:	d052      	beq.n	80071c2 <_dtoa_r+0xb12>
 800711c:	3201      	adds	r2, #1
 800711e:	701a      	strb	r2, [r3, #0]
 8007120:	e612      	b.n	8006d48 <_dtoa_r+0x698>
 8007122:	2a00      	cmp	r2, #0
 8007124:	dd07      	ble.n	8007136 <_dtoa_r+0xa86>
 8007126:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800712a:	d0ed      	beq.n	8007108 <_dtoa_r+0xa58>
 800712c:	9a00      	ldr	r2, [sp, #0]
 800712e:	f108 0301 	add.w	r3, r8, #1
 8007132:	7013      	strb	r3, [r2, #0]
 8007134:	e608      	b.n	8006d48 <_dtoa_r+0x698>
 8007136:	9b07      	ldr	r3, [sp, #28]
 8007138:	9a07      	ldr	r2, [sp, #28]
 800713a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800713e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007140:	4293      	cmp	r3, r2
 8007142:	d028      	beq.n	8007196 <_dtoa_r+0xae6>
 8007144:	4649      	mov	r1, r9
 8007146:	2300      	movs	r3, #0
 8007148:	220a      	movs	r2, #10
 800714a:	4658      	mov	r0, fp
 800714c:	f000 f9d6 	bl	80074fc <__multadd>
 8007150:	42af      	cmp	r7, r5
 8007152:	4681      	mov	r9, r0
 8007154:	f04f 0300 	mov.w	r3, #0
 8007158:	f04f 020a 	mov.w	r2, #10
 800715c:	4639      	mov	r1, r7
 800715e:	4658      	mov	r0, fp
 8007160:	d107      	bne.n	8007172 <_dtoa_r+0xac2>
 8007162:	f000 f9cb 	bl	80074fc <__multadd>
 8007166:	4607      	mov	r7, r0
 8007168:	4605      	mov	r5, r0
 800716a:	9b07      	ldr	r3, [sp, #28]
 800716c:	3301      	adds	r3, #1
 800716e:	9307      	str	r3, [sp, #28]
 8007170:	e774      	b.n	800705c <_dtoa_r+0x9ac>
 8007172:	f000 f9c3 	bl	80074fc <__multadd>
 8007176:	4629      	mov	r1, r5
 8007178:	4607      	mov	r7, r0
 800717a:	2300      	movs	r3, #0
 800717c:	220a      	movs	r2, #10
 800717e:	4658      	mov	r0, fp
 8007180:	f000 f9bc 	bl	80074fc <__multadd>
 8007184:	4605      	mov	r5, r0
 8007186:	e7f0      	b.n	800716a <_dtoa_r+0xaba>
 8007188:	9b00      	ldr	r3, [sp, #0]
 800718a:	2b00      	cmp	r3, #0
 800718c:	bfcc      	ite	gt
 800718e:	461e      	movgt	r6, r3
 8007190:	2601      	movle	r6, #1
 8007192:	4456      	add	r6, sl
 8007194:	2700      	movs	r7, #0
 8007196:	4649      	mov	r1, r9
 8007198:	2201      	movs	r2, #1
 800719a:	4658      	mov	r0, fp
 800719c:	f000 fb5a 	bl	8007854 <__lshift>
 80071a0:	4621      	mov	r1, r4
 80071a2:	4681      	mov	r9, r0
 80071a4:	f000 fbc2 	bl	800792c <__mcmp>
 80071a8:	2800      	cmp	r0, #0
 80071aa:	dcb0      	bgt.n	800710e <_dtoa_r+0xa5e>
 80071ac:	d102      	bne.n	80071b4 <_dtoa_r+0xb04>
 80071ae:	f018 0f01 	tst.w	r8, #1
 80071b2:	d1ac      	bne.n	800710e <_dtoa_r+0xa5e>
 80071b4:	4633      	mov	r3, r6
 80071b6:	461e      	mov	r6, r3
 80071b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80071bc:	2a30      	cmp	r2, #48	@ 0x30
 80071be:	d0fa      	beq.n	80071b6 <_dtoa_r+0xb06>
 80071c0:	e5c2      	b.n	8006d48 <_dtoa_r+0x698>
 80071c2:	459a      	cmp	sl, r3
 80071c4:	d1a4      	bne.n	8007110 <_dtoa_r+0xa60>
 80071c6:	9b04      	ldr	r3, [sp, #16]
 80071c8:	3301      	adds	r3, #1
 80071ca:	9304      	str	r3, [sp, #16]
 80071cc:	2331      	movs	r3, #49	@ 0x31
 80071ce:	f88a 3000 	strb.w	r3, [sl]
 80071d2:	e5b9      	b.n	8006d48 <_dtoa_r+0x698>
 80071d4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80071d6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007234 <_dtoa_r+0xb84>
 80071da:	b11b      	cbz	r3, 80071e4 <_dtoa_r+0xb34>
 80071dc:	f10a 0308 	add.w	r3, sl, #8
 80071e0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80071e2:	6013      	str	r3, [r2, #0]
 80071e4:	4650      	mov	r0, sl
 80071e6:	b019      	add	sp, #100	@ 0x64
 80071e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071ee:	2b01      	cmp	r3, #1
 80071f0:	f77f ae37 	ble.w	8006e62 <_dtoa_r+0x7b2>
 80071f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80071f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80071f8:	2001      	movs	r0, #1
 80071fa:	e655      	b.n	8006ea8 <_dtoa_r+0x7f8>
 80071fc:	9b00      	ldr	r3, [sp, #0]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	f77f aed6 	ble.w	8006fb0 <_dtoa_r+0x900>
 8007204:	4656      	mov	r6, sl
 8007206:	4621      	mov	r1, r4
 8007208:	4648      	mov	r0, r9
 800720a:	f7ff f9c8 	bl	800659e <quorem>
 800720e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007212:	f806 8b01 	strb.w	r8, [r6], #1
 8007216:	9b00      	ldr	r3, [sp, #0]
 8007218:	eba6 020a 	sub.w	r2, r6, sl
 800721c:	4293      	cmp	r3, r2
 800721e:	ddb3      	ble.n	8007188 <_dtoa_r+0xad8>
 8007220:	4649      	mov	r1, r9
 8007222:	2300      	movs	r3, #0
 8007224:	220a      	movs	r2, #10
 8007226:	4658      	mov	r0, fp
 8007228:	f000 f968 	bl	80074fc <__multadd>
 800722c:	4681      	mov	r9, r0
 800722e:	e7ea      	b.n	8007206 <_dtoa_r+0xb56>
 8007230:	08008424 	.word	0x08008424
 8007234:	080083a8 	.word	0x080083a8

08007238 <_free_r>:
 8007238:	b538      	push	{r3, r4, r5, lr}
 800723a:	4605      	mov	r5, r0
 800723c:	2900      	cmp	r1, #0
 800723e:	d041      	beq.n	80072c4 <_free_r+0x8c>
 8007240:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007244:	1f0c      	subs	r4, r1, #4
 8007246:	2b00      	cmp	r3, #0
 8007248:	bfb8      	it	lt
 800724a:	18e4      	addlt	r4, r4, r3
 800724c:	f000 f8e8 	bl	8007420 <__malloc_lock>
 8007250:	4a1d      	ldr	r2, [pc, #116]	@ (80072c8 <_free_r+0x90>)
 8007252:	6813      	ldr	r3, [r2, #0]
 8007254:	b933      	cbnz	r3, 8007264 <_free_r+0x2c>
 8007256:	6063      	str	r3, [r4, #4]
 8007258:	6014      	str	r4, [r2, #0]
 800725a:	4628      	mov	r0, r5
 800725c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007260:	f000 b8e4 	b.w	800742c <__malloc_unlock>
 8007264:	42a3      	cmp	r3, r4
 8007266:	d908      	bls.n	800727a <_free_r+0x42>
 8007268:	6820      	ldr	r0, [r4, #0]
 800726a:	1821      	adds	r1, r4, r0
 800726c:	428b      	cmp	r3, r1
 800726e:	bf01      	itttt	eq
 8007270:	6819      	ldreq	r1, [r3, #0]
 8007272:	685b      	ldreq	r3, [r3, #4]
 8007274:	1809      	addeq	r1, r1, r0
 8007276:	6021      	streq	r1, [r4, #0]
 8007278:	e7ed      	b.n	8007256 <_free_r+0x1e>
 800727a:	461a      	mov	r2, r3
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	b10b      	cbz	r3, 8007284 <_free_r+0x4c>
 8007280:	42a3      	cmp	r3, r4
 8007282:	d9fa      	bls.n	800727a <_free_r+0x42>
 8007284:	6811      	ldr	r1, [r2, #0]
 8007286:	1850      	adds	r0, r2, r1
 8007288:	42a0      	cmp	r0, r4
 800728a:	d10b      	bne.n	80072a4 <_free_r+0x6c>
 800728c:	6820      	ldr	r0, [r4, #0]
 800728e:	4401      	add	r1, r0
 8007290:	1850      	adds	r0, r2, r1
 8007292:	4283      	cmp	r3, r0
 8007294:	6011      	str	r1, [r2, #0]
 8007296:	d1e0      	bne.n	800725a <_free_r+0x22>
 8007298:	6818      	ldr	r0, [r3, #0]
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	6053      	str	r3, [r2, #4]
 800729e:	4408      	add	r0, r1
 80072a0:	6010      	str	r0, [r2, #0]
 80072a2:	e7da      	b.n	800725a <_free_r+0x22>
 80072a4:	d902      	bls.n	80072ac <_free_r+0x74>
 80072a6:	230c      	movs	r3, #12
 80072a8:	602b      	str	r3, [r5, #0]
 80072aa:	e7d6      	b.n	800725a <_free_r+0x22>
 80072ac:	6820      	ldr	r0, [r4, #0]
 80072ae:	1821      	adds	r1, r4, r0
 80072b0:	428b      	cmp	r3, r1
 80072b2:	bf04      	itt	eq
 80072b4:	6819      	ldreq	r1, [r3, #0]
 80072b6:	685b      	ldreq	r3, [r3, #4]
 80072b8:	6063      	str	r3, [r4, #4]
 80072ba:	bf04      	itt	eq
 80072bc:	1809      	addeq	r1, r1, r0
 80072be:	6021      	streq	r1, [r4, #0]
 80072c0:	6054      	str	r4, [r2, #4]
 80072c2:	e7ca      	b.n	800725a <_free_r+0x22>
 80072c4:	bd38      	pop	{r3, r4, r5, pc}
 80072c6:	bf00      	nop
 80072c8:	20000478 	.word	0x20000478

080072cc <malloc>:
 80072cc:	4b02      	ldr	r3, [pc, #8]	@ (80072d8 <malloc+0xc>)
 80072ce:	4601      	mov	r1, r0
 80072d0:	6818      	ldr	r0, [r3, #0]
 80072d2:	f000 b825 	b.w	8007320 <_malloc_r>
 80072d6:	bf00      	nop
 80072d8:	20000018 	.word	0x20000018

080072dc <sbrk_aligned>:
 80072dc:	b570      	push	{r4, r5, r6, lr}
 80072de:	4e0f      	ldr	r6, [pc, #60]	@ (800731c <sbrk_aligned+0x40>)
 80072e0:	460c      	mov	r4, r1
 80072e2:	6831      	ldr	r1, [r6, #0]
 80072e4:	4605      	mov	r5, r0
 80072e6:	b911      	cbnz	r1, 80072ee <sbrk_aligned+0x12>
 80072e8:	f000 feaa 	bl	8008040 <_sbrk_r>
 80072ec:	6030      	str	r0, [r6, #0]
 80072ee:	4621      	mov	r1, r4
 80072f0:	4628      	mov	r0, r5
 80072f2:	f000 fea5 	bl	8008040 <_sbrk_r>
 80072f6:	1c43      	adds	r3, r0, #1
 80072f8:	d103      	bne.n	8007302 <sbrk_aligned+0x26>
 80072fa:	f04f 34ff 	mov.w	r4, #4294967295
 80072fe:	4620      	mov	r0, r4
 8007300:	bd70      	pop	{r4, r5, r6, pc}
 8007302:	1cc4      	adds	r4, r0, #3
 8007304:	f024 0403 	bic.w	r4, r4, #3
 8007308:	42a0      	cmp	r0, r4
 800730a:	d0f8      	beq.n	80072fe <sbrk_aligned+0x22>
 800730c:	1a21      	subs	r1, r4, r0
 800730e:	4628      	mov	r0, r5
 8007310:	f000 fe96 	bl	8008040 <_sbrk_r>
 8007314:	3001      	adds	r0, #1
 8007316:	d1f2      	bne.n	80072fe <sbrk_aligned+0x22>
 8007318:	e7ef      	b.n	80072fa <sbrk_aligned+0x1e>
 800731a:	bf00      	nop
 800731c:	20000474 	.word	0x20000474

08007320 <_malloc_r>:
 8007320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007324:	1ccd      	adds	r5, r1, #3
 8007326:	f025 0503 	bic.w	r5, r5, #3
 800732a:	3508      	adds	r5, #8
 800732c:	2d0c      	cmp	r5, #12
 800732e:	bf38      	it	cc
 8007330:	250c      	movcc	r5, #12
 8007332:	2d00      	cmp	r5, #0
 8007334:	4606      	mov	r6, r0
 8007336:	db01      	blt.n	800733c <_malloc_r+0x1c>
 8007338:	42a9      	cmp	r1, r5
 800733a:	d904      	bls.n	8007346 <_malloc_r+0x26>
 800733c:	230c      	movs	r3, #12
 800733e:	6033      	str	r3, [r6, #0]
 8007340:	2000      	movs	r0, #0
 8007342:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007346:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800741c <_malloc_r+0xfc>
 800734a:	f000 f869 	bl	8007420 <__malloc_lock>
 800734e:	f8d8 3000 	ldr.w	r3, [r8]
 8007352:	461c      	mov	r4, r3
 8007354:	bb44      	cbnz	r4, 80073a8 <_malloc_r+0x88>
 8007356:	4629      	mov	r1, r5
 8007358:	4630      	mov	r0, r6
 800735a:	f7ff ffbf 	bl	80072dc <sbrk_aligned>
 800735e:	1c43      	adds	r3, r0, #1
 8007360:	4604      	mov	r4, r0
 8007362:	d158      	bne.n	8007416 <_malloc_r+0xf6>
 8007364:	f8d8 4000 	ldr.w	r4, [r8]
 8007368:	4627      	mov	r7, r4
 800736a:	2f00      	cmp	r7, #0
 800736c:	d143      	bne.n	80073f6 <_malloc_r+0xd6>
 800736e:	2c00      	cmp	r4, #0
 8007370:	d04b      	beq.n	800740a <_malloc_r+0xea>
 8007372:	6823      	ldr	r3, [r4, #0]
 8007374:	4639      	mov	r1, r7
 8007376:	4630      	mov	r0, r6
 8007378:	eb04 0903 	add.w	r9, r4, r3
 800737c:	f000 fe60 	bl	8008040 <_sbrk_r>
 8007380:	4581      	cmp	r9, r0
 8007382:	d142      	bne.n	800740a <_malloc_r+0xea>
 8007384:	6821      	ldr	r1, [r4, #0]
 8007386:	1a6d      	subs	r5, r5, r1
 8007388:	4629      	mov	r1, r5
 800738a:	4630      	mov	r0, r6
 800738c:	f7ff ffa6 	bl	80072dc <sbrk_aligned>
 8007390:	3001      	adds	r0, #1
 8007392:	d03a      	beq.n	800740a <_malloc_r+0xea>
 8007394:	6823      	ldr	r3, [r4, #0]
 8007396:	442b      	add	r3, r5
 8007398:	6023      	str	r3, [r4, #0]
 800739a:	f8d8 3000 	ldr.w	r3, [r8]
 800739e:	685a      	ldr	r2, [r3, #4]
 80073a0:	bb62      	cbnz	r2, 80073fc <_malloc_r+0xdc>
 80073a2:	f8c8 7000 	str.w	r7, [r8]
 80073a6:	e00f      	b.n	80073c8 <_malloc_r+0xa8>
 80073a8:	6822      	ldr	r2, [r4, #0]
 80073aa:	1b52      	subs	r2, r2, r5
 80073ac:	d420      	bmi.n	80073f0 <_malloc_r+0xd0>
 80073ae:	2a0b      	cmp	r2, #11
 80073b0:	d917      	bls.n	80073e2 <_malloc_r+0xc2>
 80073b2:	1961      	adds	r1, r4, r5
 80073b4:	42a3      	cmp	r3, r4
 80073b6:	6025      	str	r5, [r4, #0]
 80073b8:	bf18      	it	ne
 80073ba:	6059      	strne	r1, [r3, #4]
 80073bc:	6863      	ldr	r3, [r4, #4]
 80073be:	bf08      	it	eq
 80073c0:	f8c8 1000 	streq.w	r1, [r8]
 80073c4:	5162      	str	r2, [r4, r5]
 80073c6:	604b      	str	r3, [r1, #4]
 80073c8:	4630      	mov	r0, r6
 80073ca:	f000 f82f 	bl	800742c <__malloc_unlock>
 80073ce:	f104 000b 	add.w	r0, r4, #11
 80073d2:	1d23      	adds	r3, r4, #4
 80073d4:	f020 0007 	bic.w	r0, r0, #7
 80073d8:	1ac2      	subs	r2, r0, r3
 80073da:	bf1c      	itt	ne
 80073dc:	1a1b      	subne	r3, r3, r0
 80073de:	50a3      	strne	r3, [r4, r2]
 80073e0:	e7af      	b.n	8007342 <_malloc_r+0x22>
 80073e2:	6862      	ldr	r2, [r4, #4]
 80073e4:	42a3      	cmp	r3, r4
 80073e6:	bf0c      	ite	eq
 80073e8:	f8c8 2000 	streq.w	r2, [r8]
 80073ec:	605a      	strne	r2, [r3, #4]
 80073ee:	e7eb      	b.n	80073c8 <_malloc_r+0xa8>
 80073f0:	4623      	mov	r3, r4
 80073f2:	6864      	ldr	r4, [r4, #4]
 80073f4:	e7ae      	b.n	8007354 <_malloc_r+0x34>
 80073f6:	463c      	mov	r4, r7
 80073f8:	687f      	ldr	r7, [r7, #4]
 80073fa:	e7b6      	b.n	800736a <_malloc_r+0x4a>
 80073fc:	461a      	mov	r2, r3
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	42a3      	cmp	r3, r4
 8007402:	d1fb      	bne.n	80073fc <_malloc_r+0xdc>
 8007404:	2300      	movs	r3, #0
 8007406:	6053      	str	r3, [r2, #4]
 8007408:	e7de      	b.n	80073c8 <_malloc_r+0xa8>
 800740a:	230c      	movs	r3, #12
 800740c:	6033      	str	r3, [r6, #0]
 800740e:	4630      	mov	r0, r6
 8007410:	f000 f80c 	bl	800742c <__malloc_unlock>
 8007414:	e794      	b.n	8007340 <_malloc_r+0x20>
 8007416:	6005      	str	r5, [r0, #0]
 8007418:	e7d6      	b.n	80073c8 <_malloc_r+0xa8>
 800741a:	bf00      	nop
 800741c:	20000478 	.word	0x20000478

08007420 <__malloc_lock>:
 8007420:	4801      	ldr	r0, [pc, #4]	@ (8007428 <__malloc_lock+0x8>)
 8007422:	f7ff b8ba 	b.w	800659a <__retarget_lock_acquire_recursive>
 8007426:	bf00      	nop
 8007428:	20000470 	.word	0x20000470

0800742c <__malloc_unlock>:
 800742c:	4801      	ldr	r0, [pc, #4]	@ (8007434 <__malloc_unlock+0x8>)
 800742e:	f7ff b8b5 	b.w	800659c <__retarget_lock_release_recursive>
 8007432:	bf00      	nop
 8007434:	20000470 	.word	0x20000470

08007438 <_Balloc>:
 8007438:	b570      	push	{r4, r5, r6, lr}
 800743a:	69c6      	ldr	r6, [r0, #28]
 800743c:	4604      	mov	r4, r0
 800743e:	460d      	mov	r5, r1
 8007440:	b976      	cbnz	r6, 8007460 <_Balloc+0x28>
 8007442:	2010      	movs	r0, #16
 8007444:	f7ff ff42 	bl	80072cc <malloc>
 8007448:	4602      	mov	r2, r0
 800744a:	61e0      	str	r0, [r4, #28]
 800744c:	b920      	cbnz	r0, 8007458 <_Balloc+0x20>
 800744e:	4b18      	ldr	r3, [pc, #96]	@ (80074b0 <_Balloc+0x78>)
 8007450:	4818      	ldr	r0, [pc, #96]	@ (80074b4 <_Balloc+0x7c>)
 8007452:	216b      	movs	r1, #107	@ 0x6b
 8007454:	f000 fe12 	bl	800807c <__assert_func>
 8007458:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800745c:	6006      	str	r6, [r0, #0]
 800745e:	60c6      	str	r6, [r0, #12]
 8007460:	69e6      	ldr	r6, [r4, #28]
 8007462:	68f3      	ldr	r3, [r6, #12]
 8007464:	b183      	cbz	r3, 8007488 <_Balloc+0x50>
 8007466:	69e3      	ldr	r3, [r4, #28]
 8007468:	68db      	ldr	r3, [r3, #12]
 800746a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800746e:	b9b8      	cbnz	r0, 80074a0 <_Balloc+0x68>
 8007470:	2101      	movs	r1, #1
 8007472:	fa01 f605 	lsl.w	r6, r1, r5
 8007476:	1d72      	adds	r2, r6, #5
 8007478:	0092      	lsls	r2, r2, #2
 800747a:	4620      	mov	r0, r4
 800747c:	f000 fe1c 	bl	80080b8 <_calloc_r>
 8007480:	b160      	cbz	r0, 800749c <_Balloc+0x64>
 8007482:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007486:	e00e      	b.n	80074a6 <_Balloc+0x6e>
 8007488:	2221      	movs	r2, #33	@ 0x21
 800748a:	2104      	movs	r1, #4
 800748c:	4620      	mov	r0, r4
 800748e:	f000 fe13 	bl	80080b8 <_calloc_r>
 8007492:	69e3      	ldr	r3, [r4, #28]
 8007494:	60f0      	str	r0, [r6, #12]
 8007496:	68db      	ldr	r3, [r3, #12]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d1e4      	bne.n	8007466 <_Balloc+0x2e>
 800749c:	2000      	movs	r0, #0
 800749e:	bd70      	pop	{r4, r5, r6, pc}
 80074a0:	6802      	ldr	r2, [r0, #0]
 80074a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80074a6:	2300      	movs	r3, #0
 80074a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80074ac:	e7f7      	b.n	800749e <_Balloc+0x66>
 80074ae:	bf00      	nop
 80074b0:	080083b5 	.word	0x080083b5
 80074b4:	08008435 	.word	0x08008435

080074b8 <_Bfree>:
 80074b8:	b570      	push	{r4, r5, r6, lr}
 80074ba:	69c6      	ldr	r6, [r0, #28]
 80074bc:	4605      	mov	r5, r0
 80074be:	460c      	mov	r4, r1
 80074c0:	b976      	cbnz	r6, 80074e0 <_Bfree+0x28>
 80074c2:	2010      	movs	r0, #16
 80074c4:	f7ff ff02 	bl	80072cc <malloc>
 80074c8:	4602      	mov	r2, r0
 80074ca:	61e8      	str	r0, [r5, #28]
 80074cc:	b920      	cbnz	r0, 80074d8 <_Bfree+0x20>
 80074ce:	4b09      	ldr	r3, [pc, #36]	@ (80074f4 <_Bfree+0x3c>)
 80074d0:	4809      	ldr	r0, [pc, #36]	@ (80074f8 <_Bfree+0x40>)
 80074d2:	218f      	movs	r1, #143	@ 0x8f
 80074d4:	f000 fdd2 	bl	800807c <__assert_func>
 80074d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80074dc:	6006      	str	r6, [r0, #0]
 80074de:	60c6      	str	r6, [r0, #12]
 80074e0:	b13c      	cbz	r4, 80074f2 <_Bfree+0x3a>
 80074e2:	69eb      	ldr	r3, [r5, #28]
 80074e4:	6862      	ldr	r2, [r4, #4]
 80074e6:	68db      	ldr	r3, [r3, #12]
 80074e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80074ec:	6021      	str	r1, [r4, #0]
 80074ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80074f2:	bd70      	pop	{r4, r5, r6, pc}
 80074f4:	080083b5 	.word	0x080083b5
 80074f8:	08008435 	.word	0x08008435

080074fc <__multadd>:
 80074fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007500:	690d      	ldr	r5, [r1, #16]
 8007502:	4607      	mov	r7, r0
 8007504:	460c      	mov	r4, r1
 8007506:	461e      	mov	r6, r3
 8007508:	f101 0c14 	add.w	ip, r1, #20
 800750c:	2000      	movs	r0, #0
 800750e:	f8dc 3000 	ldr.w	r3, [ip]
 8007512:	b299      	uxth	r1, r3
 8007514:	fb02 6101 	mla	r1, r2, r1, r6
 8007518:	0c1e      	lsrs	r6, r3, #16
 800751a:	0c0b      	lsrs	r3, r1, #16
 800751c:	fb02 3306 	mla	r3, r2, r6, r3
 8007520:	b289      	uxth	r1, r1
 8007522:	3001      	adds	r0, #1
 8007524:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007528:	4285      	cmp	r5, r0
 800752a:	f84c 1b04 	str.w	r1, [ip], #4
 800752e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007532:	dcec      	bgt.n	800750e <__multadd+0x12>
 8007534:	b30e      	cbz	r6, 800757a <__multadd+0x7e>
 8007536:	68a3      	ldr	r3, [r4, #8]
 8007538:	42ab      	cmp	r3, r5
 800753a:	dc19      	bgt.n	8007570 <__multadd+0x74>
 800753c:	6861      	ldr	r1, [r4, #4]
 800753e:	4638      	mov	r0, r7
 8007540:	3101      	adds	r1, #1
 8007542:	f7ff ff79 	bl	8007438 <_Balloc>
 8007546:	4680      	mov	r8, r0
 8007548:	b928      	cbnz	r0, 8007556 <__multadd+0x5a>
 800754a:	4602      	mov	r2, r0
 800754c:	4b0c      	ldr	r3, [pc, #48]	@ (8007580 <__multadd+0x84>)
 800754e:	480d      	ldr	r0, [pc, #52]	@ (8007584 <__multadd+0x88>)
 8007550:	21ba      	movs	r1, #186	@ 0xba
 8007552:	f000 fd93 	bl	800807c <__assert_func>
 8007556:	6922      	ldr	r2, [r4, #16]
 8007558:	3202      	adds	r2, #2
 800755a:	f104 010c 	add.w	r1, r4, #12
 800755e:	0092      	lsls	r2, r2, #2
 8007560:	300c      	adds	r0, #12
 8007562:	f000 fd7d 	bl	8008060 <memcpy>
 8007566:	4621      	mov	r1, r4
 8007568:	4638      	mov	r0, r7
 800756a:	f7ff ffa5 	bl	80074b8 <_Bfree>
 800756e:	4644      	mov	r4, r8
 8007570:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007574:	3501      	adds	r5, #1
 8007576:	615e      	str	r6, [r3, #20]
 8007578:	6125      	str	r5, [r4, #16]
 800757a:	4620      	mov	r0, r4
 800757c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007580:	08008424 	.word	0x08008424
 8007584:	08008435 	.word	0x08008435

08007588 <__hi0bits>:
 8007588:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800758c:	4603      	mov	r3, r0
 800758e:	bf36      	itet	cc
 8007590:	0403      	lslcc	r3, r0, #16
 8007592:	2000      	movcs	r0, #0
 8007594:	2010      	movcc	r0, #16
 8007596:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800759a:	bf3c      	itt	cc
 800759c:	021b      	lslcc	r3, r3, #8
 800759e:	3008      	addcc	r0, #8
 80075a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80075a4:	bf3c      	itt	cc
 80075a6:	011b      	lslcc	r3, r3, #4
 80075a8:	3004      	addcc	r0, #4
 80075aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075ae:	bf3c      	itt	cc
 80075b0:	009b      	lslcc	r3, r3, #2
 80075b2:	3002      	addcc	r0, #2
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	db05      	blt.n	80075c4 <__hi0bits+0x3c>
 80075b8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80075bc:	f100 0001 	add.w	r0, r0, #1
 80075c0:	bf08      	it	eq
 80075c2:	2020      	moveq	r0, #32
 80075c4:	4770      	bx	lr

080075c6 <__lo0bits>:
 80075c6:	6803      	ldr	r3, [r0, #0]
 80075c8:	4602      	mov	r2, r0
 80075ca:	f013 0007 	ands.w	r0, r3, #7
 80075ce:	d00b      	beq.n	80075e8 <__lo0bits+0x22>
 80075d0:	07d9      	lsls	r1, r3, #31
 80075d2:	d421      	bmi.n	8007618 <__lo0bits+0x52>
 80075d4:	0798      	lsls	r0, r3, #30
 80075d6:	bf49      	itett	mi
 80075d8:	085b      	lsrmi	r3, r3, #1
 80075da:	089b      	lsrpl	r3, r3, #2
 80075dc:	2001      	movmi	r0, #1
 80075de:	6013      	strmi	r3, [r2, #0]
 80075e0:	bf5c      	itt	pl
 80075e2:	6013      	strpl	r3, [r2, #0]
 80075e4:	2002      	movpl	r0, #2
 80075e6:	4770      	bx	lr
 80075e8:	b299      	uxth	r1, r3
 80075ea:	b909      	cbnz	r1, 80075f0 <__lo0bits+0x2a>
 80075ec:	0c1b      	lsrs	r3, r3, #16
 80075ee:	2010      	movs	r0, #16
 80075f0:	b2d9      	uxtb	r1, r3
 80075f2:	b909      	cbnz	r1, 80075f8 <__lo0bits+0x32>
 80075f4:	3008      	adds	r0, #8
 80075f6:	0a1b      	lsrs	r3, r3, #8
 80075f8:	0719      	lsls	r1, r3, #28
 80075fa:	bf04      	itt	eq
 80075fc:	091b      	lsreq	r3, r3, #4
 80075fe:	3004      	addeq	r0, #4
 8007600:	0799      	lsls	r1, r3, #30
 8007602:	bf04      	itt	eq
 8007604:	089b      	lsreq	r3, r3, #2
 8007606:	3002      	addeq	r0, #2
 8007608:	07d9      	lsls	r1, r3, #31
 800760a:	d403      	bmi.n	8007614 <__lo0bits+0x4e>
 800760c:	085b      	lsrs	r3, r3, #1
 800760e:	f100 0001 	add.w	r0, r0, #1
 8007612:	d003      	beq.n	800761c <__lo0bits+0x56>
 8007614:	6013      	str	r3, [r2, #0]
 8007616:	4770      	bx	lr
 8007618:	2000      	movs	r0, #0
 800761a:	4770      	bx	lr
 800761c:	2020      	movs	r0, #32
 800761e:	4770      	bx	lr

08007620 <__i2b>:
 8007620:	b510      	push	{r4, lr}
 8007622:	460c      	mov	r4, r1
 8007624:	2101      	movs	r1, #1
 8007626:	f7ff ff07 	bl	8007438 <_Balloc>
 800762a:	4602      	mov	r2, r0
 800762c:	b928      	cbnz	r0, 800763a <__i2b+0x1a>
 800762e:	4b05      	ldr	r3, [pc, #20]	@ (8007644 <__i2b+0x24>)
 8007630:	4805      	ldr	r0, [pc, #20]	@ (8007648 <__i2b+0x28>)
 8007632:	f240 1145 	movw	r1, #325	@ 0x145
 8007636:	f000 fd21 	bl	800807c <__assert_func>
 800763a:	2301      	movs	r3, #1
 800763c:	6144      	str	r4, [r0, #20]
 800763e:	6103      	str	r3, [r0, #16]
 8007640:	bd10      	pop	{r4, pc}
 8007642:	bf00      	nop
 8007644:	08008424 	.word	0x08008424
 8007648:	08008435 	.word	0x08008435

0800764c <__multiply>:
 800764c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007650:	4614      	mov	r4, r2
 8007652:	690a      	ldr	r2, [r1, #16]
 8007654:	6923      	ldr	r3, [r4, #16]
 8007656:	429a      	cmp	r2, r3
 8007658:	bfa8      	it	ge
 800765a:	4623      	movge	r3, r4
 800765c:	460f      	mov	r7, r1
 800765e:	bfa4      	itt	ge
 8007660:	460c      	movge	r4, r1
 8007662:	461f      	movge	r7, r3
 8007664:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007668:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800766c:	68a3      	ldr	r3, [r4, #8]
 800766e:	6861      	ldr	r1, [r4, #4]
 8007670:	eb0a 0609 	add.w	r6, sl, r9
 8007674:	42b3      	cmp	r3, r6
 8007676:	b085      	sub	sp, #20
 8007678:	bfb8      	it	lt
 800767a:	3101      	addlt	r1, #1
 800767c:	f7ff fedc 	bl	8007438 <_Balloc>
 8007680:	b930      	cbnz	r0, 8007690 <__multiply+0x44>
 8007682:	4602      	mov	r2, r0
 8007684:	4b44      	ldr	r3, [pc, #272]	@ (8007798 <__multiply+0x14c>)
 8007686:	4845      	ldr	r0, [pc, #276]	@ (800779c <__multiply+0x150>)
 8007688:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800768c:	f000 fcf6 	bl	800807c <__assert_func>
 8007690:	f100 0514 	add.w	r5, r0, #20
 8007694:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007698:	462b      	mov	r3, r5
 800769a:	2200      	movs	r2, #0
 800769c:	4543      	cmp	r3, r8
 800769e:	d321      	bcc.n	80076e4 <__multiply+0x98>
 80076a0:	f107 0114 	add.w	r1, r7, #20
 80076a4:	f104 0214 	add.w	r2, r4, #20
 80076a8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80076ac:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80076b0:	9302      	str	r3, [sp, #8]
 80076b2:	1b13      	subs	r3, r2, r4
 80076b4:	3b15      	subs	r3, #21
 80076b6:	f023 0303 	bic.w	r3, r3, #3
 80076ba:	3304      	adds	r3, #4
 80076bc:	f104 0715 	add.w	r7, r4, #21
 80076c0:	42ba      	cmp	r2, r7
 80076c2:	bf38      	it	cc
 80076c4:	2304      	movcc	r3, #4
 80076c6:	9301      	str	r3, [sp, #4]
 80076c8:	9b02      	ldr	r3, [sp, #8]
 80076ca:	9103      	str	r1, [sp, #12]
 80076cc:	428b      	cmp	r3, r1
 80076ce:	d80c      	bhi.n	80076ea <__multiply+0x9e>
 80076d0:	2e00      	cmp	r6, #0
 80076d2:	dd03      	ble.n	80076dc <__multiply+0x90>
 80076d4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d05b      	beq.n	8007794 <__multiply+0x148>
 80076dc:	6106      	str	r6, [r0, #16]
 80076de:	b005      	add	sp, #20
 80076e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076e4:	f843 2b04 	str.w	r2, [r3], #4
 80076e8:	e7d8      	b.n	800769c <__multiply+0x50>
 80076ea:	f8b1 a000 	ldrh.w	sl, [r1]
 80076ee:	f1ba 0f00 	cmp.w	sl, #0
 80076f2:	d024      	beq.n	800773e <__multiply+0xf2>
 80076f4:	f104 0e14 	add.w	lr, r4, #20
 80076f8:	46a9      	mov	r9, r5
 80076fa:	f04f 0c00 	mov.w	ip, #0
 80076fe:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007702:	f8d9 3000 	ldr.w	r3, [r9]
 8007706:	fa1f fb87 	uxth.w	fp, r7
 800770a:	b29b      	uxth	r3, r3
 800770c:	fb0a 330b 	mla	r3, sl, fp, r3
 8007710:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007714:	f8d9 7000 	ldr.w	r7, [r9]
 8007718:	4463      	add	r3, ip
 800771a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800771e:	fb0a c70b 	mla	r7, sl, fp, ip
 8007722:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007726:	b29b      	uxth	r3, r3
 8007728:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800772c:	4572      	cmp	r2, lr
 800772e:	f849 3b04 	str.w	r3, [r9], #4
 8007732:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007736:	d8e2      	bhi.n	80076fe <__multiply+0xb2>
 8007738:	9b01      	ldr	r3, [sp, #4]
 800773a:	f845 c003 	str.w	ip, [r5, r3]
 800773e:	9b03      	ldr	r3, [sp, #12]
 8007740:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007744:	3104      	adds	r1, #4
 8007746:	f1b9 0f00 	cmp.w	r9, #0
 800774a:	d021      	beq.n	8007790 <__multiply+0x144>
 800774c:	682b      	ldr	r3, [r5, #0]
 800774e:	f104 0c14 	add.w	ip, r4, #20
 8007752:	46ae      	mov	lr, r5
 8007754:	f04f 0a00 	mov.w	sl, #0
 8007758:	f8bc b000 	ldrh.w	fp, [ip]
 800775c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007760:	fb09 770b 	mla	r7, r9, fp, r7
 8007764:	4457      	add	r7, sl
 8007766:	b29b      	uxth	r3, r3
 8007768:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800776c:	f84e 3b04 	str.w	r3, [lr], #4
 8007770:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007774:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007778:	f8be 3000 	ldrh.w	r3, [lr]
 800777c:	fb09 330a 	mla	r3, r9, sl, r3
 8007780:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007784:	4562      	cmp	r2, ip
 8007786:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800778a:	d8e5      	bhi.n	8007758 <__multiply+0x10c>
 800778c:	9f01      	ldr	r7, [sp, #4]
 800778e:	51eb      	str	r3, [r5, r7]
 8007790:	3504      	adds	r5, #4
 8007792:	e799      	b.n	80076c8 <__multiply+0x7c>
 8007794:	3e01      	subs	r6, #1
 8007796:	e79b      	b.n	80076d0 <__multiply+0x84>
 8007798:	08008424 	.word	0x08008424
 800779c:	08008435 	.word	0x08008435

080077a0 <__pow5mult>:
 80077a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077a4:	4615      	mov	r5, r2
 80077a6:	f012 0203 	ands.w	r2, r2, #3
 80077aa:	4607      	mov	r7, r0
 80077ac:	460e      	mov	r6, r1
 80077ae:	d007      	beq.n	80077c0 <__pow5mult+0x20>
 80077b0:	4c25      	ldr	r4, [pc, #148]	@ (8007848 <__pow5mult+0xa8>)
 80077b2:	3a01      	subs	r2, #1
 80077b4:	2300      	movs	r3, #0
 80077b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80077ba:	f7ff fe9f 	bl	80074fc <__multadd>
 80077be:	4606      	mov	r6, r0
 80077c0:	10ad      	asrs	r5, r5, #2
 80077c2:	d03d      	beq.n	8007840 <__pow5mult+0xa0>
 80077c4:	69fc      	ldr	r4, [r7, #28]
 80077c6:	b97c      	cbnz	r4, 80077e8 <__pow5mult+0x48>
 80077c8:	2010      	movs	r0, #16
 80077ca:	f7ff fd7f 	bl	80072cc <malloc>
 80077ce:	4602      	mov	r2, r0
 80077d0:	61f8      	str	r0, [r7, #28]
 80077d2:	b928      	cbnz	r0, 80077e0 <__pow5mult+0x40>
 80077d4:	4b1d      	ldr	r3, [pc, #116]	@ (800784c <__pow5mult+0xac>)
 80077d6:	481e      	ldr	r0, [pc, #120]	@ (8007850 <__pow5mult+0xb0>)
 80077d8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80077dc:	f000 fc4e 	bl	800807c <__assert_func>
 80077e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80077e4:	6004      	str	r4, [r0, #0]
 80077e6:	60c4      	str	r4, [r0, #12]
 80077e8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80077ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80077f0:	b94c      	cbnz	r4, 8007806 <__pow5mult+0x66>
 80077f2:	f240 2171 	movw	r1, #625	@ 0x271
 80077f6:	4638      	mov	r0, r7
 80077f8:	f7ff ff12 	bl	8007620 <__i2b>
 80077fc:	2300      	movs	r3, #0
 80077fe:	f8c8 0008 	str.w	r0, [r8, #8]
 8007802:	4604      	mov	r4, r0
 8007804:	6003      	str	r3, [r0, #0]
 8007806:	f04f 0900 	mov.w	r9, #0
 800780a:	07eb      	lsls	r3, r5, #31
 800780c:	d50a      	bpl.n	8007824 <__pow5mult+0x84>
 800780e:	4631      	mov	r1, r6
 8007810:	4622      	mov	r2, r4
 8007812:	4638      	mov	r0, r7
 8007814:	f7ff ff1a 	bl	800764c <__multiply>
 8007818:	4631      	mov	r1, r6
 800781a:	4680      	mov	r8, r0
 800781c:	4638      	mov	r0, r7
 800781e:	f7ff fe4b 	bl	80074b8 <_Bfree>
 8007822:	4646      	mov	r6, r8
 8007824:	106d      	asrs	r5, r5, #1
 8007826:	d00b      	beq.n	8007840 <__pow5mult+0xa0>
 8007828:	6820      	ldr	r0, [r4, #0]
 800782a:	b938      	cbnz	r0, 800783c <__pow5mult+0x9c>
 800782c:	4622      	mov	r2, r4
 800782e:	4621      	mov	r1, r4
 8007830:	4638      	mov	r0, r7
 8007832:	f7ff ff0b 	bl	800764c <__multiply>
 8007836:	6020      	str	r0, [r4, #0]
 8007838:	f8c0 9000 	str.w	r9, [r0]
 800783c:	4604      	mov	r4, r0
 800783e:	e7e4      	b.n	800780a <__pow5mult+0x6a>
 8007840:	4630      	mov	r0, r6
 8007842:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007846:	bf00      	nop
 8007848:	08008490 	.word	0x08008490
 800784c:	080083b5 	.word	0x080083b5
 8007850:	08008435 	.word	0x08008435

08007854 <__lshift>:
 8007854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007858:	460c      	mov	r4, r1
 800785a:	6849      	ldr	r1, [r1, #4]
 800785c:	6923      	ldr	r3, [r4, #16]
 800785e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007862:	68a3      	ldr	r3, [r4, #8]
 8007864:	4607      	mov	r7, r0
 8007866:	4691      	mov	r9, r2
 8007868:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800786c:	f108 0601 	add.w	r6, r8, #1
 8007870:	42b3      	cmp	r3, r6
 8007872:	db0b      	blt.n	800788c <__lshift+0x38>
 8007874:	4638      	mov	r0, r7
 8007876:	f7ff fddf 	bl	8007438 <_Balloc>
 800787a:	4605      	mov	r5, r0
 800787c:	b948      	cbnz	r0, 8007892 <__lshift+0x3e>
 800787e:	4602      	mov	r2, r0
 8007880:	4b28      	ldr	r3, [pc, #160]	@ (8007924 <__lshift+0xd0>)
 8007882:	4829      	ldr	r0, [pc, #164]	@ (8007928 <__lshift+0xd4>)
 8007884:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007888:	f000 fbf8 	bl	800807c <__assert_func>
 800788c:	3101      	adds	r1, #1
 800788e:	005b      	lsls	r3, r3, #1
 8007890:	e7ee      	b.n	8007870 <__lshift+0x1c>
 8007892:	2300      	movs	r3, #0
 8007894:	f100 0114 	add.w	r1, r0, #20
 8007898:	f100 0210 	add.w	r2, r0, #16
 800789c:	4618      	mov	r0, r3
 800789e:	4553      	cmp	r3, sl
 80078a0:	db33      	blt.n	800790a <__lshift+0xb6>
 80078a2:	6920      	ldr	r0, [r4, #16]
 80078a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80078a8:	f104 0314 	add.w	r3, r4, #20
 80078ac:	f019 091f 	ands.w	r9, r9, #31
 80078b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80078b4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80078b8:	d02b      	beq.n	8007912 <__lshift+0xbe>
 80078ba:	f1c9 0e20 	rsb	lr, r9, #32
 80078be:	468a      	mov	sl, r1
 80078c0:	2200      	movs	r2, #0
 80078c2:	6818      	ldr	r0, [r3, #0]
 80078c4:	fa00 f009 	lsl.w	r0, r0, r9
 80078c8:	4310      	orrs	r0, r2
 80078ca:	f84a 0b04 	str.w	r0, [sl], #4
 80078ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80078d2:	459c      	cmp	ip, r3
 80078d4:	fa22 f20e 	lsr.w	r2, r2, lr
 80078d8:	d8f3      	bhi.n	80078c2 <__lshift+0x6e>
 80078da:	ebac 0304 	sub.w	r3, ip, r4
 80078de:	3b15      	subs	r3, #21
 80078e0:	f023 0303 	bic.w	r3, r3, #3
 80078e4:	3304      	adds	r3, #4
 80078e6:	f104 0015 	add.w	r0, r4, #21
 80078ea:	4584      	cmp	ip, r0
 80078ec:	bf38      	it	cc
 80078ee:	2304      	movcc	r3, #4
 80078f0:	50ca      	str	r2, [r1, r3]
 80078f2:	b10a      	cbz	r2, 80078f8 <__lshift+0xa4>
 80078f4:	f108 0602 	add.w	r6, r8, #2
 80078f8:	3e01      	subs	r6, #1
 80078fa:	4638      	mov	r0, r7
 80078fc:	612e      	str	r6, [r5, #16]
 80078fe:	4621      	mov	r1, r4
 8007900:	f7ff fdda 	bl	80074b8 <_Bfree>
 8007904:	4628      	mov	r0, r5
 8007906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800790a:	f842 0f04 	str.w	r0, [r2, #4]!
 800790e:	3301      	adds	r3, #1
 8007910:	e7c5      	b.n	800789e <__lshift+0x4a>
 8007912:	3904      	subs	r1, #4
 8007914:	f853 2b04 	ldr.w	r2, [r3], #4
 8007918:	f841 2f04 	str.w	r2, [r1, #4]!
 800791c:	459c      	cmp	ip, r3
 800791e:	d8f9      	bhi.n	8007914 <__lshift+0xc0>
 8007920:	e7ea      	b.n	80078f8 <__lshift+0xa4>
 8007922:	bf00      	nop
 8007924:	08008424 	.word	0x08008424
 8007928:	08008435 	.word	0x08008435

0800792c <__mcmp>:
 800792c:	690a      	ldr	r2, [r1, #16]
 800792e:	4603      	mov	r3, r0
 8007930:	6900      	ldr	r0, [r0, #16]
 8007932:	1a80      	subs	r0, r0, r2
 8007934:	b530      	push	{r4, r5, lr}
 8007936:	d10e      	bne.n	8007956 <__mcmp+0x2a>
 8007938:	3314      	adds	r3, #20
 800793a:	3114      	adds	r1, #20
 800793c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007940:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007944:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007948:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800794c:	4295      	cmp	r5, r2
 800794e:	d003      	beq.n	8007958 <__mcmp+0x2c>
 8007950:	d205      	bcs.n	800795e <__mcmp+0x32>
 8007952:	f04f 30ff 	mov.w	r0, #4294967295
 8007956:	bd30      	pop	{r4, r5, pc}
 8007958:	42a3      	cmp	r3, r4
 800795a:	d3f3      	bcc.n	8007944 <__mcmp+0x18>
 800795c:	e7fb      	b.n	8007956 <__mcmp+0x2a>
 800795e:	2001      	movs	r0, #1
 8007960:	e7f9      	b.n	8007956 <__mcmp+0x2a>
	...

08007964 <__mdiff>:
 8007964:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007968:	4689      	mov	r9, r1
 800796a:	4606      	mov	r6, r0
 800796c:	4611      	mov	r1, r2
 800796e:	4648      	mov	r0, r9
 8007970:	4614      	mov	r4, r2
 8007972:	f7ff ffdb 	bl	800792c <__mcmp>
 8007976:	1e05      	subs	r5, r0, #0
 8007978:	d112      	bne.n	80079a0 <__mdiff+0x3c>
 800797a:	4629      	mov	r1, r5
 800797c:	4630      	mov	r0, r6
 800797e:	f7ff fd5b 	bl	8007438 <_Balloc>
 8007982:	4602      	mov	r2, r0
 8007984:	b928      	cbnz	r0, 8007992 <__mdiff+0x2e>
 8007986:	4b3f      	ldr	r3, [pc, #252]	@ (8007a84 <__mdiff+0x120>)
 8007988:	f240 2137 	movw	r1, #567	@ 0x237
 800798c:	483e      	ldr	r0, [pc, #248]	@ (8007a88 <__mdiff+0x124>)
 800798e:	f000 fb75 	bl	800807c <__assert_func>
 8007992:	2301      	movs	r3, #1
 8007994:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007998:	4610      	mov	r0, r2
 800799a:	b003      	add	sp, #12
 800799c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079a0:	bfbc      	itt	lt
 80079a2:	464b      	movlt	r3, r9
 80079a4:	46a1      	movlt	r9, r4
 80079a6:	4630      	mov	r0, r6
 80079a8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80079ac:	bfba      	itte	lt
 80079ae:	461c      	movlt	r4, r3
 80079b0:	2501      	movlt	r5, #1
 80079b2:	2500      	movge	r5, #0
 80079b4:	f7ff fd40 	bl	8007438 <_Balloc>
 80079b8:	4602      	mov	r2, r0
 80079ba:	b918      	cbnz	r0, 80079c4 <__mdiff+0x60>
 80079bc:	4b31      	ldr	r3, [pc, #196]	@ (8007a84 <__mdiff+0x120>)
 80079be:	f240 2145 	movw	r1, #581	@ 0x245
 80079c2:	e7e3      	b.n	800798c <__mdiff+0x28>
 80079c4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80079c8:	6926      	ldr	r6, [r4, #16]
 80079ca:	60c5      	str	r5, [r0, #12]
 80079cc:	f109 0310 	add.w	r3, r9, #16
 80079d0:	f109 0514 	add.w	r5, r9, #20
 80079d4:	f104 0e14 	add.w	lr, r4, #20
 80079d8:	f100 0b14 	add.w	fp, r0, #20
 80079dc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80079e0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80079e4:	9301      	str	r3, [sp, #4]
 80079e6:	46d9      	mov	r9, fp
 80079e8:	f04f 0c00 	mov.w	ip, #0
 80079ec:	9b01      	ldr	r3, [sp, #4]
 80079ee:	f85e 0b04 	ldr.w	r0, [lr], #4
 80079f2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80079f6:	9301      	str	r3, [sp, #4]
 80079f8:	fa1f f38a 	uxth.w	r3, sl
 80079fc:	4619      	mov	r1, r3
 80079fe:	b283      	uxth	r3, r0
 8007a00:	1acb      	subs	r3, r1, r3
 8007a02:	0c00      	lsrs	r0, r0, #16
 8007a04:	4463      	add	r3, ip
 8007a06:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007a0a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007a0e:	b29b      	uxth	r3, r3
 8007a10:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007a14:	4576      	cmp	r6, lr
 8007a16:	f849 3b04 	str.w	r3, [r9], #4
 8007a1a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007a1e:	d8e5      	bhi.n	80079ec <__mdiff+0x88>
 8007a20:	1b33      	subs	r3, r6, r4
 8007a22:	3b15      	subs	r3, #21
 8007a24:	f023 0303 	bic.w	r3, r3, #3
 8007a28:	3415      	adds	r4, #21
 8007a2a:	3304      	adds	r3, #4
 8007a2c:	42a6      	cmp	r6, r4
 8007a2e:	bf38      	it	cc
 8007a30:	2304      	movcc	r3, #4
 8007a32:	441d      	add	r5, r3
 8007a34:	445b      	add	r3, fp
 8007a36:	461e      	mov	r6, r3
 8007a38:	462c      	mov	r4, r5
 8007a3a:	4544      	cmp	r4, r8
 8007a3c:	d30e      	bcc.n	8007a5c <__mdiff+0xf8>
 8007a3e:	f108 0103 	add.w	r1, r8, #3
 8007a42:	1b49      	subs	r1, r1, r5
 8007a44:	f021 0103 	bic.w	r1, r1, #3
 8007a48:	3d03      	subs	r5, #3
 8007a4a:	45a8      	cmp	r8, r5
 8007a4c:	bf38      	it	cc
 8007a4e:	2100      	movcc	r1, #0
 8007a50:	440b      	add	r3, r1
 8007a52:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007a56:	b191      	cbz	r1, 8007a7e <__mdiff+0x11a>
 8007a58:	6117      	str	r7, [r2, #16]
 8007a5a:	e79d      	b.n	8007998 <__mdiff+0x34>
 8007a5c:	f854 1b04 	ldr.w	r1, [r4], #4
 8007a60:	46e6      	mov	lr, ip
 8007a62:	0c08      	lsrs	r0, r1, #16
 8007a64:	fa1c fc81 	uxtah	ip, ip, r1
 8007a68:	4471      	add	r1, lr
 8007a6a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007a6e:	b289      	uxth	r1, r1
 8007a70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007a74:	f846 1b04 	str.w	r1, [r6], #4
 8007a78:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007a7c:	e7dd      	b.n	8007a3a <__mdiff+0xd6>
 8007a7e:	3f01      	subs	r7, #1
 8007a80:	e7e7      	b.n	8007a52 <__mdiff+0xee>
 8007a82:	bf00      	nop
 8007a84:	08008424 	.word	0x08008424
 8007a88:	08008435 	.word	0x08008435

08007a8c <__d2b>:
 8007a8c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007a90:	460f      	mov	r7, r1
 8007a92:	2101      	movs	r1, #1
 8007a94:	ec59 8b10 	vmov	r8, r9, d0
 8007a98:	4616      	mov	r6, r2
 8007a9a:	f7ff fccd 	bl	8007438 <_Balloc>
 8007a9e:	4604      	mov	r4, r0
 8007aa0:	b930      	cbnz	r0, 8007ab0 <__d2b+0x24>
 8007aa2:	4602      	mov	r2, r0
 8007aa4:	4b23      	ldr	r3, [pc, #140]	@ (8007b34 <__d2b+0xa8>)
 8007aa6:	4824      	ldr	r0, [pc, #144]	@ (8007b38 <__d2b+0xac>)
 8007aa8:	f240 310f 	movw	r1, #783	@ 0x30f
 8007aac:	f000 fae6 	bl	800807c <__assert_func>
 8007ab0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007ab4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007ab8:	b10d      	cbz	r5, 8007abe <__d2b+0x32>
 8007aba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007abe:	9301      	str	r3, [sp, #4]
 8007ac0:	f1b8 0300 	subs.w	r3, r8, #0
 8007ac4:	d023      	beq.n	8007b0e <__d2b+0x82>
 8007ac6:	4668      	mov	r0, sp
 8007ac8:	9300      	str	r3, [sp, #0]
 8007aca:	f7ff fd7c 	bl	80075c6 <__lo0bits>
 8007ace:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007ad2:	b1d0      	cbz	r0, 8007b0a <__d2b+0x7e>
 8007ad4:	f1c0 0320 	rsb	r3, r0, #32
 8007ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8007adc:	430b      	orrs	r3, r1
 8007ade:	40c2      	lsrs	r2, r0
 8007ae0:	6163      	str	r3, [r4, #20]
 8007ae2:	9201      	str	r2, [sp, #4]
 8007ae4:	9b01      	ldr	r3, [sp, #4]
 8007ae6:	61a3      	str	r3, [r4, #24]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	bf0c      	ite	eq
 8007aec:	2201      	moveq	r2, #1
 8007aee:	2202      	movne	r2, #2
 8007af0:	6122      	str	r2, [r4, #16]
 8007af2:	b1a5      	cbz	r5, 8007b1e <__d2b+0x92>
 8007af4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007af8:	4405      	add	r5, r0
 8007afa:	603d      	str	r5, [r7, #0]
 8007afc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007b00:	6030      	str	r0, [r6, #0]
 8007b02:	4620      	mov	r0, r4
 8007b04:	b003      	add	sp, #12
 8007b06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007b0a:	6161      	str	r1, [r4, #20]
 8007b0c:	e7ea      	b.n	8007ae4 <__d2b+0x58>
 8007b0e:	a801      	add	r0, sp, #4
 8007b10:	f7ff fd59 	bl	80075c6 <__lo0bits>
 8007b14:	9b01      	ldr	r3, [sp, #4]
 8007b16:	6163      	str	r3, [r4, #20]
 8007b18:	3020      	adds	r0, #32
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	e7e8      	b.n	8007af0 <__d2b+0x64>
 8007b1e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007b22:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007b26:	6038      	str	r0, [r7, #0]
 8007b28:	6918      	ldr	r0, [r3, #16]
 8007b2a:	f7ff fd2d 	bl	8007588 <__hi0bits>
 8007b2e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007b32:	e7e5      	b.n	8007b00 <__d2b+0x74>
 8007b34:	08008424 	.word	0x08008424
 8007b38:	08008435 	.word	0x08008435

08007b3c <__sfputc_r>:
 8007b3c:	6893      	ldr	r3, [r2, #8]
 8007b3e:	3b01      	subs	r3, #1
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	b410      	push	{r4}
 8007b44:	6093      	str	r3, [r2, #8]
 8007b46:	da08      	bge.n	8007b5a <__sfputc_r+0x1e>
 8007b48:	6994      	ldr	r4, [r2, #24]
 8007b4a:	42a3      	cmp	r3, r4
 8007b4c:	db01      	blt.n	8007b52 <__sfputc_r+0x16>
 8007b4e:	290a      	cmp	r1, #10
 8007b50:	d103      	bne.n	8007b5a <__sfputc_r+0x1e>
 8007b52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b56:	f000 b9df 	b.w	8007f18 <__swbuf_r>
 8007b5a:	6813      	ldr	r3, [r2, #0]
 8007b5c:	1c58      	adds	r0, r3, #1
 8007b5e:	6010      	str	r0, [r2, #0]
 8007b60:	7019      	strb	r1, [r3, #0]
 8007b62:	4608      	mov	r0, r1
 8007b64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b68:	4770      	bx	lr

08007b6a <__sfputs_r>:
 8007b6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b6c:	4606      	mov	r6, r0
 8007b6e:	460f      	mov	r7, r1
 8007b70:	4614      	mov	r4, r2
 8007b72:	18d5      	adds	r5, r2, r3
 8007b74:	42ac      	cmp	r4, r5
 8007b76:	d101      	bne.n	8007b7c <__sfputs_r+0x12>
 8007b78:	2000      	movs	r0, #0
 8007b7a:	e007      	b.n	8007b8c <__sfputs_r+0x22>
 8007b7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b80:	463a      	mov	r2, r7
 8007b82:	4630      	mov	r0, r6
 8007b84:	f7ff ffda 	bl	8007b3c <__sfputc_r>
 8007b88:	1c43      	adds	r3, r0, #1
 8007b8a:	d1f3      	bne.n	8007b74 <__sfputs_r+0xa>
 8007b8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007b90 <_vfiprintf_r>:
 8007b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b94:	460d      	mov	r5, r1
 8007b96:	b09d      	sub	sp, #116	@ 0x74
 8007b98:	4614      	mov	r4, r2
 8007b9a:	4698      	mov	r8, r3
 8007b9c:	4606      	mov	r6, r0
 8007b9e:	b118      	cbz	r0, 8007ba8 <_vfiprintf_r+0x18>
 8007ba0:	6a03      	ldr	r3, [r0, #32]
 8007ba2:	b90b      	cbnz	r3, 8007ba8 <_vfiprintf_r+0x18>
 8007ba4:	f7fe fbf0 	bl	8006388 <__sinit>
 8007ba8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007baa:	07d9      	lsls	r1, r3, #31
 8007bac:	d405      	bmi.n	8007bba <_vfiprintf_r+0x2a>
 8007bae:	89ab      	ldrh	r3, [r5, #12]
 8007bb0:	059a      	lsls	r2, r3, #22
 8007bb2:	d402      	bmi.n	8007bba <_vfiprintf_r+0x2a>
 8007bb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007bb6:	f7fe fcf0 	bl	800659a <__retarget_lock_acquire_recursive>
 8007bba:	89ab      	ldrh	r3, [r5, #12]
 8007bbc:	071b      	lsls	r3, r3, #28
 8007bbe:	d501      	bpl.n	8007bc4 <_vfiprintf_r+0x34>
 8007bc0:	692b      	ldr	r3, [r5, #16]
 8007bc2:	b99b      	cbnz	r3, 8007bec <_vfiprintf_r+0x5c>
 8007bc4:	4629      	mov	r1, r5
 8007bc6:	4630      	mov	r0, r6
 8007bc8:	f000 f9e4 	bl	8007f94 <__swsetup_r>
 8007bcc:	b170      	cbz	r0, 8007bec <_vfiprintf_r+0x5c>
 8007bce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007bd0:	07dc      	lsls	r4, r3, #31
 8007bd2:	d504      	bpl.n	8007bde <_vfiprintf_r+0x4e>
 8007bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8007bd8:	b01d      	add	sp, #116	@ 0x74
 8007bda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bde:	89ab      	ldrh	r3, [r5, #12]
 8007be0:	0598      	lsls	r0, r3, #22
 8007be2:	d4f7      	bmi.n	8007bd4 <_vfiprintf_r+0x44>
 8007be4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007be6:	f7fe fcd9 	bl	800659c <__retarget_lock_release_recursive>
 8007bea:	e7f3      	b.n	8007bd4 <_vfiprintf_r+0x44>
 8007bec:	2300      	movs	r3, #0
 8007bee:	9309      	str	r3, [sp, #36]	@ 0x24
 8007bf0:	2320      	movs	r3, #32
 8007bf2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007bf6:	f8cd 800c 	str.w	r8, [sp, #12]
 8007bfa:	2330      	movs	r3, #48	@ 0x30
 8007bfc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007dac <_vfiprintf_r+0x21c>
 8007c00:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007c04:	f04f 0901 	mov.w	r9, #1
 8007c08:	4623      	mov	r3, r4
 8007c0a:	469a      	mov	sl, r3
 8007c0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c10:	b10a      	cbz	r2, 8007c16 <_vfiprintf_r+0x86>
 8007c12:	2a25      	cmp	r2, #37	@ 0x25
 8007c14:	d1f9      	bne.n	8007c0a <_vfiprintf_r+0x7a>
 8007c16:	ebba 0b04 	subs.w	fp, sl, r4
 8007c1a:	d00b      	beq.n	8007c34 <_vfiprintf_r+0xa4>
 8007c1c:	465b      	mov	r3, fp
 8007c1e:	4622      	mov	r2, r4
 8007c20:	4629      	mov	r1, r5
 8007c22:	4630      	mov	r0, r6
 8007c24:	f7ff ffa1 	bl	8007b6a <__sfputs_r>
 8007c28:	3001      	adds	r0, #1
 8007c2a:	f000 80a7 	beq.w	8007d7c <_vfiprintf_r+0x1ec>
 8007c2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007c30:	445a      	add	r2, fp
 8007c32:	9209      	str	r2, [sp, #36]	@ 0x24
 8007c34:	f89a 3000 	ldrb.w	r3, [sl]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	f000 809f 	beq.w	8007d7c <_vfiprintf_r+0x1ec>
 8007c3e:	2300      	movs	r3, #0
 8007c40:	f04f 32ff 	mov.w	r2, #4294967295
 8007c44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c48:	f10a 0a01 	add.w	sl, sl, #1
 8007c4c:	9304      	str	r3, [sp, #16]
 8007c4e:	9307      	str	r3, [sp, #28]
 8007c50:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007c54:	931a      	str	r3, [sp, #104]	@ 0x68
 8007c56:	4654      	mov	r4, sl
 8007c58:	2205      	movs	r2, #5
 8007c5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c5e:	4853      	ldr	r0, [pc, #332]	@ (8007dac <_vfiprintf_r+0x21c>)
 8007c60:	f7f8 fab6 	bl	80001d0 <memchr>
 8007c64:	9a04      	ldr	r2, [sp, #16]
 8007c66:	b9d8      	cbnz	r0, 8007ca0 <_vfiprintf_r+0x110>
 8007c68:	06d1      	lsls	r1, r2, #27
 8007c6a:	bf44      	itt	mi
 8007c6c:	2320      	movmi	r3, #32
 8007c6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007c72:	0713      	lsls	r3, r2, #28
 8007c74:	bf44      	itt	mi
 8007c76:	232b      	movmi	r3, #43	@ 0x2b
 8007c78:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007c7c:	f89a 3000 	ldrb.w	r3, [sl]
 8007c80:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c82:	d015      	beq.n	8007cb0 <_vfiprintf_r+0x120>
 8007c84:	9a07      	ldr	r2, [sp, #28]
 8007c86:	4654      	mov	r4, sl
 8007c88:	2000      	movs	r0, #0
 8007c8a:	f04f 0c0a 	mov.w	ip, #10
 8007c8e:	4621      	mov	r1, r4
 8007c90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c94:	3b30      	subs	r3, #48	@ 0x30
 8007c96:	2b09      	cmp	r3, #9
 8007c98:	d94b      	bls.n	8007d32 <_vfiprintf_r+0x1a2>
 8007c9a:	b1b0      	cbz	r0, 8007cca <_vfiprintf_r+0x13a>
 8007c9c:	9207      	str	r2, [sp, #28]
 8007c9e:	e014      	b.n	8007cca <_vfiprintf_r+0x13a>
 8007ca0:	eba0 0308 	sub.w	r3, r0, r8
 8007ca4:	fa09 f303 	lsl.w	r3, r9, r3
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	9304      	str	r3, [sp, #16]
 8007cac:	46a2      	mov	sl, r4
 8007cae:	e7d2      	b.n	8007c56 <_vfiprintf_r+0xc6>
 8007cb0:	9b03      	ldr	r3, [sp, #12]
 8007cb2:	1d19      	adds	r1, r3, #4
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	9103      	str	r1, [sp, #12]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	bfbb      	ittet	lt
 8007cbc:	425b      	neglt	r3, r3
 8007cbe:	f042 0202 	orrlt.w	r2, r2, #2
 8007cc2:	9307      	strge	r3, [sp, #28]
 8007cc4:	9307      	strlt	r3, [sp, #28]
 8007cc6:	bfb8      	it	lt
 8007cc8:	9204      	strlt	r2, [sp, #16]
 8007cca:	7823      	ldrb	r3, [r4, #0]
 8007ccc:	2b2e      	cmp	r3, #46	@ 0x2e
 8007cce:	d10a      	bne.n	8007ce6 <_vfiprintf_r+0x156>
 8007cd0:	7863      	ldrb	r3, [r4, #1]
 8007cd2:	2b2a      	cmp	r3, #42	@ 0x2a
 8007cd4:	d132      	bne.n	8007d3c <_vfiprintf_r+0x1ac>
 8007cd6:	9b03      	ldr	r3, [sp, #12]
 8007cd8:	1d1a      	adds	r2, r3, #4
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	9203      	str	r2, [sp, #12]
 8007cde:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007ce2:	3402      	adds	r4, #2
 8007ce4:	9305      	str	r3, [sp, #20]
 8007ce6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007dbc <_vfiprintf_r+0x22c>
 8007cea:	7821      	ldrb	r1, [r4, #0]
 8007cec:	2203      	movs	r2, #3
 8007cee:	4650      	mov	r0, sl
 8007cf0:	f7f8 fa6e 	bl	80001d0 <memchr>
 8007cf4:	b138      	cbz	r0, 8007d06 <_vfiprintf_r+0x176>
 8007cf6:	9b04      	ldr	r3, [sp, #16]
 8007cf8:	eba0 000a 	sub.w	r0, r0, sl
 8007cfc:	2240      	movs	r2, #64	@ 0x40
 8007cfe:	4082      	lsls	r2, r0
 8007d00:	4313      	orrs	r3, r2
 8007d02:	3401      	adds	r4, #1
 8007d04:	9304      	str	r3, [sp, #16]
 8007d06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d0a:	4829      	ldr	r0, [pc, #164]	@ (8007db0 <_vfiprintf_r+0x220>)
 8007d0c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007d10:	2206      	movs	r2, #6
 8007d12:	f7f8 fa5d 	bl	80001d0 <memchr>
 8007d16:	2800      	cmp	r0, #0
 8007d18:	d03f      	beq.n	8007d9a <_vfiprintf_r+0x20a>
 8007d1a:	4b26      	ldr	r3, [pc, #152]	@ (8007db4 <_vfiprintf_r+0x224>)
 8007d1c:	bb1b      	cbnz	r3, 8007d66 <_vfiprintf_r+0x1d6>
 8007d1e:	9b03      	ldr	r3, [sp, #12]
 8007d20:	3307      	adds	r3, #7
 8007d22:	f023 0307 	bic.w	r3, r3, #7
 8007d26:	3308      	adds	r3, #8
 8007d28:	9303      	str	r3, [sp, #12]
 8007d2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d2c:	443b      	add	r3, r7
 8007d2e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d30:	e76a      	b.n	8007c08 <_vfiprintf_r+0x78>
 8007d32:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d36:	460c      	mov	r4, r1
 8007d38:	2001      	movs	r0, #1
 8007d3a:	e7a8      	b.n	8007c8e <_vfiprintf_r+0xfe>
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	3401      	adds	r4, #1
 8007d40:	9305      	str	r3, [sp, #20]
 8007d42:	4619      	mov	r1, r3
 8007d44:	f04f 0c0a 	mov.w	ip, #10
 8007d48:	4620      	mov	r0, r4
 8007d4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d4e:	3a30      	subs	r2, #48	@ 0x30
 8007d50:	2a09      	cmp	r2, #9
 8007d52:	d903      	bls.n	8007d5c <_vfiprintf_r+0x1cc>
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d0c6      	beq.n	8007ce6 <_vfiprintf_r+0x156>
 8007d58:	9105      	str	r1, [sp, #20]
 8007d5a:	e7c4      	b.n	8007ce6 <_vfiprintf_r+0x156>
 8007d5c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d60:	4604      	mov	r4, r0
 8007d62:	2301      	movs	r3, #1
 8007d64:	e7f0      	b.n	8007d48 <_vfiprintf_r+0x1b8>
 8007d66:	ab03      	add	r3, sp, #12
 8007d68:	9300      	str	r3, [sp, #0]
 8007d6a:	462a      	mov	r2, r5
 8007d6c:	4b12      	ldr	r3, [pc, #72]	@ (8007db8 <_vfiprintf_r+0x228>)
 8007d6e:	a904      	add	r1, sp, #16
 8007d70:	4630      	mov	r0, r6
 8007d72:	f7fd fec5 	bl	8005b00 <_printf_float>
 8007d76:	4607      	mov	r7, r0
 8007d78:	1c78      	adds	r0, r7, #1
 8007d7a:	d1d6      	bne.n	8007d2a <_vfiprintf_r+0x19a>
 8007d7c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007d7e:	07d9      	lsls	r1, r3, #31
 8007d80:	d405      	bmi.n	8007d8e <_vfiprintf_r+0x1fe>
 8007d82:	89ab      	ldrh	r3, [r5, #12]
 8007d84:	059a      	lsls	r2, r3, #22
 8007d86:	d402      	bmi.n	8007d8e <_vfiprintf_r+0x1fe>
 8007d88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007d8a:	f7fe fc07 	bl	800659c <__retarget_lock_release_recursive>
 8007d8e:	89ab      	ldrh	r3, [r5, #12]
 8007d90:	065b      	lsls	r3, r3, #25
 8007d92:	f53f af1f 	bmi.w	8007bd4 <_vfiprintf_r+0x44>
 8007d96:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007d98:	e71e      	b.n	8007bd8 <_vfiprintf_r+0x48>
 8007d9a:	ab03      	add	r3, sp, #12
 8007d9c:	9300      	str	r3, [sp, #0]
 8007d9e:	462a      	mov	r2, r5
 8007da0:	4b05      	ldr	r3, [pc, #20]	@ (8007db8 <_vfiprintf_r+0x228>)
 8007da2:	a904      	add	r1, sp, #16
 8007da4:	4630      	mov	r0, r6
 8007da6:	f7fe f943 	bl	8006030 <_printf_i>
 8007daa:	e7e4      	b.n	8007d76 <_vfiprintf_r+0x1e6>
 8007dac:	08008590 	.word	0x08008590
 8007db0:	0800859a 	.word	0x0800859a
 8007db4:	08005b01 	.word	0x08005b01
 8007db8:	08007b6b 	.word	0x08007b6b
 8007dbc:	08008596 	.word	0x08008596

08007dc0 <__sflush_r>:
 8007dc0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dc8:	0716      	lsls	r6, r2, #28
 8007dca:	4605      	mov	r5, r0
 8007dcc:	460c      	mov	r4, r1
 8007dce:	d454      	bmi.n	8007e7a <__sflush_r+0xba>
 8007dd0:	684b      	ldr	r3, [r1, #4]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	dc02      	bgt.n	8007ddc <__sflush_r+0x1c>
 8007dd6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	dd48      	ble.n	8007e6e <__sflush_r+0xae>
 8007ddc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007dde:	2e00      	cmp	r6, #0
 8007de0:	d045      	beq.n	8007e6e <__sflush_r+0xae>
 8007de2:	2300      	movs	r3, #0
 8007de4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007de8:	682f      	ldr	r7, [r5, #0]
 8007dea:	6a21      	ldr	r1, [r4, #32]
 8007dec:	602b      	str	r3, [r5, #0]
 8007dee:	d030      	beq.n	8007e52 <__sflush_r+0x92>
 8007df0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007df2:	89a3      	ldrh	r3, [r4, #12]
 8007df4:	0759      	lsls	r1, r3, #29
 8007df6:	d505      	bpl.n	8007e04 <__sflush_r+0x44>
 8007df8:	6863      	ldr	r3, [r4, #4]
 8007dfa:	1ad2      	subs	r2, r2, r3
 8007dfc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007dfe:	b10b      	cbz	r3, 8007e04 <__sflush_r+0x44>
 8007e00:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007e02:	1ad2      	subs	r2, r2, r3
 8007e04:	2300      	movs	r3, #0
 8007e06:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007e08:	6a21      	ldr	r1, [r4, #32]
 8007e0a:	4628      	mov	r0, r5
 8007e0c:	47b0      	blx	r6
 8007e0e:	1c43      	adds	r3, r0, #1
 8007e10:	89a3      	ldrh	r3, [r4, #12]
 8007e12:	d106      	bne.n	8007e22 <__sflush_r+0x62>
 8007e14:	6829      	ldr	r1, [r5, #0]
 8007e16:	291d      	cmp	r1, #29
 8007e18:	d82b      	bhi.n	8007e72 <__sflush_r+0xb2>
 8007e1a:	4a2a      	ldr	r2, [pc, #168]	@ (8007ec4 <__sflush_r+0x104>)
 8007e1c:	410a      	asrs	r2, r1
 8007e1e:	07d6      	lsls	r6, r2, #31
 8007e20:	d427      	bmi.n	8007e72 <__sflush_r+0xb2>
 8007e22:	2200      	movs	r2, #0
 8007e24:	6062      	str	r2, [r4, #4]
 8007e26:	04d9      	lsls	r1, r3, #19
 8007e28:	6922      	ldr	r2, [r4, #16]
 8007e2a:	6022      	str	r2, [r4, #0]
 8007e2c:	d504      	bpl.n	8007e38 <__sflush_r+0x78>
 8007e2e:	1c42      	adds	r2, r0, #1
 8007e30:	d101      	bne.n	8007e36 <__sflush_r+0x76>
 8007e32:	682b      	ldr	r3, [r5, #0]
 8007e34:	b903      	cbnz	r3, 8007e38 <__sflush_r+0x78>
 8007e36:	6560      	str	r0, [r4, #84]	@ 0x54
 8007e38:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007e3a:	602f      	str	r7, [r5, #0]
 8007e3c:	b1b9      	cbz	r1, 8007e6e <__sflush_r+0xae>
 8007e3e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007e42:	4299      	cmp	r1, r3
 8007e44:	d002      	beq.n	8007e4c <__sflush_r+0x8c>
 8007e46:	4628      	mov	r0, r5
 8007e48:	f7ff f9f6 	bl	8007238 <_free_r>
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	6363      	str	r3, [r4, #52]	@ 0x34
 8007e50:	e00d      	b.n	8007e6e <__sflush_r+0xae>
 8007e52:	2301      	movs	r3, #1
 8007e54:	4628      	mov	r0, r5
 8007e56:	47b0      	blx	r6
 8007e58:	4602      	mov	r2, r0
 8007e5a:	1c50      	adds	r0, r2, #1
 8007e5c:	d1c9      	bne.n	8007df2 <__sflush_r+0x32>
 8007e5e:	682b      	ldr	r3, [r5, #0]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d0c6      	beq.n	8007df2 <__sflush_r+0x32>
 8007e64:	2b1d      	cmp	r3, #29
 8007e66:	d001      	beq.n	8007e6c <__sflush_r+0xac>
 8007e68:	2b16      	cmp	r3, #22
 8007e6a:	d11e      	bne.n	8007eaa <__sflush_r+0xea>
 8007e6c:	602f      	str	r7, [r5, #0]
 8007e6e:	2000      	movs	r0, #0
 8007e70:	e022      	b.n	8007eb8 <__sflush_r+0xf8>
 8007e72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e76:	b21b      	sxth	r3, r3
 8007e78:	e01b      	b.n	8007eb2 <__sflush_r+0xf2>
 8007e7a:	690f      	ldr	r7, [r1, #16]
 8007e7c:	2f00      	cmp	r7, #0
 8007e7e:	d0f6      	beq.n	8007e6e <__sflush_r+0xae>
 8007e80:	0793      	lsls	r3, r2, #30
 8007e82:	680e      	ldr	r6, [r1, #0]
 8007e84:	bf08      	it	eq
 8007e86:	694b      	ldreq	r3, [r1, #20]
 8007e88:	600f      	str	r7, [r1, #0]
 8007e8a:	bf18      	it	ne
 8007e8c:	2300      	movne	r3, #0
 8007e8e:	eba6 0807 	sub.w	r8, r6, r7
 8007e92:	608b      	str	r3, [r1, #8]
 8007e94:	f1b8 0f00 	cmp.w	r8, #0
 8007e98:	dde9      	ble.n	8007e6e <__sflush_r+0xae>
 8007e9a:	6a21      	ldr	r1, [r4, #32]
 8007e9c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007e9e:	4643      	mov	r3, r8
 8007ea0:	463a      	mov	r2, r7
 8007ea2:	4628      	mov	r0, r5
 8007ea4:	47b0      	blx	r6
 8007ea6:	2800      	cmp	r0, #0
 8007ea8:	dc08      	bgt.n	8007ebc <__sflush_r+0xfc>
 8007eaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007eae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007eb2:	81a3      	strh	r3, [r4, #12]
 8007eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8007eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ebc:	4407      	add	r7, r0
 8007ebe:	eba8 0800 	sub.w	r8, r8, r0
 8007ec2:	e7e7      	b.n	8007e94 <__sflush_r+0xd4>
 8007ec4:	dfbffffe 	.word	0xdfbffffe

08007ec8 <_fflush_r>:
 8007ec8:	b538      	push	{r3, r4, r5, lr}
 8007eca:	690b      	ldr	r3, [r1, #16]
 8007ecc:	4605      	mov	r5, r0
 8007ece:	460c      	mov	r4, r1
 8007ed0:	b913      	cbnz	r3, 8007ed8 <_fflush_r+0x10>
 8007ed2:	2500      	movs	r5, #0
 8007ed4:	4628      	mov	r0, r5
 8007ed6:	bd38      	pop	{r3, r4, r5, pc}
 8007ed8:	b118      	cbz	r0, 8007ee2 <_fflush_r+0x1a>
 8007eda:	6a03      	ldr	r3, [r0, #32]
 8007edc:	b90b      	cbnz	r3, 8007ee2 <_fflush_r+0x1a>
 8007ede:	f7fe fa53 	bl	8006388 <__sinit>
 8007ee2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d0f3      	beq.n	8007ed2 <_fflush_r+0xa>
 8007eea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007eec:	07d0      	lsls	r0, r2, #31
 8007eee:	d404      	bmi.n	8007efa <_fflush_r+0x32>
 8007ef0:	0599      	lsls	r1, r3, #22
 8007ef2:	d402      	bmi.n	8007efa <_fflush_r+0x32>
 8007ef4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ef6:	f7fe fb50 	bl	800659a <__retarget_lock_acquire_recursive>
 8007efa:	4628      	mov	r0, r5
 8007efc:	4621      	mov	r1, r4
 8007efe:	f7ff ff5f 	bl	8007dc0 <__sflush_r>
 8007f02:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007f04:	07da      	lsls	r2, r3, #31
 8007f06:	4605      	mov	r5, r0
 8007f08:	d4e4      	bmi.n	8007ed4 <_fflush_r+0xc>
 8007f0a:	89a3      	ldrh	r3, [r4, #12]
 8007f0c:	059b      	lsls	r3, r3, #22
 8007f0e:	d4e1      	bmi.n	8007ed4 <_fflush_r+0xc>
 8007f10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007f12:	f7fe fb43 	bl	800659c <__retarget_lock_release_recursive>
 8007f16:	e7dd      	b.n	8007ed4 <_fflush_r+0xc>

08007f18 <__swbuf_r>:
 8007f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f1a:	460e      	mov	r6, r1
 8007f1c:	4614      	mov	r4, r2
 8007f1e:	4605      	mov	r5, r0
 8007f20:	b118      	cbz	r0, 8007f2a <__swbuf_r+0x12>
 8007f22:	6a03      	ldr	r3, [r0, #32]
 8007f24:	b90b      	cbnz	r3, 8007f2a <__swbuf_r+0x12>
 8007f26:	f7fe fa2f 	bl	8006388 <__sinit>
 8007f2a:	69a3      	ldr	r3, [r4, #24]
 8007f2c:	60a3      	str	r3, [r4, #8]
 8007f2e:	89a3      	ldrh	r3, [r4, #12]
 8007f30:	071a      	lsls	r2, r3, #28
 8007f32:	d501      	bpl.n	8007f38 <__swbuf_r+0x20>
 8007f34:	6923      	ldr	r3, [r4, #16]
 8007f36:	b943      	cbnz	r3, 8007f4a <__swbuf_r+0x32>
 8007f38:	4621      	mov	r1, r4
 8007f3a:	4628      	mov	r0, r5
 8007f3c:	f000 f82a 	bl	8007f94 <__swsetup_r>
 8007f40:	b118      	cbz	r0, 8007f4a <__swbuf_r+0x32>
 8007f42:	f04f 37ff 	mov.w	r7, #4294967295
 8007f46:	4638      	mov	r0, r7
 8007f48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f4a:	6823      	ldr	r3, [r4, #0]
 8007f4c:	6922      	ldr	r2, [r4, #16]
 8007f4e:	1a98      	subs	r0, r3, r2
 8007f50:	6963      	ldr	r3, [r4, #20]
 8007f52:	b2f6      	uxtb	r6, r6
 8007f54:	4283      	cmp	r3, r0
 8007f56:	4637      	mov	r7, r6
 8007f58:	dc05      	bgt.n	8007f66 <__swbuf_r+0x4e>
 8007f5a:	4621      	mov	r1, r4
 8007f5c:	4628      	mov	r0, r5
 8007f5e:	f7ff ffb3 	bl	8007ec8 <_fflush_r>
 8007f62:	2800      	cmp	r0, #0
 8007f64:	d1ed      	bne.n	8007f42 <__swbuf_r+0x2a>
 8007f66:	68a3      	ldr	r3, [r4, #8]
 8007f68:	3b01      	subs	r3, #1
 8007f6a:	60a3      	str	r3, [r4, #8]
 8007f6c:	6823      	ldr	r3, [r4, #0]
 8007f6e:	1c5a      	adds	r2, r3, #1
 8007f70:	6022      	str	r2, [r4, #0]
 8007f72:	701e      	strb	r6, [r3, #0]
 8007f74:	6962      	ldr	r2, [r4, #20]
 8007f76:	1c43      	adds	r3, r0, #1
 8007f78:	429a      	cmp	r2, r3
 8007f7a:	d004      	beq.n	8007f86 <__swbuf_r+0x6e>
 8007f7c:	89a3      	ldrh	r3, [r4, #12]
 8007f7e:	07db      	lsls	r3, r3, #31
 8007f80:	d5e1      	bpl.n	8007f46 <__swbuf_r+0x2e>
 8007f82:	2e0a      	cmp	r6, #10
 8007f84:	d1df      	bne.n	8007f46 <__swbuf_r+0x2e>
 8007f86:	4621      	mov	r1, r4
 8007f88:	4628      	mov	r0, r5
 8007f8a:	f7ff ff9d 	bl	8007ec8 <_fflush_r>
 8007f8e:	2800      	cmp	r0, #0
 8007f90:	d0d9      	beq.n	8007f46 <__swbuf_r+0x2e>
 8007f92:	e7d6      	b.n	8007f42 <__swbuf_r+0x2a>

08007f94 <__swsetup_r>:
 8007f94:	b538      	push	{r3, r4, r5, lr}
 8007f96:	4b29      	ldr	r3, [pc, #164]	@ (800803c <__swsetup_r+0xa8>)
 8007f98:	4605      	mov	r5, r0
 8007f9a:	6818      	ldr	r0, [r3, #0]
 8007f9c:	460c      	mov	r4, r1
 8007f9e:	b118      	cbz	r0, 8007fa8 <__swsetup_r+0x14>
 8007fa0:	6a03      	ldr	r3, [r0, #32]
 8007fa2:	b90b      	cbnz	r3, 8007fa8 <__swsetup_r+0x14>
 8007fa4:	f7fe f9f0 	bl	8006388 <__sinit>
 8007fa8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fac:	0719      	lsls	r1, r3, #28
 8007fae:	d422      	bmi.n	8007ff6 <__swsetup_r+0x62>
 8007fb0:	06da      	lsls	r2, r3, #27
 8007fb2:	d407      	bmi.n	8007fc4 <__swsetup_r+0x30>
 8007fb4:	2209      	movs	r2, #9
 8007fb6:	602a      	str	r2, [r5, #0]
 8007fb8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007fbc:	81a3      	strh	r3, [r4, #12]
 8007fbe:	f04f 30ff 	mov.w	r0, #4294967295
 8007fc2:	e033      	b.n	800802c <__swsetup_r+0x98>
 8007fc4:	0758      	lsls	r0, r3, #29
 8007fc6:	d512      	bpl.n	8007fee <__swsetup_r+0x5a>
 8007fc8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007fca:	b141      	cbz	r1, 8007fde <__swsetup_r+0x4a>
 8007fcc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007fd0:	4299      	cmp	r1, r3
 8007fd2:	d002      	beq.n	8007fda <__swsetup_r+0x46>
 8007fd4:	4628      	mov	r0, r5
 8007fd6:	f7ff f92f 	bl	8007238 <_free_r>
 8007fda:	2300      	movs	r3, #0
 8007fdc:	6363      	str	r3, [r4, #52]	@ 0x34
 8007fde:	89a3      	ldrh	r3, [r4, #12]
 8007fe0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007fe4:	81a3      	strh	r3, [r4, #12]
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	6063      	str	r3, [r4, #4]
 8007fea:	6923      	ldr	r3, [r4, #16]
 8007fec:	6023      	str	r3, [r4, #0]
 8007fee:	89a3      	ldrh	r3, [r4, #12]
 8007ff0:	f043 0308 	orr.w	r3, r3, #8
 8007ff4:	81a3      	strh	r3, [r4, #12]
 8007ff6:	6923      	ldr	r3, [r4, #16]
 8007ff8:	b94b      	cbnz	r3, 800800e <__swsetup_r+0x7a>
 8007ffa:	89a3      	ldrh	r3, [r4, #12]
 8007ffc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008000:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008004:	d003      	beq.n	800800e <__swsetup_r+0x7a>
 8008006:	4621      	mov	r1, r4
 8008008:	4628      	mov	r0, r5
 800800a:	f000 f8c1 	bl	8008190 <__smakebuf_r>
 800800e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008012:	f013 0201 	ands.w	r2, r3, #1
 8008016:	d00a      	beq.n	800802e <__swsetup_r+0x9a>
 8008018:	2200      	movs	r2, #0
 800801a:	60a2      	str	r2, [r4, #8]
 800801c:	6962      	ldr	r2, [r4, #20]
 800801e:	4252      	negs	r2, r2
 8008020:	61a2      	str	r2, [r4, #24]
 8008022:	6922      	ldr	r2, [r4, #16]
 8008024:	b942      	cbnz	r2, 8008038 <__swsetup_r+0xa4>
 8008026:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800802a:	d1c5      	bne.n	8007fb8 <__swsetup_r+0x24>
 800802c:	bd38      	pop	{r3, r4, r5, pc}
 800802e:	0799      	lsls	r1, r3, #30
 8008030:	bf58      	it	pl
 8008032:	6962      	ldrpl	r2, [r4, #20]
 8008034:	60a2      	str	r2, [r4, #8]
 8008036:	e7f4      	b.n	8008022 <__swsetup_r+0x8e>
 8008038:	2000      	movs	r0, #0
 800803a:	e7f7      	b.n	800802c <__swsetup_r+0x98>
 800803c:	20000018 	.word	0x20000018

08008040 <_sbrk_r>:
 8008040:	b538      	push	{r3, r4, r5, lr}
 8008042:	4d06      	ldr	r5, [pc, #24]	@ (800805c <_sbrk_r+0x1c>)
 8008044:	2300      	movs	r3, #0
 8008046:	4604      	mov	r4, r0
 8008048:	4608      	mov	r0, r1
 800804a:	602b      	str	r3, [r5, #0]
 800804c:	f7f9 fb0a 	bl	8001664 <_sbrk>
 8008050:	1c43      	adds	r3, r0, #1
 8008052:	d102      	bne.n	800805a <_sbrk_r+0x1a>
 8008054:	682b      	ldr	r3, [r5, #0]
 8008056:	b103      	cbz	r3, 800805a <_sbrk_r+0x1a>
 8008058:	6023      	str	r3, [r4, #0]
 800805a:	bd38      	pop	{r3, r4, r5, pc}
 800805c:	2000046c 	.word	0x2000046c

08008060 <memcpy>:
 8008060:	440a      	add	r2, r1
 8008062:	4291      	cmp	r1, r2
 8008064:	f100 33ff 	add.w	r3, r0, #4294967295
 8008068:	d100      	bne.n	800806c <memcpy+0xc>
 800806a:	4770      	bx	lr
 800806c:	b510      	push	{r4, lr}
 800806e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008072:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008076:	4291      	cmp	r1, r2
 8008078:	d1f9      	bne.n	800806e <memcpy+0xe>
 800807a:	bd10      	pop	{r4, pc}

0800807c <__assert_func>:
 800807c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800807e:	4614      	mov	r4, r2
 8008080:	461a      	mov	r2, r3
 8008082:	4b09      	ldr	r3, [pc, #36]	@ (80080a8 <__assert_func+0x2c>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4605      	mov	r5, r0
 8008088:	68d8      	ldr	r0, [r3, #12]
 800808a:	b954      	cbnz	r4, 80080a2 <__assert_func+0x26>
 800808c:	4b07      	ldr	r3, [pc, #28]	@ (80080ac <__assert_func+0x30>)
 800808e:	461c      	mov	r4, r3
 8008090:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008094:	9100      	str	r1, [sp, #0]
 8008096:	462b      	mov	r3, r5
 8008098:	4905      	ldr	r1, [pc, #20]	@ (80080b0 <__assert_func+0x34>)
 800809a:	f000 f841 	bl	8008120 <fiprintf>
 800809e:	f000 f8d5 	bl	800824c <abort>
 80080a2:	4b04      	ldr	r3, [pc, #16]	@ (80080b4 <__assert_func+0x38>)
 80080a4:	e7f4      	b.n	8008090 <__assert_func+0x14>
 80080a6:	bf00      	nop
 80080a8:	20000018 	.word	0x20000018
 80080ac:	080085e6 	.word	0x080085e6
 80080b0:	080085b8 	.word	0x080085b8
 80080b4:	080085ab 	.word	0x080085ab

080080b8 <_calloc_r>:
 80080b8:	b570      	push	{r4, r5, r6, lr}
 80080ba:	fba1 5402 	umull	r5, r4, r1, r2
 80080be:	b93c      	cbnz	r4, 80080d0 <_calloc_r+0x18>
 80080c0:	4629      	mov	r1, r5
 80080c2:	f7ff f92d 	bl	8007320 <_malloc_r>
 80080c6:	4606      	mov	r6, r0
 80080c8:	b928      	cbnz	r0, 80080d6 <_calloc_r+0x1e>
 80080ca:	2600      	movs	r6, #0
 80080cc:	4630      	mov	r0, r6
 80080ce:	bd70      	pop	{r4, r5, r6, pc}
 80080d0:	220c      	movs	r2, #12
 80080d2:	6002      	str	r2, [r0, #0]
 80080d4:	e7f9      	b.n	80080ca <_calloc_r+0x12>
 80080d6:	462a      	mov	r2, r5
 80080d8:	4621      	mov	r1, r4
 80080da:	f7fe f9e0 	bl	800649e <memset>
 80080de:	e7f5      	b.n	80080cc <_calloc_r+0x14>

080080e0 <__ascii_mbtowc>:
 80080e0:	b082      	sub	sp, #8
 80080e2:	b901      	cbnz	r1, 80080e6 <__ascii_mbtowc+0x6>
 80080e4:	a901      	add	r1, sp, #4
 80080e6:	b142      	cbz	r2, 80080fa <__ascii_mbtowc+0x1a>
 80080e8:	b14b      	cbz	r3, 80080fe <__ascii_mbtowc+0x1e>
 80080ea:	7813      	ldrb	r3, [r2, #0]
 80080ec:	600b      	str	r3, [r1, #0]
 80080ee:	7812      	ldrb	r2, [r2, #0]
 80080f0:	1e10      	subs	r0, r2, #0
 80080f2:	bf18      	it	ne
 80080f4:	2001      	movne	r0, #1
 80080f6:	b002      	add	sp, #8
 80080f8:	4770      	bx	lr
 80080fa:	4610      	mov	r0, r2
 80080fc:	e7fb      	b.n	80080f6 <__ascii_mbtowc+0x16>
 80080fe:	f06f 0001 	mvn.w	r0, #1
 8008102:	e7f8      	b.n	80080f6 <__ascii_mbtowc+0x16>

08008104 <__ascii_wctomb>:
 8008104:	4603      	mov	r3, r0
 8008106:	4608      	mov	r0, r1
 8008108:	b141      	cbz	r1, 800811c <__ascii_wctomb+0x18>
 800810a:	2aff      	cmp	r2, #255	@ 0xff
 800810c:	d904      	bls.n	8008118 <__ascii_wctomb+0x14>
 800810e:	228a      	movs	r2, #138	@ 0x8a
 8008110:	601a      	str	r2, [r3, #0]
 8008112:	f04f 30ff 	mov.w	r0, #4294967295
 8008116:	4770      	bx	lr
 8008118:	700a      	strb	r2, [r1, #0]
 800811a:	2001      	movs	r0, #1
 800811c:	4770      	bx	lr
	...

08008120 <fiprintf>:
 8008120:	b40e      	push	{r1, r2, r3}
 8008122:	b503      	push	{r0, r1, lr}
 8008124:	4601      	mov	r1, r0
 8008126:	ab03      	add	r3, sp, #12
 8008128:	4805      	ldr	r0, [pc, #20]	@ (8008140 <fiprintf+0x20>)
 800812a:	f853 2b04 	ldr.w	r2, [r3], #4
 800812e:	6800      	ldr	r0, [r0, #0]
 8008130:	9301      	str	r3, [sp, #4]
 8008132:	f7ff fd2d 	bl	8007b90 <_vfiprintf_r>
 8008136:	b002      	add	sp, #8
 8008138:	f85d eb04 	ldr.w	lr, [sp], #4
 800813c:	b003      	add	sp, #12
 800813e:	4770      	bx	lr
 8008140:	20000018 	.word	0x20000018

08008144 <__swhatbuf_r>:
 8008144:	b570      	push	{r4, r5, r6, lr}
 8008146:	460c      	mov	r4, r1
 8008148:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800814c:	2900      	cmp	r1, #0
 800814e:	b096      	sub	sp, #88	@ 0x58
 8008150:	4615      	mov	r5, r2
 8008152:	461e      	mov	r6, r3
 8008154:	da0d      	bge.n	8008172 <__swhatbuf_r+0x2e>
 8008156:	89a3      	ldrh	r3, [r4, #12]
 8008158:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800815c:	f04f 0100 	mov.w	r1, #0
 8008160:	bf14      	ite	ne
 8008162:	2340      	movne	r3, #64	@ 0x40
 8008164:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008168:	2000      	movs	r0, #0
 800816a:	6031      	str	r1, [r6, #0]
 800816c:	602b      	str	r3, [r5, #0]
 800816e:	b016      	add	sp, #88	@ 0x58
 8008170:	bd70      	pop	{r4, r5, r6, pc}
 8008172:	466a      	mov	r2, sp
 8008174:	f000 f848 	bl	8008208 <_fstat_r>
 8008178:	2800      	cmp	r0, #0
 800817a:	dbec      	blt.n	8008156 <__swhatbuf_r+0x12>
 800817c:	9901      	ldr	r1, [sp, #4]
 800817e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008182:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008186:	4259      	negs	r1, r3
 8008188:	4159      	adcs	r1, r3
 800818a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800818e:	e7eb      	b.n	8008168 <__swhatbuf_r+0x24>

08008190 <__smakebuf_r>:
 8008190:	898b      	ldrh	r3, [r1, #12]
 8008192:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008194:	079d      	lsls	r5, r3, #30
 8008196:	4606      	mov	r6, r0
 8008198:	460c      	mov	r4, r1
 800819a:	d507      	bpl.n	80081ac <__smakebuf_r+0x1c>
 800819c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80081a0:	6023      	str	r3, [r4, #0]
 80081a2:	6123      	str	r3, [r4, #16]
 80081a4:	2301      	movs	r3, #1
 80081a6:	6163      	str	r3, [r4, #20]
 80081a8:	b003      	add	sp, #12
 80081aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081ac:	ab01      	add	r3, sp, #4
 80081ae:	466a      	mov	r2, sp
 80081b0:	f7ff ffc8 	bl	8008144 <__swhatbuf_r>
 80081b4:	9f00      	ldr	r7, [sp, #0]
 80081b6:	4605      	mov	r5, r0
 80081b8:	4639      	mov	r1, r7
 80081ba:	4630      	mov	r0, r6
 80081bc:	f7ff f8b0 	bl	8007320 <_malloc_r>
 80081c0:	b948      	cbnz	r0, 80081d6 <__smakebuf_r+0x46>
 80081c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081c6:	059a      	lsls	r2, r3, #22
 80081c8:	d4ee      	bmi.n	80081a8 <__smakebuf_r+0x18>
 80081ca:	f023 0303 	bic.w	r3, r3, #3
 80081ce:	f043 0302 	orr.w	r3, r3, #2
 80081d2:	81a3      	strh	r3, [r4, #12]
 80081d4:	e7e2      	b.n	800819c <__smakebuf_r+0xc>
 80081d6:	89a3      	ldrh	r3, [r4, #12]
 80081d8:	6020      	str	r0, [r4, #0]
 80081da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081de:	81a3      	strh	r3, [r4, #12]
 80081e0:	9b01      	ldr	r3, [sp, #4]
 80081e2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80081e6:	b15b      	cbz	r3, 8008200 <__smakebuf_r+0x70>
 80081e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80081ec:	4630      	mov	r0, r6
 80081ee:	f000 f81d 	bl	800822c <_isatty_r>
 80081f2:	b128      	cbz	r0, 8008200 <__smakebuf_r+0x70>
 80081f4:	89a3      	ldrh	r3, [r4, #12]
 80081f6:	f023 0303 	bic.w	r3, r3, #3
 80081fa:	f043 0301 	orr.w	r3, r3, #1
 80081fe:	81a3      	strh	r3, [r4, #12]
 8008200:	89a3      	ldrh	r3, [r4, #12]
 8008202:	431d      	orrs	r5, r3
 8008204:	81a5      	strh	r5, [r4, #12]
 8008206:	e7cf      	b.n	80081a8 <__smakebuf_r+0x18>

08008208 <_fstat_r>:
 8008208:	b538      	push	{r3, r4, r5, lr}
 800820a:	4d07      	ldr	r5, [pc, #28]	@ (8008228 <_fstat_r+0x20>)
 800820c:	2300      	movs	r3, #0
 800820e:	4604      	mov	r4, r0
 8008210:	4608      	mov	r0, r1
 8008212:	4611      	mov	r1, r2
 8008214:	602b      	str	r3, [r5, #0]
 8008216:	f7f9 f9fd 	bl	8001614 <_fstat>
 800821a:	1c43      	adds	r3, r0, #1
 800821c:	d102      	bne.n	8008224 <_fstat_r+0x1c>
 800821e:	682b      	ldr	r3, [r5, #0]
 8008220:	b103      	cbz	r3, 8008224 <_fstat_r+0x1c>
 8008222:	6023      	str	r3, [r4, #0]
 8008224:	bd38      	pop	{r3, r4, r5, pc}
 8008226:	bf00      	nop
 8008228:	2000046c 	.word	0x2000046c

0800822c <_isatty_r>:
 800822c:	b538      	push	{r3, r4, r5, lr}
 800822e:	4d06      	ldr	r5, [pc, #24]	@ (8008248 <_isatty_r+0x1c>)
 8008230:	2300      	movs	r3, #0
 8008232:	4604      	mov	r4, r0
 8008234:	4608      	mov	r0, r1
 8008236:	602b      	str	r3, [r5, #0]
 8008238:	f7f9 f9fc 	bl	8001634 <_isatty>
 800823c:	1c43      	adds	r3, r0, #1
 800823e:	d102      	bne.n	8008246 <_isatty_r+0x1a>
 8008240:	682b      	ldr	r3, [r5, #0]
 8008242:	b103      	cbz	r3, 8008246 <_isatty_r+0x1a>
 8008244:	6023      	str	r3, [r4, #0]
 8008246:	bd38      	pop	{r3, r4, r5, pc}
 8008248:	2000046c 	.word	0x2000046c

0800824c <abort>:
 800824c:	b508      	push	{r3, lr}
 800824e:	2006      	movs	r0, #6
 8008250:	f000 f82c 	bl	80082ac <raise>
 8008254:	2001      	movs	r0, #1
 8008256:	f7f9 f98d 	bl	8001574 <_exit>

0800825a <_raise_r>:
 800825a:	291f      	cmp	r1, #31
 800825c:	b538      	push	{r3, r4, r5, lr}
 800825e:	4605      	mov	r5, r0
 8008260:	460c      	mov	r4, r1
 8008262:	d904      	bls.n	800826e <_raise_r+0x14>
 8008264:	2316      	movs	r3, #22
 8008266:	6003      	str	r3, [r0, #0]
 8008268:	f04f 30ff 	mov.w	r0, #4294967295
 800826c:	bd38      	pop	{r3, r4, r5, pc}
 800826e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008270:	b112      	cbz	r2, 8008278 <_raise_r+0x1e>
 8008272:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008276:	b94b      	cbnz	r3, 800828c <_raise_r+0x32>
 8008278:	4628      	mov	r0, r5
 800827a:	f000 f831 	bl	80082e0 <_getpid_r>
 800827e:	4622      	mov	r2, r4
 8008280:	4601      	mov	r1, r0
 8008282:	4628      	mov	r0, r5
 8008284:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008288:	f000 b818 	b.w	80082bc <_kill_r>
 800828c:	2b01      	cmp	r3, #1
 800828e:	d00a      	beq.n	80082a6 <_raise_r+0x4c>
 8008290:	1c59      	adds	r1, r3, #1
 8008292:	d103      	bne.n	800829c <_raise_r+0x42>
 8008294:	2316      	movs	r3, #22
 8008296:	6003      	str	r3, [r0, #0]
 8008298:	2001      	movs	r0, #1
 800829a:	e7e7      	b.n	800826c <_raise_r+0x12>
 800829c:	2100      	movs	r1, #0
 800829e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80082a2:	4620      	mov	r0, r4
 80082a4:	4798      	blx	r3
 80082a6:	2000      	movs	r0, #0
 80082a8:	e7e0      	b.n	800826c <_raise_r+0x12>
	...

080082ac <raise>:
 80082ac:	4b02      	ldr	r3, [pc, #8]	@ (80082b8 <raise+0xc>)
 80082ae:	4601      	mov	r1, r0
 80082b0:	6818      	ldr	r0, [r3, #0]
 80082b2:	f7ff bfd2 	b.w	800825a <_raise_r>
 80082b6:	bf00      	nop
 80082b8:	20000018 	.word	0x20000018

080082bc <_kill_r>:
 80082bc:	b538      	push	{r3, r4, r5, lr}
 80082be:	4d07      	ldr	r5, [pc, #28]	@ (80082dc <_kill_r+0x20>)
 80082c0:	2300      	movs	r3, #0
 80082c2:	4604      	mov	r4, r0
 80082c4:	4608      	mov	r0, r1
 80082c6:	4611      	mov	r1, r2
 80082c8:	602b      	str	r3, [r5, #0]
 80082ca:	f7f9 f943 	bl	8001554 <_kill>
 80082ce:	1c43      	adds	r3, r0, #1
 80082d0:	d102      	bne.n	80082d8 <_kill_r+0x1c>
 80082d2:	682b      	ldr	r3, [r5, #0]
 80082d4:	b103      	cbz	r3, 80082d8 <_kill_r+0x1c>
 80082d6:	6023      	str	r3, [r4, #0]
 80082d8:	bd38      	pop	{r3, r4, r5, pc}
 80082da:	bf00      	nop
 80082dc:	2000046c 	.word	0x2000046c

080082e0 <_getpid_r>:
 80082e0:	f7f9 b930 	b.w	8001544 <_getpid>

080082e4 <_init>:
 80082e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082e6:	bf00      	nop
 80082e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082ea:	bc08      	pop	{r3}
 80082ec:	469e      	mov	lr, r3
 80082ee:	4770      	bx	lr

080082f0 <_fini>:
 80082f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082f2:	bf00      	nop
 80082f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082f6:	bc08      	pop	{r3}
 80082f8:	469e      	mov	lr, r3
 80082fa:	4770      	bx	lr
